package com.tengzhi.IM.layerIM.service.Impl;

import cn.hutool.core.io.FileUtil;
import cn.hutool.core.lang.tree.Tree;
import cn.hutool.core.lang.tree.TreeNodeConfig;
import cn.hutool.core.lang.tree.TreeUtil;
import cn.hutool.core.util.StrUtil;
import cn.hutool.core.util.URLUtil;
import cn.hutool.json.JSONObject;
import com.tengzhi.IM.Dwr.controller.Dwrmsg;
import com.tengzhi.IM.business.message.dao.TimFlockAddMesDao;
import com.tengzhi.IM.business.message.dao.TimFlockDao;
import com.tengzhi.IM.business.message.model.TimFlock;
import com.tengzhi.IM.business.message.model.TimFlockAddMes;
import com.tengzhi.IM.business.upload.model.imFile;
import com.tengzhi.IM.layerIM.dao.IMDao;
import com.tengzhi.IM.layerIM.dao.Impl.IMDaoImpl;
import com.tengzhi.IM.layerIM.service.FriendUserService;
import com.tengzhi.IM.layerIM.vo.*;
import com.tengzhi.IM.websocket.server.WebSocketServer;
import com.tengzhi.base.jpa.result.Result;
import com.tengzhi.base.security.common.model.SecurityUser;
import com.tengzhi.base.tools.UUID.UUIDUtil;
import org.apache.commons.lang3.StringUtils;
import org.directwebremoting.ScriptBuffer;
import org.directwebremoting.ScriptSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.transaction.Transactional;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

/**
 * @author 王翔
 * @create 2020-05-16
 */
@Service
@Transactional
public class FriendUserServiceImpl implements FriendUserService {
    @Autowired
    TimFlockAddMesDao timFlockAddMesDao;

    //默认用户头像url相对路径
    private static final String DEFAULT_AVATAR_PATH = "/static/script/im/img/gr.png";
    //默认群组图标路径
    private static final String DEFAULT_TEAM_ICON_PATH = "/static/script/im/img/team.png";

    @Autowired
    private IMDao IMDao;

    @Override
    public ImData findFriendUserAll() {
        List<Friend> fiFriends = new ArrayList<>();
        SecurityUser securityUser = (SecurityUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
        //部门 && 用户信息
        List<Friend> deptList = IMDao.getDepartmentList();
        List<FriendUsers> friendUsersList = IMDao.friendUsers(securityUser.getUserId(),null);

        //末级部门
        deptList.forEach(item -> {
            item.setList(getFriendUsers4DeptId(friendUsersList, item.getId()));
            if (null != item.getList() && item.getList().size() > 0) {
                fiFriends.add(item);
            }
        });
        //组织架构树
        TreeNodeConfig treeNodeConfig = new TreeNodeConfig();
        // 自定义属性名 都要默认值的
        treeNodeConfig.setIdKey("id");
        treeNodeConfig.setParentIdKey("uid");
        treeNodeConfig.setWeightKey("id");
        treeNodeConfig.setChildrenKey("groups");
        // 最大递归深度
        treeNodeConfig.setDeep(5);
        List<Tree<String>> deptTree = TreeUtil.build(deptList, "ROOT", treeNodeConfig,
                (dept, tree) -> {
                    tree.setId(dept.getId());
                    tree.setParentId(dept.getUid());
                    tree.setWeight(dept.getId());
                    tree.setName(dept.getGroupname());
                    tree.putExtra("groupname", dept.getGroupname());
                    // 扩展属性 ...
                    tree.putExtra("list", getFriendUsers4DeptId(friendUsersList, dept.getId()));
                });

        //用户信息
        Mine my = new Mine();
        my.setUsername(securityUser.getNickName());
        my.setId(securityUser.getUserId());
        String path = IMDao.ReadPath(securityUser.getUserId());
        File file = new File(absolute(path));
        if (StrUtil.isNotBlank(path)) {
            my.setAvatar("/Im/getImg/" + securityUser.getUserId());
        }
        if (!file.exists()) {
            my.setAvatar(DEFAULT_AVATAR_PATH);
        } else {
            my.setAvatar(DEFAULT_AVATAR_PATH);
        }
        my.setSign(securityUser.getSign());
        // my.setStatus("online");

        //返回
        Map<String, Object> map = new HashMap();
        ImData us = new ImData();
        us.setCode("0");
        us.setMsg("");
        map.put("mine", my);
        map.put("group", IMDao.friendGroupList());
        map.put("friend", fiFriends);
        map.put("company", deptTree);
        us.setData(map);

        return us;
    }

    /**
     * 通过部门获取用户列表
     *
     * @param deptId   部门ID
     * @return
     */
    private List<FriendUsers> getFriendUsers4DeptId(List<FriendUsers> friendUsersList, String deptId) {
        List<FriendUsers> friendUsers = friendUsersList.stream().filter(item -> deptId.equals(item.getGroupid())).collect(Collectors.toList());
        friendUsers.forEach(item -> {
            firendUserHander(item);
        });
        return friendUsers;
    }

    /**
     * 好友状态获取以及处理
     *
     * @param friendUsers
     */
    private FriendUsers firendUserHander(FriendUsers friendUsers) {
        Boolean webSocketOnlineFlag = WebSocketServer.getflag(friendUsers.getId());
        Boolean drwOnlineFlag = Dwrmsg.getFlag(friendUsers.getId());
        if (webSocketOnlineFlag || drwOnlineFlag) {
            friendUsers.setStatus("online");
        }
        if (StringUtils.isBlank(friendUsers.getAvatar())) {
            friendUsers.setAvatar(DEFAULT_AVATAR_PATH);
        }else{
            if(!FileUtil.exist(friendUsers.getAvatar())){
                friendUsers.setAvatar(DEFAULT_AVATAR_PATH);
            }
        }
        return friendUsers;
    }



    @Override
    public Map<String, Object> agree(String uuId,String uid, String gid) throws IOException {
        SimpleDateFormat sdf =   new SimpleDateFormat( "yyyy/MM/dd" );
        String str = sdf.format(new Date());
        SecurityUser securityUser= (SecurityUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
        //为进群的用户构建一条系统消息
        TimFlockAddMes timFlockAddMes=new TimFlockAddMes();
        timFlockAddMes.setId(UUIDUtil.uuid());
        timFlockAddMes.setContent(securityUser.getRealName()+"已经同意你的加群申请");
        timFlockAddMes.setCreationTime(new Date());
        timFlockAddMes.setGanTime(str);
        timFlockAddMes.setGroupManager(uid);
        timFlockAddMesDao.store(timFlockAddMes);
        IMDao.user_m_flockSava(uid,gid);
        IMDao.tim_flock_add_mes(uuId);

        //发送管道通信
        //1.先发送同意进群提醒
        JSONObject jsonObjectemind = new JSONObject();
        jsonObjectemind.put("type", "5");
        ConcurrentHashMap<String, WebSocketServer> webSocket = WebSocketServer.getWebSocketMap();
        ConcurrentHashMap<String, ScriptSession> dwr=Dwrmsg.getJavascriptSessionMap();
        ScriptBuffer script = new ScriptBuffer();
        script.appendCall("showMessage", jsonObjectemind.toJSONString(1));
        //Websocket
        if(webSocket.get(uid)!=null){
            webSocket.get(uid).sendMessage(jsonObjectemind.toJSONString(1));
        }
        //Dwr
        if(dwr.get(uid)!=null){
            dwr.get(uid).addScript(script);
        }
        //////////////////////////////////////////////////////////

        //2.然后发送建群消息开始构建虚拟群
        JSONObject jsonObjectFlock = new JSONObject();
        jsonObjectFlock.put("id",gid);
        jsonObjectFlock.put("name",IMDao.groupnameBySql(gid));
        jsonObjectFlock.put("type", "6");
        ConcurrentHashMap<String, WebSocketServer> webSocket001 = WebSocketServer.getWebSocketMap();
        ConcurrentHashMap<String, ScriptSession> dwr001=Dwrmsg.getJavascriptSessionMap();
        ScriptBuffer script001 = new ScriptBuffer();
        script001.appendCall("showMessage", jsonObjectFlock.toJSONString(1));
        //Websocket
        if(webSocket001.get(uid)!=null){
            webSocket001.get(uid).sendMessage(jsonObjectFlock.toJSONString(1));
        }
        //Dwr
        if(dwr001.get(uid)!=null){
            dwr001.get(uid).addScript(script);
        }

        Map<String,Object> map =new HashMap<>();
        map.put("code",0);
        map.put("msg","成功");
        return map;
    }



    @Override
    public String getImgIO(String userId, HttpServletRequest request, HttpServletResponse response) throws Exception {
        String path = IMDao.ReadPath(userId);
        if (absolute(path) != null) {
            File file = new File(absolute(path));
            // 路径为文件且不为空
            if (file.exists()) {
                ServletOutputStream out = null;
                FileInputStream ips = null;
                try {
                    // 获取图片存放路径
                    String imgPath = absolute(path);
                    ips = new FileInputStream(new File(imgPath));
                    response.setContentType("multipart/form-data");
                    out = response.getOutputStream();
                    // 读取文件流
                    int len = 0;
                    byte[] buffer = new byte[1024 * 10];
                    while ((len = ips.read(buffer)) != -1) {
                        out.write(buffer, 0, len);
                    }
                    out.flush();
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    out.close();
                    ips.close();
                }
            }
        }
        return null;
    }

    /**
     * 路径拼接
     *
     * @param args
     * @return
     */
    public String PathJoin(String... args) {
        StringBuilder sb = new StringBuilder();
        String temp = null;
        for (int i = 0, max = args.length; i < max; i += 1) {
            if (!StrUtil.isNullOrUndefined(args[i])) {
                temp = args[i].replaceAll(("/".equals(File.separator) ? "\\\\" : "/"), ("/".equals(File.separator) ? "/" : "\\\\"));
                // 处理拼接中间的路径分隔符
                if (sb.length() > 0) {
                    if (temp.startsWith(File.separator) && sb.lastIndexOf(File.separator) == (sb.length() - 1)) {
                        temp = temp.substring(1);
                    } else if (!temp.startsWith(File.separator) && sb.lastIndexOf(File.separator) != (sb.length() - 1)) {
                        temp = File.separator + temp;
                    }
                }

                /*
                 * if (i != max - 1 && !args[i+1].startsWith(File.separator)) { temp = temp + File.separator; }
                 */
                sb.append(temp);
                temp = null;
            }
        }
        return sb.toString();
    }

    public String absolute(String path) {
        String UPLOAD_ABS_PATH = String.format("%s%s%s%s", File.separator, "WEB-INF", File.separator, "upload");
        String uploadFileAbsolutePath = PathJoin(UPLOAD_ABS_PATH, path);
        String disk = IMDaoImpl.class.getResource("").getPath();
        disk = disk.substring(1, 3);
        String absolute = disk + uploadFileAbsolutePath;
        return absolute;
    }

    @Override
    public Result sign(SignVo sign) {
        IMDao.updateSign(sign);
        return Result.resultOk();
    }

    @Override
    public Result updateMsg(MsgVo msgVo) {
        IMDao.updateMsg(msgVo);
        return Result.resultOk();
    }

    @Transactional(value = Transactional.TxType.SUPPORTS)
    @Override
    public List<RMsg> getofflinemsg() {
        List<RMsg> msg = new ArrayList<>();
        try {
            msg = IMDao.getofflinemsg();
        }catch (Exception e){}
        msg.forEach(Item -> {
            String path = IMDao.ReadPath(Item.getAvatar());
            File file = new File(absolute(path));
            if (StrUtil.isNotBlank(path)) {
                Item.setAvatar("/Im/getImg/" + Item.getAvatar());
            }
            if (!file.exists()) {
                Item.setAvatar(DEFAULT_AVATAR_PATH);
            } else {
                Item.setAvatar(DEFAULT_AVATAR_PATH);
            }
        });
        return msg;
    }

    @Override
    public Map<String, Object> SearchConut(String value) {
        return IMDao.SearchConut(value);
    }

    @Override
    public List<imFile> FILES() {
        return IMDao.selectFile30Day();
    }

    @Override
    public void DropAll() {
        IMDao.DelAll();
    }

    @Override
    public Map<String,Object> Search(String value,Integer page,Integer limit){
        return IMDao.Search(value,page,limit);
    }


    @Override
    public List<RMsg> gethistroy(String userId,String type) {
        List<RMsg> msg=null;
        if("friend".equalsIgnoreCase(type)){
            msg= IMDao.gethistroy(userId);
        }else{
            msg= IMDao.gethistroyGroup(userId);
        }
        msg.forEach(Item -> {
            String path = IMDao.ReadPath(Item.getAvatar());
            File file = new File(absolute(path));
            if (StrUtil.isNotBlank(path)) {
                Item.setAvatar(URLUtil.complateUrl("/Im/getImg/", Item.getAvatar()));
            }
            if (!file.exists()) {
                Item.setAvatar(DEFAULT_AVATAR_PATH);
            } else {
                Item.setAvatar(DEFAULT_AVATAR_PATH);
            }
        });
        return msg;
    }




    @Override
    public Result applyGroupSava(String GroupId, String remark) throws IOException {
        //通过群ID去查群主号码
        SecurityUser user= (SecurityUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
        String FlockUserID=IMDao.getSeqBySqlFlockUserID(GroupId);

        TimFlockAddMes timFlockAddMes=new TimFlockAddMes();
        timFlockAddMes.setId(UUIDUtil.uuid());
        timFlockAddMes.setGroupId(GroupId);
        timFlockAddMes.setAllow("0");
        timFlockAddMes.setUserId(user.getUserId());
        timFlockAddMes.setContent("申请加入你的群组");
        timFlockAddMes.setCreationTime(new Date());
        SimpleDateFormat sdf =   new SimpleDateFormat( "yyyy/MM/dd" );
        String str = sdf.format(new Date());
        timFlockAddMes.setGanTime(str);
        timFlockAddMes.setRemark(remark);
        timFlockAddMes.setGroupManager(FlockUserID);
        timFlockAddMes.setUsername(user.getRealName());
        //当前没有做图片
        timFlockAddMes.setAvatar("");
        //消息设置未读取
        timFlockAddMes.setIsread("0");
        timFlockAddMesDao.save(timFlockAddMes);

        //通知群主
        //////////////////////////////////////////////////////////
        JSONObject jsonObject = new JSONObject();
        jsonObject.put("type", "5");
        ConcurrentHashMap<String, WebSocketServer> webSocket = WebSocketServer.getWebSocketMap();
        ConcurrentHashMap<String, ScriptSession> dwr=Dwrmsg.getJavascriptSessionMap();
        ScriptBuffer script = new ScriptBuffer();
        script.appendCall("showMessage", jsonObject.toJSONString(1));

        //Websocket
        if(webSocket.get(FlockUserID)!=null){
            webSocket.get(FlockUserID).sendMessage(jsonObject.toJSONString(1));
        }
        //Dwr
        if(dwr.get(FlockUserID)!=null){
            dwr.get(FlockUserID).addScript(script);
        }
        //////////////////////////////////////////////////////////
        return Result.resultOk();

    }

    @Override
    public TreeImData AdminCall(String GroupId) {
        TreeImData treeImData=new TreeImData();
        treeImData.setMsg("");
        treeImData.setCode(0);
        treeImData.setCount(IMDao.AdminCall(GroupId).size());
        treeImData.setData(IMDao.AdminCall(GroupId));
        return treeImData;
    }

    @Override
    public TreeImData MainDie(String GroupId) {
        TreeImData treeImData=new TreeImData();
        treeImData.setMsg("");
        treeImData.setCode(0);
        treeImData.setCount(IMDao.MainDie(GroupId).size());
        treeImData.setData(IMDao.MainDie(GroupId));
        return treeImData;
    }

    @Override
    public TreeImData AdminDie(String GroupId) {
        TreeImData treeImData=new TreeImData();
        treeImData.setMsg("");
        treeImData.setCode(0);
        treeImData.setCount(IMDao.AdminDie(GroupId).size());
        treeImData.setData(IMDao.AdminDie(GroupId));
        return treeImData;
    }

    @Override
    public TreeImData inviteUser(String GroupId) {
        TreeImData treeImData=new TreeImData();
        treeImData.setMsg("");
        treeImData.setCode(0);
        treeImData.setCount(IMDao.inviteUser(GroupId).size());
        treeImData.setData(IMDao.inviteUser(GroupId));
        return treeImData;
    }

    /**
    * @Param: [map]
    * @return: com.tengzhi.base.jpa.result.Result
    * @Author: 鱼游浅水
    * @Date: 2020/6/13 14:18
    * @description: 设置管理员
    */
    @Override
    public Result AdminAdd(Map<String, Object> map) throws IOException {
        List<Map<String,Object>> list=(List<Map<String,Object>>) map.get("TreeData");
        String GroupId=map.get("GroupId").toString();
        ConcurrentHashMap<String, WebSocketServer> webSocket = WebSocketServer.getWebSocketMap();
        ConcurrentHashMap<String, ScriptSession> dwr=Dwrmsg.getJavascriptSessionMap();
        SecurityUser user= (SecurityUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();

            JSONObject jsonObjectemind = new JSONObject();
            jsonObjectemind.put("type", "5");
            ScriptBuffer scriptemind = new ScriptBuffer();
            scriptemind.appendCall("showMessage", jsonObjectemind.toJSONString(1));
            SimpleDateFormat sdf =   new SimpleDateFormat( "yyyy/MM/dd" );
            String str = sdf.format(new Date());
            for (Map<String,Object> tree:list){
                //////////////////////////////////
                //构建一条用户提醒系统消息
                TimFlockAddMes timFlockAddMes=new TimFlockAddMes();
                timFlockAddMes.setId(UUIDUtil.uuid());
                timFlockAddMes.setContent(IMDao.SelectGroupName(GroupId)+"群已将你设为管理员(处理人:"+user.getRealName()+")");
                timFlockAddMes.setGanTime(str);
                timFlockAddMes.setGroupManager(tree.get("id").toString());
                timFlockAddMes.setCreationTime(new Date());
                timFlockAddMesDao.save(timFlockAddMes);
                //Websocket
                if(webSocket.get(tree.get("id"))!=null){
                    webSocket.get(tree.get("id")).sendMessage(jsonObjectemind.toJSONString(1));
                }
                //Dwr
                if(dwr.get(tree.get("id"))!=null){
                    dwr.get(tree.get("id")).addScript(scriptemind);
                }
                //////////////////////////////////设置管理员核心代码
                IMDao.AdminAdd(GroupId,tree.get("id").toString());
                //////////////////////////////////
            }
            return Result.resultOk();
    }


    /**
     * @Param: [map]
     * @return: com.tengzhi.base.jpa.result.Result
     * @Author: 鱼游浅水
     * @Date: 2020/6/13 14:18
     * @description: 管理员与群主拉人添加
     */
    @Override
    public Result inviteAdd(Map<String, Object> map) throws IOException {
        List<Map<String,Object>> list=(List<Map<String,Object>>) map.get("TreeData");
        String GroupId=map.get("GroupId").toString();
        ConcurrentHashMap<String, WebSocketServer> webSocket = WebSocketServer.getWebSocketMap();
        ConcurrentHashMap<String, ScriptSession> dwr=Dwrmsg.getJavascriptSessionMap();
        SecurityUser user= (SecurityUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();

        JSONObject jsonObjectemind = new JSONObject();
        jsonObjectemind.put("type", "5");
        ScriptBuffer scriptemind = new ScriptBuffer();
        scriptemind.appendCall("showMessage", jsonObjectemind.toJSONString(1));
        SimpleDateFormat sdf =   new SimpleDateFormat( "yyyy/MM/dd" );
        String str = sdf.format(new Date());
        for (Map<String,Object> tree:list){
            //////////////////////////////////
            //构建一条用户提醒系统消息
            TimFlockAddMes timFlockAddMes=new TimFlockAddMes();
            timFlockAddMes.setId(UUIDUtil.uuid());
            timFlockAddMes.setContent("已将你拉入"+IMDao.SelectGroupName(GroupId)+"群(处理人:"+user.getRealName()+")");
            timFlockAddMes.setGanTime(str);
            timFlockAddMes.setGroupManager(tree.get("id").toString());
            timFlockAddMes.setCreationTime(new Date());
            timFlockAddMesDao.save(timFlockAddMes);
            //Websocket
            if(webSocket.get(tree.get("id"))!=null){
                webSocket.get(tree.get("id")).sendMessage(jsonObjectemind.toJSONString(1));
            }
            //Dwr
            if(dwr.get(tree.get("id"))!=null){
                dwr.get(tree.get("id")).addScript(scriptemind);
            }
            //////////////////////////////////拉人核心代码
            IMDao.user_m_flockSava(tree.get("id").toString(),GroupId);
            //////////////////////////////////
        }
        return Result.resultOk();
    }


    /**
     * @Param: [map]
     * @return: com.tengzhi.base.jpa.result.Result
     * @Author: 鱼游浅水
     * @Date: 2020/6/13 14:18
     * @description: 管理员与群主拉人添加
     */
    @Override
    public Result DelFlockUser(Map<String, Object> map) throws IOException {
        List<Map<String,Object>> list=(List<Map<String,Object>>) map.get("TreeData");
        String GroupId=map.get("GroupId").toString();
        ConcurrentHashMap<String, WebSocketServer> webSocket = WebSocketServer.getWebSocketMap();
        ConcurrentHashMap<String, ScriptSession> dwr=Dwrmsg.getJavascriptSessionMap();
        SecurityUser user= (SecurityUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();

        JSONObject jsonObjectemind = new JSONObject();
        jsonObjectemind.put("type", "5");
        ScriptBuffer scriptemind = new ScriptBuffer();
        scriptemind.appendCall("showMessage", jsonObjectemind.toJSONString(1));
        SimpleDateFormat sdf =   new SimpleDateFormat( "yyyy/MM/dd" );
        String str = sdf.format(new Date());
        for (Map<String,Object> tree:list){
            //////////////////////////////////
            //构建一条用户提醒系统消息
            TimFlockAddMes timFlockAddMes=new TimFlockAddMes();
            timFlockAddMes.setId(UUIDUtil.uuid());
            timFlockAddMes.setContent("已将你移出"+IMDao.SelectGroupName(GroupId)+"群(处理人:"+user.getRealName()+")");
            timFlockAddMes.setGanTime(str);
            timFlockAddMes.setGroupManager(tree.get("id").toString());
            timFlockAddMes.setCreationTime(new Date());
            timFlockAddMesDao.save(timFlockAddMes);
            //Websocket
            if(webSocket.get(tree.get("id"))!=null){
                webSocket.get(tree.get("id")).sendMessage(jsonObjectemind.toJSONString(1));
            }
            //Dwr
            if(dwr.get(tree.get("id"))!=null){
                dwr.get(tree.get("id")).addScript(scriptemind);
            }
            //////////////////////////////////踢人核心代码
            IMDao.user_m_flockDel(tree.get("id").toString(),GroupId);
            //////////////////////////////////
        }
        return Result.resultOk();
    }



    @Override
    public Map<String, Object> agreeFriend(String page) {
        return IMDao.agreeFriend(page);
    }

    @Override
    public Map<String, Object> GroupManagerUser(String GroupId) {
        Map<String,Object> map=new HashMap<>();
        SecurityUser securityUser= (SecurityUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
        if(IMDao.FlockCount(GroupId,securityUser.getUserId()).size()>0){
            map.put("type",1);
        }else if(IMDao.FlockAdmin(GroupId,securityUser.getUserId()).size()>0){
            map.put("type",2);
        }else{
            map.put("type",0);
        }
        return map;
    }

    @Override
    public Result dissolution(String GroupId) throws IOException {
        SecurityUser securityUser=(SecurityUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
        List<Map<String,Object>> ListuserId=IMDao.friendGroupAndUserList(GroupId,securityUser.getUserId());
        ConcurrentHashMap<String, WebSocketServer> webSocketMap = WebSocketServer.getWebSocketMap();
        ConcurrentHashMap<String, ScriptSession> dwrsession=Dwrmsg.getJavascriptSessionMap();
        String userId=securityUser.getUserId();
        JSONObject jsonObject = new JSONObject();
        jsonObject.put("groupId",GroupId);
        jsonObject.put("type", "4");
        JSONObject jsonObjectemind = new JSONObject();
        jsonObjectemind.put("type", "5");
        jsonObjectemind.put("imLog","clear");
        jsonObjectemind.put("flockId",GroupId);
        SimpleDateFormat sdf =   new SimpleDateFormat( "yyyy/MM/dd" );
        String str = sdf.format(new Date());
        for (Map<String,Object> item :ListuserId){
            if(item.get("user_id")!=null){
                //解散群为群里用户构建一条系统消息
                TimFlockAddMes timFlockAddMes=new TimFlockAddMes();
                timFlockAddMes.setId(UUIDUtil.uuid());
                timFlockAddMes.setContent("群主已解散"+IMDao.SelectGroupName(GroupId)+"群");
                timFlockAddMes.setCreationTime(new Date());
                timFlockAddMes.setGanTime(str);
                timFlockAddMes.setGroupManager(item.get("user_id").toString());
                timFlockAddMesDao.save(timFlockAddMes);
                if (!item.get("user_id").equals(userId)&&webSocketMap.containsKey(userId)){
                    //////////////////////////////////////////////
                    if(webSocketMap.get(item.get("user_id"))!=null){
                        webSocketMap.get(item.get("user_id")).sendMessage(jsonObject.toJSONString(1));
                        webSocketMap.get(item.get("user_id")).sendMessage(jsonObjectemind.toJSONString(1));
                   }
                }
                // 群消息ie9以下的用户
                if (!item.get("user_id").equals(userId)&&dwrsession.containsKey(userId)) {
                    ScriptBuffer script = new ScriptBuffer();
                    script.appendCall("showMessage", jsonObject.toJSONString(1));
                    ScriptBuffer scriptemind = new ScriptBuffer();
                    scriptemind.appendCall("showMessage", jsonObjectemind.toJSONString(1));
                    if(dwrsession.get(item.get("user_id"))!=null){
                        dwrsession.get(item.get("user_id")).addScript(script);
                        dwrsession.get(item.get("user_id")).addScript(scriptemind);
                    }
                }

            }
        }
        IMDao.dissolutionDel(GroupId);
        return Result.resultOk();
    }

    @Override
    public Result exit(String GroupId) throws IOException {
        SecurityUser securityUser= (SecurityUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
        String userId=securityUser.getUserId();
        ConcurrentHashMap<String, WebSocketServer> webSocket = WebSocketServer.getWebSocketMap();
        ConcurrentHashMap<String, ScriptSession> dwr=Dwrmsg.getJavascriptSessionMap();

        JSONObject jsonObjectemind = new JSONObject();
        jsonObjectemind.put("type","5");
        ScriptBuffer scriptemind = new ScriptBuffer();
        scriptemind.appendCall("showMessage", jsonObjectemind.toJSONString(1));
        String FlockManageId=IMDao.SelectGroupUserId(GroupId);
        SimpleDateFormat sdf =  new SimpleDateFormat( "yyyy/MM/dd" );
        String str = sdf.format(new Date());
        //////////////////////////////////
        //为群管理员构建一个用户退群消息
        TimFlockAddMes timFlockAddMes=new TimFlockAddMes();
        timFlockAddMes.setId(UUIDUtil.uuid());
        timFlockAddMes.setContent(securityUser.getRealName()+"已退出你的"+IMDao.SelectGroupName(GroupId)+"群");
        timFlockAddMes.setGanTime(str);
        timFlockAddMes.setCreationTime(new Date());
        timFlockAddMes.setGroupManager(FlockManageId);
        timFlockAddMesDao.save(timFlockAddMes);
        //Websocket
        if(webSocket.get(FlockManageId)!=null){
            webSocket.get(FlockManageId).sendMessage(jsonObjectemind.toJSONString(1));
        }
        //Dwr
        if(dwr.get(FlockManageId)!=null){
            dwr.get(FlockManageId).addScript(scriptemind);
        }

        return IMDao.exit(GroupId,userId);
    }

    @Override
    public Map<String, Object> GroupNumbers(String id) {
        return IMDao.GroupNumbers(id);
    }

    @Override
    public Result remind() {
        return IMDao.remind();
    }

    @Override
    public TreeImData TreeUser(){
        TreeImData treeImData=new TreeImData();
        treeImData.setMsg("");
        treeImData.setCode(0);
        treeImData.setCount(IMDao.treeUser().size());
        treeImData.setData(IMDao.treeUser());
        return treeImData;
    }

    @Override
    public Map<String, Object> refuse(String uuId,String uid, String gid) throws IOException {
        SimpleDateFormat sdf =   new SimpleDateFormat( "yyyy/MM/dd" );
        String str = sdf.format(new Date());
        SecurityUser user= (SecurityUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();

        //为进群的用户构建一条系统消息
        TimFlockAddMes timFlockAddMes=new TimFlockAddMes();
        timFlockAddMes.setId(UUIDUtil.uuid());
        timFlockAddMes.setContent(user.getRealName()+"拒绝了你的加群申请");
        timFlockAddMes.setGanTime(str);
        timFlockAddMes.setCreationTime(new Date());
        timFlockAddMes.setGroupManager(uid);
        timFlockAddMesDao.save(timFlockAddMes);
        IMDao.tim_flock_add_mesExit(uuId);

        //发送管道通信
        //1.先发送拒绝进群提醒
        JSONObject jsonObjectemind = new JSONObject();
        jsonObjectemind.put("type", "5");
        ConcurrentHashMap<String, WebSocketServer> webSocket = WebSocketServer.getWebSocketMap();
        ConcurrentHashMap<String, ScriptSession> dwr=Dwrmsg.getJavascriptSessionMap();
        ScriptBuffer script = new ScriptBuffer();
        script.appendCall("showMessage", jsonObjectemind.toJSONString(1));
        //Websocket
        if(webSocket.get(uid)!=null){
            webSocket.get(uid).sendMessage(jsonObjectemind.toJSONString(1));
        }
        //Dwr
        if(dwr.get(uid)!=null){
            dwr.get(uid).addScript(script);
        }
        //////////////////////////////////////////////////////////

        Map<String,Object> map =new HashMap<>();
        map.put("code",0);
        map.put("msg","成功");
        return map;
    }

    @Autowired
    TimFlockDao timFlockDao;
    @Override
    public Result TreeUserSava(Map<String,Object> map) throws IOException {
        List<Map<String,Object>> list=(List<Map<String,Object>>) map.get("TreeData");
        String GroupName=map.get("GroupName").toString();
        SecurityUser user= (SecurityUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();

        if(IMDao.judgeUnique(GroupName)){
            TimFlock timFlock=new TimFlock();
            timFlock.setId(UUIDUtil.uuid());
            timFlock.setAvatar("/static/script/im/img/team.png");
            timFlock.setGroupname(GroupName);
            timFlock.setCreator(user.getUserId());
            timFlock.setCorpId(user.getCorpId());
            timFlock.setGantime(new Timestamp(System.currentTimeMillis()));
            JSONObject jsonObject = new JSONObject();
            jsonObject.put("id",timFlock.getId());
            jsonObject.put("name", GroupName);
            jsonObject.put("type", "6");
            ConcurrentHashMap<String, WebSocketServer> webSocket = WebSocketServer.getWebSocketMap();
            ConcurrentHashMap<String, ScriptSession> dwr=Dwrmsg.getJavascriptSessionMap();
            ScriptBuffer script = new ScriptBuffer();
            script.appendCall("showMessage", jsonObject.toJSONString(1));


            //Websocket
            if(webSocket.get(user.getUserId())!=null){
                webSocket.get(user.getUserId()).sendMessage(jsonObject.toJSONString(1));
            }
            //Dwr
            if(dwr.get(user.getUserId())!=null){
                dwr.get(user.getUserId()).addScript(script);
            }
            //超级管理员
            IMDao.user_m_flockAdd(user.getUserId(),timFlock.getId());

            JSONObject jsonObjectemind = new JSONObject();
            jsonObjectemind.put("type", "5");
            ScriptBuffer scriptemind = new ScriptBuffer();
            scriptemind.appendCall("showMessage", jsonObjectemind.toJSONString(1));

            SimpleDateFormat sdf =   new SimpleDateFormat( "yyyy/MM/dd" );
            String str = sdf.format(new Date());
            for (Map<String,Object> tree:list){
                //////////////////////////////////
                //为进群的用户构建一条系统消息
                TimFlockAddMes timFlockAddMes=new TimFlockAddMes();
                timFlockAddMes.setId(UUIDUtil.uuid());
                timFlockAddMes.setContent(GroupName+"群创建成功群主已拉你进入群");
                timFlockAddMes.setGanTime(str);
                timFlockAddMes.setGroupManager(tree.get("id").toString());
                timFlockAddMes.setCreationTime(new Date());
                timFlockAddMesDao.save(timFlockAddMes);
                //Websocket
                if(webSocket.get(tree.get("id"))!=null){
                    webSocket.get(tree.get("id")).sendMessage(jsonObject.toJSONString(1));
                    webSocket.get(tree.get("id")).sendMessage(jsonObjectemind.toJSONString(1));
                }
                //Dwr
                if(dwr.get(tree.get("id"))!=null){
                    dwr.get(tree.get("id")).addScript(script);
                    dwr.get(tree.get("id")).addScript(scriptemind);
                }
                //////////////////////////////////
                //普通用户
                IMDao.user_m_flockAdd0(tree.get("id").toString(),timFlock.getId());
            }
            timFlockDao.save(timFlock);
            return Result.resultOk();
        }else{
            return Result.error("群名称重复");
        }
    }

    @Override
    public Result InnovateFlockName(String GroupName,String GroupId) {
        IMDao.InnovateFlockName(GroupName,GroupId);
        return Result.resultOk();
    }
}
