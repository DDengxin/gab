<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" xmlns:tz="http://www.w3.org/1999/xhtml">
<head>
    <th:block th:replace="~{model/Head :: head(~{::title},_,_,${'miniui,common'})}">
        <title>类型选择器</title>
    </th:block>
</head>
<body autoload="false">

<input name="paramId" class="mini-hidden"/>
<form id="form1" method="post">
    <input class="mini-hidden" name="paramXtype"/>
    <div class="mini-toolbar" style="text-align: center; line-height: 30px;" borderStyle="border:0;">
        <table style="width: 100%;">
            <tr>
                <td style="white-space: nowrap;" align="left">
                    <label class="hmq-label" text="参数模块">
                        <input class="mini-combobox" name="paramMod" id="paramMod" url="/system/parameter/MainParams" onvaluechanged="onParamModValueChanged" nullItemText="全部" showNullItem="true"/>
                    </label>
                    <label class="hmq-label" text="参数类型">
                        <input class="mini-combobox" name="paramType2" id="paramType2" enabled="true" nullItemText="全部" showNullItem="true"/>
                    </label>
                    <label class="hmq-label" text="类型名称">
                        <input class="mini-textbox" name="paramName"/>
                    </label>
                </td>
                <td style="white-space: nowrap;" align="right">
                    <a class="mini-button" iconCls="icon-search" onclick="search_option">查询</a>
                    <a class="mini-button" iconCls="icon-ok" onclick="confirm">确认</a>
                    <a class="mini-button" iconCls="icon-remove" onclick="closeWindow('cancel')">取消</a>
                </td>
            </tr>
        </table>
    </div>
</form>
<!--撑满页面-->
<div class="mini-fit">
    <div tz:datagrid="treegrid" id="srch_grid" treeColumn="paramName" sortField="paramOrd"
         idField="paramId" parentField="parentId" resultAsTree="true" url="parameter.html"
         expandOnLoad="0"  showTreeLines="true" ShowTreeicon="false" onrowdblclick="onRowDblClick"
         showPager="false" pageSize="999999"
         virtualScroll="true"
    >
        <div property="columns">
            <div tz:datagrid="checkcolumn"></div>
            <div tz:datagrid="column" field="paramName" name="paramName" width="100%">类型名称</div>
        </div>
    </div>
</div>
<script type="text/javascript">
    mini.parse();
    var form = new mini.Form("form1");
    var grid = mini.get("srch_grid");
    grid.bindSearchForm(form);

    var page_options = {
        multiSelect: false, //是否多选
        paramMod: null,
		paramType: null,
        paramXtype: null,
        //auto:paramMod、paramType传值过来不允许编辑，否则允许编辑，true:无论如何允许编辑，false:无论如何不允许编辑
        allowEditModAndType: true,
        //是否显示空节点
        showNullNode: true,
    };
    //拦截加载事件，加载树形结构
    grid.on('load', function (e) {
        var tree = new mini.DataTree();
        tree.setExpandOnLoad(grid.getExpandOnLoad());
        tree.setSortOrder(grid.getSortField());
        tree.setCheckSelectOnLoad(grid.getCheckSelectOnLoad());
        tree.setMultiSelect(grid.setMultiSelect());
        tree.setData(mini.listToTree(JSON.parse(e.text).data, grid.getNodesField(), grid.getIdField(), grid.getParentField()));


        //过滤参数类型
        var paramTypes = mini.getByName("paramType2").getSelecteds().map(function (v) {
            return v.id
        });

        if (paramTypes.length > 0) {
            var parentNodes = tree.getAllChildNodes().filter(function (node) {
                return !!~paramTypes.indexOf(node.paramType);
            });
            tree.filter(function (node) {
                for (var i = 0, max = parentNodes.length; i < max; i += 1) {
                    if (parentNodes[i].paramId === node.paramId || tree.isAncestor(parentNodes[i], node)) {
                        return true;
                    }
                }
                return false;
            });
        }

        grid.loadList(tree.getDataView());
        //销毁控件，释放内存
        tree.destroy();
    });

    /**
     * 初始化页面
     * @param options
     *  multiSelect:是否多选
     * @constructor
     */
    function SetData(options) {
        page_options = $.extend(page_options, options.data);
        grid.setMultiSelect(page_options.multiSelect);
        form.setData(page_options, true);
        form.getField('paramType2').setValue(page_options.paramType);
        form.getField('paramMod').doValueChanged();

        if (false === page_options.allowEditModAndType) {
            setIdDisable("paramMod");
        } else if ('auto' === page_options.allowEditModAndType) {
            if (hmq.isNotEmpty(page_options.paramMod)) {
                setIdDisable("paramMod");
            }
        }
        //默认查询
        search_option();
    }

    grid.on('update', function (e) {
        if (true === page_options.showNullNode) {
            grid.addNode({paramId: "ROOT", paramName: "无"}, "before", grid.getRow(0));
        }
    });

    /**
     * 本地筛选
     **/
    function search_option() {
        grid.load();
    }

    function confirm(e) {
        var row = grid.getSelected();
        if (grid.getSelecteds().length <= 0) {
            hmq.tipDanger('请选中一行数据!');
        } else if ($("[name=paramId]").val() == row.paramId) {
            hmq.tipDanger('不能选自身节点!');
        } else {
            closeWindow('ok');
        }
    }

    /**
     * 获取数据
     * @returns {*}
     * @constructor
     */
    function GetData() {
        if (page_options.multiSelect) {
            return grid.getSelecteds();
        } else {
            return grid.getSelected();
        }
    }

    /**
     * 行双击事件
     * @param e
     */
    function onRowDblClick(e) {
        confirm("ok");
    }

    //关闭
    function closeWindow(action) {
        if (window.CloseOwnerWindow) {
            return window.CloseOwnerWindow(action);
        } else {
            window.close();
        }
    }

    function onParamModValueChanged(e) {
        mini.get("paramType2").setEnabled(true);
        mini.get("paramType2").load("/system/parameter/NodeParams/{0}/{1}".format(e.sender.getValue(), form.getField('paramXtype').getValue()));
    }
</script>
</body>
</html>