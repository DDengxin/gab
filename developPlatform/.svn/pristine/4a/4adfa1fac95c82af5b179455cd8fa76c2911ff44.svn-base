<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" xmlns:tz="http://www.w3.org/1999/xhtml">
<head>
    <th:block th:replace="~{model/Head :: head(~{::title},_,_,${'miniui,common'})}">
        <title>销售合同【新增】</title>
    </th:block>
</head>
<body>
<div class="mini-fit">
    <form id="form1">
        <input id="action" name="action" class="mini-hidden"/>
        <input class="mini-hidden" name="outType" id="outType"  />
        <table class="hmq-modify-table">
            <tr>
                <td title>单号：</td>
                <td content>
                    <input id="outNote" name="outNote" class="mini-textbox" emptyText="自动生成" allowInput="false"/>
                </td>
                <td title>日期：</td>
                <td content>
                    <input class="mini-datepicker" name="outRq" dateFormat="yyyy-MM-dd" value="new Date()"/>
                </td>
                <td title>部门：</td>
                <td content>
                    <input name="outCustomer" textName="customer"  class="mini-treeselect" multiSelect="false" valueFromSelect="false"
                           url="/system/dept/combobox/getDeptTreeList"
                           showClose="true" oncloseclick="onCloseClickClearValue"/>
                </td>
                <td title>库房：</td>
                <td content>
                    <input class="mini-combobox" required name="outLib" id="outLib"/>
                    <input class="mini-combobox" required name="fhStype" id="fhStype"  visible="false"  url="/system/parameter/getParamsSelectList/销售/发货方式" value="XBZFH" />
                </td>
            </tr>
        </table>
    </form>
    <div tz:datagrid="datagrid" id="datagrid" idField="outContract" sortField="outContract" sortOrder="asc" style="width:100%;height:450px;"
         url="/tooling/materiel/getOutList"
         allowCellEdit="true" allowCellSelect="true" multiSelect="true" editNextOnEnterKey="true" editNextRowCell="true" allowMoveColumn="true"
         showPager="false" OnCellCommitEdit="OnCellCommitEdit" allowCellValid="true" showColumnsMenu="true"
         showSummaryRow="true" OnCellBeginEdit="OnCellBeginEdit" ondrawsummarycell="onDrawSummaryCell" oncellvalidation="onCellValidation" 
         sortMode="client">
        <div property="columns">
            <div tz:datagrid="checkcolumn" width="35"></div>
            <div tz:datagrid="indexcolumn" width="35"></div>
            <div tz:datagrid="column" field="outOriginalPack" width="150" >原包装号 <input property="editor" class="mini-textbox" onvaluechanged="onRightNameChangeHandler" /></div>
            <div tz:datagrid="column" field="outContract" width="120">订单号
                <input property="editor" class="mini-textbox" />
            </div>
            <div tz:datagrid="column" field="outCode" align="center" width="100">编码
                <input id="outCode" property="editor" class="mini-buttonedit" onbuttonclick="onButtonEdit" allowInput="false"/>
            </div>

            

            <div tz:datagrid="column" field="cpcodeName" name="cpcodeName" align="left" width="120">名称</div>
            <div tz:datagrid="column" field="cpcodeSize" name="cpcodeSize" align="left" width="120">规格</div>
            <div tz:datagrid="column" field="cpcodeSizeEn" name="cpcodeSizeEn" align="left" width="100">长度</div>
            <div tz:datagrid="column" field="cpcodeXp" name="cpcodeXp" align="left" width="100">品牌</div>
            <div tz:datagrid="column" field="cpcodeFl" name="cpcodeFl" align="left" width="120">大类</div>
            <div tz:datagrid="column" field="outSl" width="80" align="right" numberFormat="#,0.0000" summaryType="sum">数量
            	<input property="editor" class="mini-textbox" />
            </div>
            <div tz:datagrid="column" field="outBpack" width="150" align="left" visible="false">大包装号</div>
            <div tz:datagrid="column" field="outPack" width="150" >包装号 </div>
            <!-----Start----->
                <!--隐藏-->
                <div tz:datagrid="column" field="outPh" name="outPh" width="120" visible="false">批号
                    <input property="editor" class="mini-textbox" />
                </div>
                <div tz:datagrid="column" field="outLuono" name="outLuono" width="120" visible="false">原料炉号
                    <input property="editor" class="mini-textbox" />
                </div>
                <!--隐藏-->
            <!-----End----->
            <div tz:datagrid="column" field="outPrice" width="150" align="left" visible="false"></div>
            <div tz:datagrid="column" field="outHs" width="150" align="left" visible="false"></div>
            <div tz:datagrid="column" field="outBz" width="150" align="left" visible="false"></div>
            <div tz:datagrid="column" field="outTax" width="150" align="left" visible="false" value=0.13></div>
            <div tz:datagrid="column" field="outType" width="150" align="left" visible="false"></div>
            <div tz:datagrid="column" field="" width="100%"></div>
        </div>
    </div>
</div>
<div class="mini-toolbar hmq-toolbar">
    <a class="mini-button" onclick="addRow" iconCls="icon-add" id="addBtn">增行</a>
    <a class="mini-button" onclick="delRow" iconCls="icon-remove" id="delBtn">删行</a>
    <a class="mini-button" onclick="delAll" iconCls="icon-remove" id="delAllBtn">删单</a>
    <a class="mini-button" onclick="SaveData" iconCls="icon-save" id="saveBtn">保存</a>
    <a class="mini-button" onclick="CloseWindow" iconCls="icon-cancel">关闭</a>
</div>
<th:block th:replace="~{model/Approval :: Approval() }"></th:block>
</body>
<script type="text/javascript">
    mini.parse();
    var form = new mini.Form('form1');
    var grid = mini.get('datagrid');

    //销售客户列表
    function onSupplierClick(e) {
        var btnEdit = e.sender;
        return miniopen({
            targetWindow: window.top,
            url: "/sale/saleArchives/customerArchives/treeCustomer.html",
            title: "【销售客户】选择页面",
            width: 750,
            data: "C",
            height: 620,
            ondestroy: function cpcodeFl(action) {
                if (action == "ok") {
                    var iframe = this.getIFrameEl();
                    var data = iframe.contentWindow.GetData();
                    btnEdit.setValue(data.customerId);
                    btnEdit.setText(data.customerExp);
                }
            }
        });
    }

    /**
     新增行
     */
    function addRow() {
        var index = grid.getData().length;
        var outCustomer = mini.getByName("outCustomer").getValue();
        var outLib = mini.get("outLib").getValue();
        if (isNull(outCustomer)) {
            hmq.tipDanger("请先选择部门！");
            return false;
        } else if (isNull(outLib)) {
            hmq.tipDanger("请先选择库房！");
            return false;
        }
        var newRow = {};
        grid.addRow(newRow, index + 1);
        mini.getByName("outCustomer").disable();
        mini.get("outLib").disable();
        mini.get("fhStype").disable();
    }

    function onRightNameChangeHandler(e){
        var row = grid.getSelected();
        if(e.value){
            $.post("facksele", {park:e.value}, function (res) {
                if(res.code==200){
                    grid.updateRow(row, {
                        outCode: res.data.outCode,
                        cpcodeName: res.data.cpcodeName,
                        cpcodeSize: res.data.cpcodeSize,
                        outJs: 1,
                        outBz:  res.data.outBz,
                        outHs: res.data.outHs,
                        cpcodeSizeEn: res.data.cpcodeSizeEn,
                        cpcodeXp: res.data.cpcodeXp,
                        cpcodeFl: res.data.cpcodeFl,
                        outContract:res.data.outContract,
                        outTax : res.data.outTax,
                        outPrice : res.data.outPrice
                    });
                }else{
                    grid.updateRow(row,{outOriginalPack:''});
                }
            });
        }
    }

    /**
     删除行
     */
    function delRow() {
        var rows = grid.getSelecteds();
        if (rows.length > 0) {
            grid.removeRows(rows, true);
        } else {
            hmq.tipDanger('请选择需要删除的行！');
        }
    }

    /**
     删除整单
     */
    function delAll() {
        var note = mini.get("outNote").getValue();
        var rows = grid.getData();
        if (note.length > 0) {
            mini.confirm("确定删除整单吗？", "提示信息", function (returndata) {
                if (returndata == "ok") {
                    if (rows.length > 0) {
                        grid.removeRows(rows, true);
                    }
                    mini.get("delAllBtn").disable();
                    $['delete']("delete/{0}".format(note), function (res) {
                        if (200 === res.code) {
                            hmq.tipSuccess(res.msg || '删除成功', {
                                exec: function () {
                                    CloseWindow('refresh');
                                }
                            });
                        } else {
                            hmq.tipDanger(res.msg || '删除失败');
                        }
                    });
                }
            });
        } else {
            if (rows.length > 0) {
                grid.removeRows(rows, true);
            }
        }
    }

    /**
     保存
     */
    function SaveData() {
    	if (form.validate() && form.isValid()) {
            grid.validate();
            if (grid.isValid() == false) {
                var error = grid.getCellErrors()[0];
                grid.beginEditCell(error.record, error.column);
                return;
            }
            var entrydata = grid.getChanges();
            var deletedList = grid.getChanges('removed', false);
            $(entrydata).each(function (index) {
                entrydata[index].rightOrd = index;
                entrydata[index]._state = entrydata[index]._state || 'modified';
            });
            var method = 'add' == $('[name=action]').val() ? 'post' : 'put';
            console.log(entrydata);
            $[method]("add.html", JSON.stringify({
                eCkOut: form.getData(true),
                eckOutMx: entrydata,
                deletedList: deletedList
            }), function (res) {
                if (200 === res.code) {
                    hmq.tipSuccess(res.msg || '保存成功', {
                        exec: function () {
                            CloseWindow('refresh');
                        }
                    });
                } else {
                    hmq.tipDanger(res.msg || '保存失败');
                }
            }, null, {
                contentType: 'application/json'
            });
        }
    }


    /**
     回调函数
     */
    function SetData(options) {
    	   if (true !== options.isApproval) {
               //普通口径
    		   var formData = options.data.formData;
    	        var row = options.data.row;
    	        mini.get("outType").setValue(formData.outType);
    	        //动态列名
    	        //动态列转换
    	        hmq.business.dynamicProductParams(formData.outType, {
    	            miniDataGrid:grid,
    	            success: function (map, res) {},
    	            error: function (res) {
    	                hmq.tipDanger(res.msg || '动态数据列加载失败,请检查配置!');
    	            }
    	        });

    	        if(formData.outType=="CP"){
    	            grid.showColumn("outPh");
    	        }
    	        if(formData.outType=="YL"){
    	            grid.showColumn("outLuono");
    	        }

    	        if(formData.outType=="WL"){
    	        	mini.get("fhStype").setValue("XBZFH");
    	        	mini.get("fhStype").disable();
    	        	grid.showColumn(grid.getColumn("outJs"));
    	        }
    	        mini.get("outLib").load("/system/parameter/getParamsSelectListByParentId/仓库/库房档案/{0}".format(formData.outType));
    	        if ('add' == options.action) {
    	            grid.clearData();
    	            $('[name=action]').val(options.action);
    	        } else if ('edit' == options.action || 'view' == options.action) {
    	            $.get("getByNote/{0}".format(row.outNote), function (res) {
    	                if (200 === res.code) {
    	                    form.setData(res.data, true);
    	                    mini.get("fhStype").setValue("XBZFH");
    	                    var data = mini.decode(res.data);
    	                    grid.load({
    	                        params: JSON.stringify({outNote: form.getField('outNote').getValue()})
    	                    });
    	                    mini.getByName("outCustomer").disable();
    	                    mini.get("outLib").disable();
    	                    if (options.action == 'view') {
    	                        mini.get("addBtn").setVisible(false);
    	                        mini.get("delBtn").setVisible(false);
    	                        mini.get("delAllBtn").setVisible(false);
    	                        mini.get("saveBtn").setVisible(false);
    	                    }
    	                }
    	            },null,null,{
    	                loading:true,
    	                complete:function(){
    	                    AutoResizePopupWindow(window.self,true,true);
    	                }
    	            });
    	        }
    	   }else{
    		   //审批口径
    		   $.get("getByNote/{0}".format(options.data.businessId), function (res) {
                   if (200 === res.code) {
                	   form.setData(res.data, true);
	                    mini.get("fhStype").setValue("XBZFH");
	                    var data = mini.decode(res.data);
	                    grid.load({
	                        params: JSON.stringify({outNote: form.getField('outNote').getValue()})
	                    });
	                    mini.getByName("outCustomer").disable();
	                    mini.get("outLib").disable();
	                    if (options.action == 'view') {
	                        mini.get("addBtn").setVisible(false);
	                        mini.get("delBtn").setVisible(false);
	                        mini.get("delAllBtn").setVisible(false);
	                        mini.get("saveBtn").setVisible(false);
	                    }          
                   }
               }, null, null, {
                   complete: function () {
   				//表单只读
   				setFormReadOnly(form);
   				 //隐藏按钮区域
   				 $('.mini-toolbar.hmq-toolbar').hide();
                       //禁用grid编辑
                       grid.setAllowCellEdit(false);
                       //动态列转换  outType
                       hmq.business.dynamicProductParams(form.getField('outType').getValue(), {
           	            miniDataGrid:grid,
           	            success: function (map, res) {},
           	            error: function (res) {
           	                hmq.tipDanger(res.msg || '动态数据列加载失败,请检查配置!');
           	            }
           	        });
                   }
               });
    	   }
    	
       
    }
    function onButtonEdit(e) {
        var btnEdit = this;
        var index = grid.getData().length;
        if (e.source.id == "outCode") {
            return miniopen({
                targetWindow: window.top,
                url: "/tooling/materiel/wlbmselectlist.html",
                title: "编码选择列表",
                width: 1300,
                height: 620,
                onload: function () {
                    var iframe = this.getIFrameEl();
                    var data = {
                        action: "search",
                        cgStype: $("[name=outType]").val()
                    };
                    iframe.contentWindow.SetData(data);
                },
                ondestroy: function (action) {
                    if (action == "ok") {
                        var iframe = this.getIFrameEl();
                        var rows = iframe.contentWindow.GetMutiData();
                        rows = mini.clone(rows); //必须
                            var dataRows = appendRow(rows);
                            if (dataRows.length > 0) {
                                var row = grid.getSelected();
                                btnEdit.setValue(dataRows[0].cpcodeid);
								btnEdit.setText(dataRows[0].cpcodeid);
                                grid.updateRow(row, {
                                    outCode: dataRows[0].cpcodeid,
                                    cpcodeName: dataRows[0].cpcodename,
                                    cpcodeSize: dataRows[0].cpcodesize,
                                    outJs: '1',
                                    outBz: 'RMB',
                                    cpcodeSizeEn: dataRows[0].cpcodesizeen,
                                    cpcodeXp: dataRows[0].cpcodexp,
                                    cpcodeFl: dataRows[0].cpcodefl,
                                    outHs:dataRows[0].cpcode02
                                });
                                if (dataRows.length > 1) {
                                    for (var i = 1; i < dataRows.length; i++) {
                                        var r = dataRows[i];
                                        var newRow = {
                                            outCode: r.cpcodeid,
                                            cpcodeName: r.cpcodename,
                                            cpcodeSize: r.cpcodesize,
                                            outJs: '1',
                                            outBz: 'RMB',
                                            cpcodeSizeEn: r.cpcodesizeen,
                                            cpcodeXp: r.cpcodexp,
                                            cpcodeFl: r.cpcodefl,
                                            outHs:r.cpcode02
                                        };
                                        grid.addRow(newRow, index);
                                    }

                                }
                                grid.clearSelect();
                        }

                    }
                }
            });
        }
    }

    /**
     汇总方法
     */
    function onDrawSummaryCell(e) {
        if (e.field == "outCode") {
            e.cellHtml = "<span style='color:Brown;'> 合计:</span>";
        }
        if (e.field == "outSl") {
            e.cellHtml = "<span style='color:Brown;float:right;'>" + parseFloat(e.value).toFixed(4) + "</span>";
        }
        if (e.field == "outJs") {
            e.cellHtml = "<span style='color:Brown;float:right;'>" + parseFloat(e.value).toFixed(2) + "</span>";
        }
    }
	function onCellValidation(e) {
		if (e.field == "outCode") {
			if (isNull(e.value)) {
				e.isValid = false;
				e.errorText = "编码不能为空！";
				grid.beginEditCell(e.record, e.field);
				return hmq.tipDanger(e.errorText);
			}
		}
        if (e.field == "outContract") {
            if (isNull(e.value)) {
                e.isValid = false;
                e.errorText = "订单号不能为空！";
                grid.beginEditCell(e.record, e.field);
                return hmq.tipDanger(e.errorText);
            }
        }
		if (e.field == "outSl") {
			if(isNaN(e.value)){
				e.isValid = false;
				e.errorText = "数量必须为数字";
				grid.beginEditCell(e.record, e.field);
				return hmq.tipDanger(e.errorText);
			}
			if (isNull(e.value) || e.value < 0) {
				e.isValid = false;
				e.errorText = "数量不能小于0";
				grid.beginEditCell(e.record, e.field);
				return hmq.tipDanger(e.errorText);
			}
		}
		
	}
    function OnCellBeginEdit(e) {
        var record = e.record;
        var field = e.field;
    }

    /**

     */
    function OnCellCommitEdit(e) {
        var editor = e.editor;
        editor.validate();
        if (editor.isValid() == false) {
            hmq.tipDanger(editor.getErrorText());
            e.cancel = true;
        }
        var grid = e.sender;
        var record = e.record;
        var field = e.field, value = e.value;
    }

    function getMiniValue(key, defaultValue) {
        if (key == null || key == undefined || key == "") {
            return defaultValue;
        }
        return key;
    }

    function getMiniDate(key) {
        return mini.formatDate(new Date(key), "yyyy-MM-dd");
    }

    // 判读是否为空
    function isNull(key) {
        if (key == null || key == undefined || key === "") {
            return true;
        }
        return false;
    }

    /**
     附加行
     */
    function appendRow(rows) {
        var retRows = [];
        for (var i = 0; i < rows.length; i++) {
            if (!isEixsts(rows[i])) {
                retRows.push(rows[i]);
            } else {
                hmq.tipDanger("数据已添加");
            }
        }
        return retRows;
    }

    /**
     判断是否存在
     */
    function isEixsts(data) {
        var row = grid.findRow(function (row) {
            if (row.outCode == data.cpcodeid)
                return true;
        });
        if (row != null) {
            return true;
        }
        return false;
    }


</script>
</html>