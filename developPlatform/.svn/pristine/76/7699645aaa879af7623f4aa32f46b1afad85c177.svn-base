<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" xmlns:tz="http://www.w3.org/1999/xhtml">
<head>
    <th:block th:replace="~{model/Head :: head(~{::title},_,_,${'miniui,common'})}">
        <title>收货通知【新增】</title>
    </th:block>
</head>
<body>
<div class="mini-fit">
    <form id="form1">
        <input id="action" name="action" class="mini-hidden"/>
        <input id="shType" name="shType" class="mini-hidden"/>
        <input id="paramMod" name="paramMod" class="mini-hidden"/>
        <table class="hmq-modify-table">
            <tr>
                <td align="right" width="80px">收货单号：</td>
                <td>
                    <input class="mini-textbox" readonly id="shNote" name="shNote" emptyText="自动生成"/>
                </td>
                <td align="right" width="80px">日 期：</td>
                <td>
                    <input class="mini-datepicker" required id="shRq" name="shRq"/>
                </td>
                <td align="right" width="80px">供货单位：</td>
                <td>
                    <input required id="shCustomer" name="shCustomer" emptyText="请选择..."
                           allowInput="false" class="mini-buttonedit" onbuttonclick="onSupplierClick"/>
                </td>
                <td align="right" width="80px">库房：</td>
                <td>
                    <input class="mini-combobox" required id="shLib" name="shLib"/>
                </td>
            </tr>
            <tr>
                <td align="right" width="80px">币 种：</td>
                <td>
                    <input id="shBz" class="mini-combobox" required name="shBz" url="/cg/yw/purchaseFile/purchaseContract/getHtBz"/>
                </td>
                <td align="right" width="80px">税 率：</td>
                <td>
                    <input id="shTax" class="mini-combobox" required name="shTax" url="/cg/yw/purchaseFile/purchaseContract/getHtTax"/>
                </td>
            </tr>
        </table>
    </form>

    <div tz:datagrid="datagrid" id="button-grid" idField="htId" sortField="htId" sortOrder="asc" style="width:100%;height:450px;"
         url="/cg/yw/purchaseFile/purchaseReceiptNotice/getSrchBottomList"
         allowCellEdit="true" allowCellSelect="true" multiSelect="true" editNextOnEnterKey="true" editNextRowCell="true" allowMoveColumn="true"
         showPager="false" oncellvalidation="onCellValidation" OnCellCommitEdit="OnCellCommitEdit" allowCellValid="true" showColumnsMenu="true"
         showSummaryRow="true" OnCellBeginEdit="OnCellBeginEdit" ondrawsummarycell="onDrawSummaryCell" sortMode="client">
        <div property="columns">
            <div tz:datagrid="checkcolumn" width="35"></div>
            <div tz:datagrid="column" field="id" width="130" align="center" allowSort="true" headerAlign="center" visible="false">id
            </div>
            <div tz:datagrid="column" name="shContract" field="shContract" align="center" width="128">合同编号
                <input id="shContract" property="editor" class="mini-buttonedit" onbuttonclick="onButtonEdit" allowInput="false"/>
            </div>
            <div tz:datagrid="column" field="shCode" align="center" width="128">编码</div>
            <div tz:datagrid="column" name="cpcodeName" field="cpcodeName" displayField="cpcodeName" align="left" width="120">名称</div>
            <div tz:datagrid="column" name="cpcodeSize" field="cpcodeSize" displayField="cpcodeSizeName" align="left" width="120">规格</div>
            <div tz:datagrid="column" name="cpcodeSizeEn" field="cpcodeSizeEn" displayField="cpcodeSizeEnName" width="100" align="center">品牌</div>
            <div tz:datagrid="column" field="rksl" width="80" align="right" numberFormat="#,0.0000" summaryType="sum" visible="false">可收货数量</div>
            <div tz:datagrid="column" field="shSl" width="80" align="right" numberFormat="#,0.0000" summaryType="sum">数量
                <input property="editor" class="mini-textbox"/>
            </div>
            <div tz:datagrid="column" field="shPrice" align="right" width="80" numberFormat="#,0.0000">单价</div>
            <div tz:datagrid="column" field="shJe" width="90" align="right" numberFormat="#,0.00" summaryType="sum">金额</div>
            <div tz:datagrid="column" field="shHs" width="80" align="center">核算</div>
            <div tz:datagrid="column" field="cpcodeBz" align="left" width="60">单位</div>
        </div>
    </div>
</div>
<div class="mini-toolbar hmq-toolbar">
    <a class="mini-button" onclick="addRow" iconCls="icon-add" id="addBtn">增行</a>
    <a class="mini-button" onclick="delRow" iconCls="icon-remove" id="delBtn">删行</a>
    <a class="mini-button" onclick="delAll" iconCls="icon-remove" id="delAllBtn">删单</a>
    <a class="mini-button" onclick="SaveData" iconCls="icon-save" id="saveBtn">保存</a>
    <a class="mini-button" onclick="CloseWindow" iconCls="icon-cancel">关闭</a>
</div>
</body>
<script type="text/javascript">
    mini.parse();
    var form = new mini.Form('form1');
    var button_grid = mini.get('button-grid');

    mini.get("shBz").select(0);
    mini.get("shTax").select(0);

    /**
     新增行
     */
    function addRow() {
        var index = button_grid.getData().length;
        var inCustomer = mini.get("shCustomer").getValue();
        if (isNull(inCustomer)) {
            hmq.tipDanger("请先选择供货单位！");
            return false;
        }
        var newRow = {
            name: "",

        };
        button_grid.addRow(newRow, index + 1);
        setIdDisable("shCustomer");
    }

    /**
     删除行
     */
    function delRow() {
        var rows = button_grid.getSelecteds();
        if (rows.length > 0) {
            button_grid.removeRows(rows, true);
            if (button_grid.getData() == "") {
                setIdEnable("shCustomer");
            }
        } else {
            hmq.tipDanger('请选择需要删除的行！');
        }
    }

    /**
     删除整单
     */
    function delAll() {
        var note = mini.get("shNote").getValue();
        var rows = button_grid.getData();
        if (note.length > 0) {
            mini.confirm("确定删除整单吗？", "提示信息", function (returndata) {
                if (returndata == "ok") {
                    if (rows.length > 0) {
                        button_grid.removeRows(rows, true);
                    }
                    mini.get("delAllBtn").disable();
                    $['delete']("delete/{0}".format(note), function (res) {
                        if (200 === res.code) {
                            hmq.tipSuccess(res.msg || '删除成功', {
                                exec: function () {
                                    CloseWindow('refresh');
                                }
                            });
                        } else {
                            hmq.tipDanger(res.msg || '删除失败');
                        }
                    });
                }
            });
        } else {
            if (rows.length > 0) {
                button_grid.removeRows(rows, true);
                if (button_grid.getData() == "") {
                    setIdEnable("shCustomer");
                }
            }
        }
    }

    /**
     保存
     */
    function SaveData() {
        if (form.validate() && form.isValid()) {
            button_grid.validate();
            if (button_grid.isValid() == false) {
                var error = button_grid.getCellErrors()[0];
                button_grid.beginEditCell(error.record, error.column);
                return;
            }
            var buttons = button_grid.getChanges();
            if (buttons == "") {
                buttons = button_grid.getData();
            }
            //判断包转号是否重复
            for (var i = 0; i < buttons.length; i++) {
                var row = buttons[i];
                if (checkExists(row)) {
                    return hmq.tipDanger("第" + (i + 1) + "行包装号重复，不能保存！");
                }
                if (!isNull(row.shContract)) {
                    if (parseFloat(row.shSl) > parseFloat(row.rksl)) {
                        return hmq.tipDanger('编码：“' + row.inCode + '”的收货数量不能超过超过订单数量，当前还能收货的数量为：' + parseFloat(row.rksl).toFixed(4));
                    }
                }
            }
            //var deletedList = button_grid.getChanges('removed',false);
            $(buttons).each(function (index) {
                buttons[index].rightOrd = index;
                buttons[index]._state = buttons[index]._state || 'modified';
            });
            var method = 'add' == $('[name=action]').val() ? 'post' : 'put';
            $[method]("add.html", JSON.stringify({
                eCkRe: form.getData(true),
                eCkReMx: buttons
            }), function (res) {
                if (200 === res.code) {
                    hmq.tipSuccess(res.msg || '保存成功', {
                        exec: function () {
                            CloseWindow('refresh');
                        }
                    });
                } else {
                    hmq.tipDanger(res.msg || '保存失败');
                }
            }, null, {
                contentType: 'application/json'
            });
        }
    }


    function checkExists(row) {
        var isflag = false;
        var buttons = button_grid.getData();
        for (var i = 0; i < buttons.length; i++) {
            var indexrow = buttons[i];
            var inPack = indexrow.inPack;
            if (!isNull(inPack)) {
                if (indexrow.id != row.id) {
                    if (indexrow.inPack == row.inPack) {
                        isflag = true;
                        break;
                    }
                }
            }
        }
        return isflag;
    }

    /**
     回调函数
     */
    function SetData(options) {
        var formData = options.data.formData;
        var row = options.data.row;
        setIdDisable("shType");

        //动态列转换
        hmq.business.dynamicProductParams(formData.shType, {
            miniDataGrid: button_grid,
            miniForm: form,
            success: function (map, res) {
            },
            error: function (res) {
                hmq.tipDanger(res.msg || '动态数据列加载失败,请检查配置!');
            }
        });

        mini.get("shLib").setUrl("/system/parameter/getParamsSelectListByParentId/仓库/{0}".format(formData.shType));
        mini.get("shLib").select(0);
        if ('add' == options.action) {
            if ("true" == formData.orient) {
                mini.get("shType").setValue(formData.shType);
                mini.get("paramMod").setValue(formData.paramMod);
            }
            mini.get("shRq").setValue(new Date());
            button_grid.clearData();
            $('[name=action]').val(options.action);
        } else if ('edit' == options.action) {
            $.get("getById/{0}".format(row.shNote), function (res) {
                if (200 === res.code) {
                    form.setData(res.data, true);
                    mini.get("shType").setValue(formData.shType);
                    mini.get("paramMod").setValue(formData.paramMod);
                    setIdDisable("shCustomer");
                    var data = mini.decode(res.data);
                    mini.get("shCustomer").setText(data.customername);
                    button_grid.load({
                        params: JSON.stringify({shNote: form.getField('shNote').getValue()})
                    });
                }
            });
        }
    }


    /**
     * @Author: gxl
     * @description: 供货单位选择页面
     */
    function onSupplierClick(e) {
        var btnEdit = e.sender;
        return miniopen({
            targetWindow: window.top,
            url: "/cg/yw/purchaseFile/purchaseContract/supplierselectlist.html",
            title: "【供货单位】选择页面",
            width: 750,
            data: "S",
            height: 620,
            ondestroy: function (action) {
                if (action == "ok") {
                    var iframe = this.getIFrameEl();
                    var data = iframe.contentWindow.GetData();
                    btnEdit.setValue(data.customerId);
                    btnEdit.setText(data.customerExp);
                }
            }
        });
    }

    /**
     验证数量、金额不小于0
     */
    function onCellValidation(e) {

        if (e.field == "shCode") {
            if (isNull(e.value)) {
                e.isValid = false;
                e.errorText = "收货编码不能为空！";
                button_grid.beginEditCell(e.record, e.field);
                return hmq.tipDanger(e.errorText);
            }
        }

        if (e.field == "shSl") {
            if (isNaN(e.value)) {
                e.isValid = false;
                e.errorText = "数量必须为数字！";
                button_grid.beginEditCell(e.record, e.field);
                return hmq.tipDanger(e.errorText);
            }

            if (isNull(e.value) || e.value <= 0) {
                e.isValid = false;
                e.errorText = "数量不能小于0！";
                button_grid.beginEditCell(e.record, e.field);
                return hmq.tipDanger(e.errorText);
            }
        }


    }


    /**
     汇总方法
     */
    function onDrawSummaryCell(e) {
        if (e.field == "shContract") {
            var s = "<span style='color:Brown;'>";
            s += "合计:</span>";
            e.cellHtml = s;
        }
        if (e.field == "shSl") {
            e.cellHtml = "<span style='color:Brown;float:right;'>" + parseFloat(e.value).toFixed(4) + "</span>";
        }
    }

    function OnCellBeginEdit(e) {
        var record = e.record;
        var field = e.field;

    }

    /**
     数量和单价联动自动生成金额
     */
    function OnCellCommitEdit(e) {
        var editor = e.editor;
        editor.validate();
        if (editor.isValid() == false) {
            hmq.tipDanger(editor.getErrorText());
            e.cancel = true;
        }
        var button_grid = e.sender;
        var record = e.record;
        var field = e.field, value = e.value;
        if (field == "shSl" || field == "shPrice" || field == "shje" || field == "shHs") {
            var price = getMiniValue(record.inPrice, 0);
            var sl = getMiniValue(record.inSl, 0);
            var js = getMiniValue(record.inJs, 0);
            if (field == "inSl") {
                if (record.inHs == "数量") {
                    button_grid.updateRow(record, {
                        inje: value * price
                    });
                }
            }
            if (field == "inPrice") {
                if (record.inHs == "数量") {
                    button_grid.updateRow(record, {
                        inje: value * sl
                    });
                } else {
                    button_grid.updateRow(record, {
                        inje: 0
                    });
                }
            }
            if (field == "shje") {
                if (record.inHs == "数量") {
                    button_grid.updateRow(record, {
                        inPrice: value / sl
                    });
                } else {
                    button_grid.updateRow(record, {
                        inPrice: 0
                    });
                }
            }

            if (field == "inHs") {
                if (value == "数量") {
                    button_grid.updateRow(record, {
                        inje: price * sl
                    });
                } else if (value == "件数") {
                    button_grid.updateRow(record, {
                        inje: price * js
                    });
                } else {
                    button_grid.updateRow(record, {
                        inje: 0
                    });
                }
            }
        }


    }

    function onButtonEdit(e) {
        var btnEdit = this;
        var shType = mini.get("shType").getValue();
        if (e.source.id == "shContract") {
            if (mini.get("shCustomer").getValue() == "") {
                hmq.tipDanger("请选择供应商！");
                return;
            }
            var parms = {
                inSupplier: mini.get("shCustomer").getValue(),
                inSuppliername: mini.get("shCustomer").getText(),
                inBz: mini.get("shBz").getValue(),
                inTax: mini.get("shTax").getValue(),
                cgStype: shType

            };
            return miniopen({
                targetWindow: window.top,
                url: "/cg/yw/purchaseFile/purchaseReceipt/cgddselectlist.html",
                title: "采购订购选择列表",
                width: 1300,
                height: 620,
                onload: function () {
                    var iframe = this.getIFrameEl();
                    var data = {
                        action: "search",
                        sid: parms

                    };
                    iframe.contentWindow.SetData(data);
                },
                ondestroy: function (action) {
                    if (action == "ok") {
                        var iframe = this.getIFrameEl();
                        var rows = iframe.contentWindow.GetMutiData();
                        rows = mini.clone(rows); //必须
                        var dataRows = appendRow(rows);
                        if (dataRows.length > 0) {
                            btnEdit.setValue(dataRows[0].htno);
                            btnEdit.setText(dataRows[0].htno);
                            var row = button_grid.getSelected();
                            button_grid.updateRow(row, {
                                id: dataRows[0].id,
                                shContract: dataRows[0].htno,
                                shCode: dataRows[0].htcode,
                                cpcodeName: dataRows[0].cpcodename,
                                cpcodeSize: dataRows[0].cpcodesize,
                                cpcodeBz: dataRows[0].cpcodebz,
                                cpcodeSizeEn: dataRows[0].cpcodesizeen,
                                shSl: dataRows[0].wssl,
                                rksl: dataRows[0].wssl,
                                shPrice: dataRows[0].htprice,
                                shJe: dataRows[0].htje,
                                shHs: dataRows[0].hths
                            });

                            if (dataRows.length > 1) {
                                for (var i = 1; i < dataRows.length; i++) {
                                    var r = dataRows[i];
                                    var newRow = {
                                        id: r.id,
                                        shContract: r.htno,
                                        shCode: r.htcode,
                                        cpcodeName: r.cpcodename,
                                        cpcodeSize: r.cpcodesize,
                                        cpcodeBz: r.cpcodebz,
                                        cpcodeSizeEn: r.cpcodesizeen,
                                        shSl: r.wssl,
                                        rksl: r.wssl,
                                        shPrice: r.htprice,
                                        shJe: r.htje,
                                        shHs: r.hths


                                    };
                                    button_grid.addRow(newRow, 0);
                                }

                            }
                            button_grid.clearSelect();
                        }
                    }
                }
            });
        }
    }


    /**
     附件行
     */
    function appendRow(rows) {
        var retRows = [];
        for (var i = 0; i < rows.length; i++) {
            if (!isEixsts(rows[i])) {
                retRows.push(rows[i]);
            } else {
                hmq.tipDanger("数据已添加");
            }
        }
        return retRows;
    }

    /**
     判断是否存在
     */
    function isEixsts(data) {
        var row = button_grid.findRow(function (row) {
            if (row.id == data.id)
                return true;
        });
        if (row != null) {
            return true;
        }
        return false;
    }

    /**
     附件行
     */
    function appendRow2(rows) {
        var retRows = [];
        for (var i = 0; i < rows.length; i++) {
            if (!isEixsts2(rows[i])) {
                retRows.push(rows[i]);
            } else {
                hmq.tipDanger("数据已添加");
            }
        }
        return retRows;
    }

    /**
     判断是否存在
     */
    function isEixsts2(data) {
        var row = button_grid.findRow(function (row) {
            if (row.inKfcode == data.cpcodeid)
                return true;
        });
        if (row != null) {
            return true;
        }
        return false;
    }

</script>
</html>