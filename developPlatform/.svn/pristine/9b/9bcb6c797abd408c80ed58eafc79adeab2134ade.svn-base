package com.tengzhi.business.production.subcontract.wwfl.service.impl;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.tengzhi.base.jpa.dto.BaseDto;
import com.tengzhi.base.jpa.extension.SqlJoint;
import com.tengzhi.base.jpa.page.BasePage;
import com.tengzhi.base.jpa.result.Result;
import com.tengzhi.base.security.common.model.SessionUser;
import com.tengzhi.business.base.publicinterfac.IUserConstants;
import com.tengzhi.business.ck.yw.ckck.model.ECkOut;
import com.tengzhi.business.mesGz.gzck.vo.ECKOutVo;
import com.tengzhi.business.mesGz.gzck.vo.EckOut;
import com.tengzhi.business.mesGz.gzck.vo.EckOut.ECkOut_PK;
import com.tengzhi.business.production.subcontract.wwfl.dao.WwflDao;
import com.tengzhi.business.production.subcontract.wwfl.service.WwflService;
import com.tengzhi.business.system.core.service.SysGenNoteService;
import com.tengzhi.business.system.params.model.SysParams;
import com.tengzhi.business.system.params.service.SysParamService;

@Service
@Transactional
public class WwflServiceImpl implements WwflService {

	@Autowired
	private WwflDao wwflDao;
	
	@Autowired
	private SysGenNoteService sysGenNoteService;
	
	@Autowired
	private SysParamService sysParamService;

	@Override
	public BasePage<Map<String, Object>> getTopList(BaseDto dto) throws IOException {
		Map<String, String> map = dto.getParamsMap();
		SessionUser sessionUser = SessionUser.SessionUser();
		String where = " and fh_act in (select param_id from sys_param where param_name ='" + IUserConstants.wwrk
				+ "' )    ";
		where += SqlJoint.whereSuffixAnd((c) -> {
			c.eq("data_corp", sessionUser.getCorpId(), true);

			c.ge("fh_rq", map.get("srchRq1"));
			c.le("fh_rq", map.get("srchRq2"));

			c.eq("fh_type", map.get("codeType"));
			c.eq("fh_flag", map.get("fhFlag"));
			c.contains("fh_note", map.get("fhNote"));
			c.contains("fh_customer", map.get("fhCustomer"));
		});

		String sql = " select fh_rq,fh_note,fh_customer,fh_act,fh_sl,fh_type,fh_flag,fh_code,"
				+ " coalesce((select sum(out_sl) from e_ck_out where data_corp='" + sessionUser.getCorpId()
				+ "' and out_note= e_ck_delivery_notice.fh_note),0.000) sjfh, "
				+ "  f_getname ( 'GETDWNAME', fh_customer, '', data_corp )   fh_customer_name,f_get_param_name('仓库收发',fh_act) fh_act_name "
				+ " from e_ck_delivery_notice where 1=1  " + where;
		return wwflDao.QueryMapPageList(dto, sql + " order by fh_rq desc ", true);
	}

	@Override
	public BasePage<Map<String, Object>> getBottomLeftList(BaseDto dto) throws IOException {
		Map<String, String> map = dto.getParamsMap();
		SessionUser sessionUser = SessionUser.SessionUser();
		String sql = " select fh_type,fh_lib,f_getparamname('GETBCPCODENAME',cpcode_name,'','技术',cpcode_type,'') cpcode_name,cpcode_size ,fh_sl,fh_ceiling,fh_lower,fh_contract,fh_code, "
				+ " coalesce((select sum(out_sl) from e_ck_out where data_corp='" + sessionUser.getCorpId()
				+ "' and  out_code= notice.fh_code and out_note= notice.fh_note),0.000) sjfh,  "
				+ " f_getname('GETGXANDLIBNAME',fh_lib,fh_type,'') fh_lib_name,fh_ph,fh_remarks "
				+ " from e_ck_delivery_notice notice "
				+ " left join e_js_cpcode cpcode on notice.fh_code = cpcode.cpcode_id where  notice.data_corp='"
				+ sessionUser.getCorpId() + "' ";
		sql += SqlJoint.start().eq("fh_type", map.get("fhType"), true).eq("fh_note", map.get("fhNote"), true)
				.getAndSuffixSqlStr();

		return wwflDao.QueryMapPageList(dto, sql, true);
	}


	@Override
	public BasePage<Map<String, Object>> getDemandNotifyListById(String fhNote, String fhCode) {
		SessionUser sessionUser = SessionUser.SessionUser();
		String sql = " select notice.fh_note, notice.fh_customer, notice.fh_lib, notice.fh_contract, notice.fh_code, notice.fh_sl, notice.fh_ceiling, notice.fh_lower, to_char(notice.fh_rq,'yyyy-MM-dd') fh_rq,notice.fh_act,\n"
				+ "notice.fh_type, notice.fh_flag, notice.fh_tax, notice.fh_bz, notice.fh_hs, notice.fh_price, notice.fh_remarks, notice.ht_mo, notice.fh_ph, "
				+ " cpcode.cpcode_name as fh_code_name, cpcode.cpcode_size, "
				+ " f_getparamname('GETBYCPCODEFL', cpcode.cpcode_fl, '', '技术', cpcode.cpcode_type, '') cpcode_fl, "
				+ " f_getname ( 'GETGXANDLIBNAME', notice.fh_lib, notice.fh_type, '' ) fh_lib_name, "
				+ " f_getparamname ( 'GETBYPARENTID', cpcode.cpcode_bz, '计量单位', '技术', '', '' ) cpcode_bz "
				+ " from e_ck_delivery_notice notice "
				+ " left join e_js_cpcode cpcode on notice.fh_code = cpcode.cpcode_id " + " where 1=1 ";
		sql += SqlJoint.start().eq("notice.data_corp", sessionUser.getCorpId()).eq("fh_note", fhNote)
				.eq("fh_code", fhCode).getAndSuffixSqlStr();
		BaseDto dto = new BaseDto();
		dto.setPageIndex(0);
		dto.setPageSize(999999);
		return wwflDao.QueryMapPageList(dto, sql, true);
	}

	@Override
	public BasePage<Map<String, Object>> getManualNoticeListById(String fhNote, String fhCode) {
		SessionUser sessionUser = SessionUser.SessionUser();
		String sql = " select notice.fh_note, notice.fh_customer, notice.fh_lib, notice.fh_contract, notice.fh_code, notice.fh_sl, notice.fh_ceiling, notice.fh_lower, to_char(notice.fh_rq,'yyyy-MM-dd') fh_rq,notice.fh_act,\n"
				+ "notice.fh_type, notice.fh_flag, notice.fh_tax, notice.fh_bz, notice.fh_hs, notice.fh_price, notice.fh_remarks, notice.ht_mo, notice.fh_ph, "
				+ " cpcode.cpcode_name as fh_code_name, cpcode.cpcode_size, "
				+ " f_getname ( 'GETGXANDLIBNAME', notice.fh_lib, notice.fh_type, '' ) fh_lib_name, "
				+ " f_getparamname('GETBYCPCODEFL', cpcode.cpcode_fl, '', '技术', cpcode.cpcode_type, '') cpcode_fl, "
				+ " f_getparamname ( 'GETBYPARENTID', cpcode.cpcode_bz, '计量单位', '技术', '', '' ) cpcode_bz, "
				+ " (select sum(sl) from v_ck_mx ck_mx where ck_mx.corpid = notice.data_corp and ck_mx.lib = notice.fh_lib and ck_mx.code = notice.fh_code   and ck_mx.dtype = notice.fh_type) sl "
				+ " from e_ck_delivery_notice notice "
				+ " left join e_js_cpcode cpcode on notice.fh_code = cpcode.cpcode_id " + " where 1=1 ";
		sql += SqlJoint.start().eq("notice.data_corp", sessionUser.getCorpId()).eq("fh_note", fhNote)
				.eq("fh_code", fhCode).getAndSuffixSqlStr();
		BaseDto dto = new BaseDto();
		dto.setPageIndex(0);
		dto.setPageSize(999999);
		return wwflDao.QueryMapPageList(dto, sql, true);
	}

	@Override
	public Result update(ECKOutVo eCkOutVo) throws Exception {
		BigDecimal initBigDecimal=new BigDecimal("0");
		List<EckOut> addECkOut = new ArrayList<EckOut>();
		List<EckOut> modifyedECkOuts = new ArrayList<EckOut>();
		List<EckOut> deletedECkOuts = new ArrayList<EckOut>();
		
		String parameterId=sysParamService.getParamId(eCkOutVo.geteCkOut().getOutType(),IUserConstants.wwrk);
		SysParams  sysParams=sysParamService.findByParameterId(parameterId, "仓库收发");
		SessionUser securityUser=SessionUser.SessionUser();
		eCkOutVo.geteCkOut().setDataMan(securityUser.getUserId());
		eCkOutVo.geteCkOut().setDataDate(new Date());
		eCkOutVo.geteCkOut().setDataCorp(securityUser.getCorpId());
		eCkOutVo.geteCkOut().setOutFlag("登记");
		eCkOutVo.geteCkOut().setOutAct(parameterId);
			//小包装
			for (int i = 0; i < eCkOutVo.getAddedList().size(); i++) {
				EckOut model = eCkOutVo.getAddedList().get(i);
				model.setOutNote(eCkOutVo.geteCkOut().getOutNote());
				model.setOutRq(eCkOutVo.geteCkOut().getOutRq());
				model.setOutAct(eCkOutVo.geteCkOut().getOutAct());
				model.setOutCustomer(eCkOutVo.geteCkOut().getOutCustomer());
				model.setOutFlag(eCkOutVo.geteCkOut().getOutFlag());
				model.setDataMan(securityUser.getUserId());
				model.setDataDate(eCkOutVo.geteCkOut().getDataDate());
				model.setDataCorp(eCkOutVo.geteCkOut().getDataCorp());
				model.setOutKfcode(model.getOutCode());
				model.setOutLib(eCkOutVo.geteCkOut().getOutLib());
				//数量，重量，件数*paramvalue
				model.setOutJs(model.getOutJs()== null ? initBigDecimal :model.getOutJs().multiply(sysParams.getParamValue()));
				model.setOutSl(model.getOutSl()== null ? initBigDecimal :model.getOutSl().multiply(sysParams.getParamValue()));
				model.setOutZl(model.getOutZl() == null ? initBigDecimal :model.getOutZl().multiply(sysParams.getParamValue()));
				// 默认大包装号和包装号相等，后续可能需要根据产品规则生成
				model.setOutBpack(model.getOutPack());
				addECkOut.add(model);
			}
			// 修改
			if (!eCkOutVo.getModifyedList().isEmpty()) {
				for (int i = 0; i < eCkOutVo.getModifyedList().size(); i++) {
					EckOut model = eCkOutVo.getModifyedList().get(i);
					model.setOutNote(eCkOutVo.geteCkOut().getOutNote());
					model.setOutRq(eCkOutVo.geteCkOut().getOutRq());
					model.setOutAct(eCkOutVo.geteCkOut().getOutAct());
					model.setOutCustomer(eCkOutVo.geteCkOut().getOutCustomer());
					model.setOutFlag(eCkOutVo.geteCkOut().getOutFlag());
					model.setDataMan(securityUser.getUserId());
					model.setDataDate(eCkOutVo.geteCkOut().getDataDate());
					model.setDataCorp(eCkOutVo.geteCkOut().getDataCorp());
					model.setOutKfcode(model.getOutCode());
					model.setOutLib(eCkOutVo.geteCkOut().getOutLib());
					//数量，重量，件数*paramvalue
					model.setOutJs(model.getOutJs()== null ? initBigDecimal :model.getOutJs().multiply(sysParams.getParamValue()));
					model.setOutSl(model.getOutSl()== null ? initBigDecimal :model.getOutSl().multiply(sysParams.getParamValue()));
					model.setOutZl(model.getOutZl() == null ? initBigDecimal :model.getOutZl().multiply(sysParams.getParamValue()));
					// 判断保存的包装号有没有重复
					/*
					 * if (checkExists(model, eCkOutVo.getModifyedList())) { return Result.error("第"
					 * + (i + 1) + "行包装号重复，不能保存！"); }
					 */
	
					modifyedECkOuts.add(model);
				}
			}
		// 业务逻辑判断end
		// 开始保存到数据库
		if (!addECkOut.isEmpty()) {
			addECkOut.forEach(model -> {
				wwflDao.save(model);
			});
		}

		if (!modifyedECkOuts.isEmpty()) {
			System.out.println(1111);
			modifyedECkOuts.forEach(model -> {
				wwflDao.dynamicSave(model, wwflDao.findById(new ECkOut_PK(eCkOutVo.geteCkOut().getOutNote(), model.getOutPack())).orElse(null));
			});
		}

		if (!eCkOutVo.getDeletedList().isEmpty()) {
			eCkOutVo.getDeletedList().forEach(model -> {
				ECkOut_PK pk = new ECkOut_PK(eCkOutVo.geteCkOut().getOutNote(), model.getOutPack());
				wwflDao.deleteById(pk);
			});
		}
		
		return Result.resultOkMsg("修改成功"); 
	}

	@Override
	public Result save(ECKOutVo eCkOutVo) throws Exception {
		List<EckOut> addECkOuts = new ArrayList<EckOut>();//添加数据
		List<EckOut> modifyedECkOuts = new ArrayList<EckOut>();
		List<EckOut> deletedECkOuts = new ArrayList<EckOut>();
		
		BigDecimal initBigDecimal=new BigDecimal("0");
		String parameterId=sysParamService.getParamId(eCkOutVo.geteCkOut().getOutType(),IUserConstants.wwrk);
		SysParams  sysParams=sysParamService.findByParameterId(parameterId, "仓库收发");
		String note = sysGenNoteService.getyyMMNote4(ECkOut.class, parameterId);
		SessionUser securityUser=SessionUser.SessionUser();
		//小包装
		eCkOutVo.geteCkOut().setOutNote(note);
		eCkOutVo.geteCkOut().setOutFlag("登记");
		eCkOutVo.geteCkOut().setDataMan(securityUser.getUserId());
		eCkOutVo.geteCkOut().setDataDate(new Date());
		eCkOutVo.geteCkOut().setDataCorp(securityUser.getCorpId());
		eCkOutVo.geteCkOut().setOutAct(parameterId);
		for (int i = 0; i < eCkOutVo.getAddedList().size(); i++) {
			EckOut model = eCkOutVo.getAddedList().get(i);
			model.setOutNote(note);
			model.setOutRq(eCkOutVo.geteCkOut().getOutRq());
			model.setOutAct(eCkOutVo.geteCkOut().getOutAct());
			model.setOutCustomer(eCkOutVo.geteCkOut().getOutCustomer());
			model.setOutFlag(eCkOutVo.geteCkOut().getOutFlag());
			model.setDataMan(securityUser.getUserId());
			model.setDataDate(eCkOutVo.geteCkOut().getDataDate());
			model.setDataCorp(eCkOutVo.geteCkOut().getDataCorp());
			model.setOutLib(eCkOutVo.geteCkOut().getOutLib());
			model.setOutKfcode(model.getOutCode());
			//数量，重量，件数*paramvalue
			model.setOutJs(model.getOutJs()== null ? initBigDecimal :model.getOutJs().multiply(sysParams.getParamValue()));
			model.setOutSl(model.getOutSl()== null ? initBigDecimal :model.getOutSl().multiply(sysParams.getParamValue()));
			model.setOutZl(model.getOutZl() == null ? initBigDecimal :model.getOutZl().multiply(sysParams.getParamValue()));
			// 默认大包装号和包装号相等，后续可能需要根据产品规则生成
			//model.setOutBpack(model.getOutPack());
			addECkOuts.add(model);
		}
		
		// 修改
		if (!eCkOutVo.getModifyedList().isEmpty()) {
			for (int i = 0; i < eCkOutVo.getModifyedList().size(); i++) {
				EckOut model = eCkOutVo.getModifyedList().get(i);
				model.setOutNote(note);
				model.setOutRq(eCkOutVo.geteCkOut().getOutRq());
				model.setOutAct(eCkOutVo.geteCkOut().getOutAct());
				model.setOutCustomer(eCkOutVo.geteCkOut().getOutCustomer());
				model.setOutFlag(eCkOutVo.geteCkOut().getOutFlag());
				model.setDataMan(securityUser.getUserId());
				model.setDataDate(eCkOutVo.geteCkOut().getDataDate());
				model.setDataCorp(eCkOutVo.geteCkOut().getDataCorp());
				model.setOutKfcode(model.getOutCode());
				model.setOutLib(eCkOutVo.geteCkOut().getOutLib());
				//数量，重量，件数*paramvalue
				model.setOutJs(model.getOutJs()== null ? initBigDecimal :model.getOutJs().multiply(sysParams.getParamValue()));
				model.setOutSl(model.getOutSl()== null ? initBigDecimal :model.getOutSl().multiply(sysParams.getParamValue()));
				model.setOutZl(model.getOutZl() == null ? initBigDecimal :model.getOutZl().multiply(sysParams.getParamValue()));
				// 判断保存的包装号有没有重复
				if (checkExists(model, eCkOutVo.getModifyedList())) {
					return Result.error("第" + (i + 1) + "行包装号重复，不能保存！");
				}
				modifyedECkOuts.add(model);
			}
		} 
		
		deletedECkOuts=eCkOutVo.getDeletedList();
			
		// 业务逻辑判断end //开始保存到数据库
		
		if (!addECkOuts.isEmpty()){
			addECkOuts.forEach(model -> {
				wwflDao.save(model);
			});
		}
		if (!modifyedECkOuts.isEmpty()) {
			modifyedECkOuts.forEach(model -> {
				wwflDao.dynamicSave(model, wwflDao.findById(new ECkOut_PK(note, model.getOutPack())).orElse(null));
			});
		}
		if (!deletedECkOuts.isEmpty()) {
			eCkOutVo.getDeletedList().forEach(model -> {
				ECkOut_PK pk = new ECkOut_PK(eCkOutVo.geteCkOut().getOutNote(), model.getOutPack());
				wwflDao.deleteById(pk);
			});
		} // end		
		
		return Result.resultOk(eCkOutVo.geteCkOut());
	}

	@Override
	public Result delete(String fhNote) throws Exception {
		wwflDao.deleteByNote(fhNote);
		return Result.resultOk();
	}

	private boolean checkExists(EckOut model, List<EckOut> eCkOuts) {
		boolean isflag = false;
		for (int i = 0; i < eCkOuts.size(); i++) {
			EckOut indexrow = eCkOuts.get(i);
			//if (!indexrow.getId().equals(model.getId())) {
				if (indexrow.getOutPack().equals(model.getOutPack())) {
					isflag = true;
					break;
				}
			//}
		}
		return isflag;
	}
}
