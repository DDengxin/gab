package com.tengzhi.business.xt.notice.service.impl;

import java.io.File;
import java.io.IOException;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.transaction.Transactional;

import com.tengzhi.base.security.common.model.SessionUser;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;

import com.tengzhi.base.jpa.dto.BaseDto;
import com.tengzhi.base.jpa.extension.Specifications;
import com.tengzhi.base.jpa.page.BasePage;
import com.tengzhi.base.security.common.model.SecurityUser;
import com.tengzhi.business.system.core.service.SysGenNoteService;
import com.tengzhi.business.system.params.dao.SysParamDao;
import com.tengzhi.business.system.params.model.SysParams;
import com.tengzhi.business.system.tools.file.FileUtil;
import com.tengzhi.business.system.upload.dao.SysUploadDao;
import com.tengzhi.business.system.upload.model.SysUpload;
import com.tengzhi.business.xt.notice.dao.NoticeDao;
import com.tengzhi.business.xt.notice.model.EXtNotice;
import com.tengzhi.business.xt.notice.service.NoticeService;

import cn.hutool.core.util.ObjectUtil;
import io.netty.util.internal.StringUtil;

@Service
@Transactional
public class NoticeServiceImpl implements NoticeService {

    @Autowired
    NoticeDao noticedao;

    @Autowired
    private SysGenNoteService sysGenNoteService;

    @Autowired
    private SysUploadDao sysUploadDao;

    @Autowired
    private Environment environment;
   @Autowired
   private  SysParamDao   sysParamDao;

    @Override
    public BasePage<Map<String, Object>> getNotice(BaseDto baseDto) throws IOException {
        Map<String, String> map = baseDto.getParamsMap();
        String where = "";
        if(ObjectUtil.isNotEmpty(map.get("srchRq1"))) {
        	where+=" and  to_char( notice_rq  , 'yyyy-MM-dd') >='"+map.get("srchRq1")+"'";
		}
		if(ObjectUtil.isNotEmpty(map.get("srchRq2"))) {
			where+=" and  to_char( notice_rq  , 'yyyy-MM-dd') <='"+map.get("srchRq2")+"'";
		}
        if (StringUtils.isNotBlank(map.get("srch_type"))) {
            where += " AND notice_type = '" + map.get("srch_type") + "'";
        }
        if (StringUtils.isNotBlank(map.get("srch_dept"))) {
            where += " AND notice_dept = '" + map.get("srch_dept") + "'";
        }
        if (StringUtils.isNotBlank(map.get("srch_title"))) {
            where += " AND notice_theme like '%" + map.get("srch_title") + "%'";
        }
        if (StringUtils.isNotBlank(map.get("srch_mode"))) {
            where += " AND notice_type in (SELECT param_id from sys_param   where   parent_id = '"+map.get("srch_mode")+"'  and  param_value1 is not null and param_value1 <> '' )";
        }
        
        
        String sql = "SELECT  notice_no \"noticeNo\", to_char(notice_rq,'yyyy-MM-dd') \"noticeRq\", notice_theme \"noticeTheme\", notice_dept \"noticeDept\", f_getname('GETDEPTNAME', notice_dept, '', data_corp) \"noticeDeptName\", notice_type \"noticeType\",f_getparamname ( 'GETBYXTYPE', notice_type,'公文参数','协同',null,'cn')  \"noticeTypeName\",notice_content \"noticeContent\", notice_flag \"noticeFlag\", notice_file \"noticeFile\", data_man \"dataMan\", f_getname('GETUSERNAME', data_man, '', data_corp) \"dataManName\", data_date \"dataDate\", data_corp \"dataCorp\", f_getname('GETCORPEXP', '', '', data_corp) \"dataCorpName\" FROM e_xt_notice e WHERE delete_logo = FALSE " + where + " ORDER BY notice_rq DESC ";
        return noticedao.QueryPageList(sql, "select count(1) from (" + sql + ") a", baseDto);
    }


    @Override
    public List<EXtNotice> getNoticeEight() {
        return noticedao.findAll(Specifications.where((c) -> {
            c.eq("noticeFlag", "核准");
            c.eq("deleteLogo", false);
            c.addOrderBy("noticeRq", Sort.Direction.DESC);
        }), PageRequest.of(0, 8)).getContent();
    }

    @Override
    public EXtNotice save(EXtNotice eXtNotice) throws Exception {
    	//根据菜单类型不同修改不同的单号前缀
       String  prefix=	NotePrefix(eXtNotice);
        eXtNotice.setNoticeNo(sysGenNoteService.getyyMMNote4(EXtNotice.class,prefix));
        //eXtNotice.setNoticeNo(sysGenNoteService.getNoteDate("",new Date(),"GW","yyMM",4));
        if (judgeUnique(eXtNotice)) {
            eXtNotice.setDeleteLogo(false);
            SessionUser securityUser=SessionUser.SessionUser();
            eXtNotice.setNoticeRq(new Date());
            eXtNotice.setNoticeFlag("登记");
            eXtNotice.setDataMan(securityUser.getUserId());
            eXtNotice.setDataCorp(securityUser.getCorpId());
            eXtNotice.setDataDate(new Date());
            return noticedao.save(eXtNotice);
        } else {
            throw new Exception("编码已存在");
        }
    }
    public String   NotePrefix(EXtNotice  model) {
    	String   entity = 	sysParamDao.getKeyParamValue1(model.getParamMod(), model.getNoticeType());
    	if(StringUtils.isEmpty(entity)) {
    		new  RuntimeException("参数值不存在");
    	}
		return entity;
		
	}
    
    
    

    @Override
    public void update(EXtNotice eXtNotice) {
        SessionUser securityUser=SessionUser.SessionUser();
        eXtNotice.setDataMan(securityUser.getUserId());
        eXtNotice.setDataCorp(securityUser.getCorpId());
        eXtNotice.setDataDate(new Date());
        noticedao.dynamicSave(eXtNotice, noticedao.findByNoticeNo(eXtNotice.getNoticeNo()));
    }

    @Override
    public boolean judgeUnique(EXtNotice eXtNotice) {
        return noticedao.findAll(Specifications.where((c) -> {
            c.eq("noticeNo", eXtNotice.getNoticeNo());
            c.eq("deleteLogo", false);
        })).size() <= 0;
    }

    @Override
    public Map<String, Object> findByNoticeNo(String noticeNo) {
        String sql = "SELECT b.* , u.nick_name FROM ( SELECT e.notice_no \"noticeNo\", e.notice_rq \"noticeRq\", e.notice_theme \"noticeTheme\",f.uuid \"uuid\",f.file_path \"filePath\",f.file_name \"fileName\", e.notice_dept \"noticeDept\", e.notice_type \"noticeType\",param_turn(e.notice_type) type_name, e.notice_content \"noticeContent\", e.notice_file \"noticeFile\", e.notice_flag \"noticeFlag\", e.data_man \"dataMan\",delete_logo, e.data_date \"dataDate\", e.data_corp \"dataCorp\", d.dept_name FROM e_xt_notice e LEFT JOIN ( SELECT dept_id, dept_name FROM sys_dept ) d ON e.notice_dept = d.dept_id  left join com_file f  on e.notice_file=f.line_primary ) b LEFT JOIN ( SELECT user_id, nick_name FROM sys_user ) u ON u.user_id = b.\"dataMan\" WHERE b.delete_logo=false and b.\"noticeNo\" = '" + noticeNo + "'";
        List<Map> eXtNotice = noticedao.QueryListMap(sql);
        Map<String, Object> map = eXtNotice.get(0);
        map.put("ip", environment.getProperty("kkfileview.ip"));
        map.put("port", environment.getProperty("kkfileview.port"));

        if (ObjectUtil.isEmpty(map.get("fileName"))) {
            map.put("winstatus", true);
            map.put("show", "当前公告没有文件");
        } else {
            String fileName = map.get("fileName").toString();
            String extName = cn.hutool.core.io.FileUtil.extName(fileName).toLowerCase();

            if (FileUtil.KKFILE_VIEW_SUFFIXS.indexOf(extName) >= 0) {
                String uploadFileAbsolutePath = FileUtil.PathJoin(FileUtil.getUploadAbsPath(), map.get("filePath").toString());
                File file = new File(uploadFileAbsolutePath);
                if (!file.exists()) {
                    map.put("winstatus", true);
                    map.put("show", "当前本地文件已丢失");
                }
            } else {
                map.put("winstatus", true);
                map.put("show", "当前系统不支持(" + extName + ")格式展示");
            }
        }
        return map;

    }


    @Override
    public boolean sure(String noticeNo) {
        EXtNotice eXtNotice = noticedao.findByNoticeNo(noticeNo);
        if ("登记".equals(eXtNotice.getNoticeFlag())) {
            eXtNotice.setNoticeFlag("确认");
            SessionUser securityUser=SessionUser.SessionUser();
            eXtNotice.setDataMan(securityUser.getUserId());
            eXtNotice.setDataCorp(securityUser.getCorpId());
            eXtNotice.setDataDate(new Date());
            update(eXtNotice);
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean cancel(String noticeNo) {
        EXtNotice eXtNotice = noticedao.findByNoticeNo(noticeNo);
        if ("确认".equals(eXtNotice.getNoticeFlag())) {
            eXtNotice.setNoticeFlag("登记");
            SessionUser securityUser=SessionUser.SessionUser();
            eXtNotice.setDataMan(securityUser.getUserId());
            eXtNotice.setDataCorp(securityUser.getCorpId());
            eXtNotice.setDataDate(new Date());
            update(eXtNotice);
            return true;
        } else {
            return false;
        }
    }

    @Override
    public void deleteByNoticeNo(String noticeNo) {
        String fileId = noticedao.getFileId(noticeNo);
        List<SysUpload> sysUploads = noticedao.getUuid(fileId);
        FileUtil util = FileUtil.getInstance();
        for (SysUpload sysUpload : sysUploads) {
            if (!StringUtil.isNullOrEmpty(sysUpload.getUuid())) {
                sysUploadDao.deleteByUuid(sysUpload.getUuid());
                util.deletefile(sysUpload.getFile_path(), false);
            }
        }
        noticedao.deleteID(noticeNo);
    }

}
