package com.tengzhi.business.personnel.personnelTraining.trainingPlan.service.impl;

import cn.hutool.core.util.ObjectUtil;
import com.tengzhi.base.jpa.dto.BaseDto;
import com.tengzhi.base.jpa.page.BasePage;
import com.tengzhi.base.jpa.result.Result;
import com.tengzhi.base.security.common.model.SessionUser;
import com.tengzhi.business.personnel.personnelTraining.trainingPlan.dao.TrainingPlanDao;
import com.tengzhi.business.personnel.personnelTraining.trainingPlan.model.EHrTrainingPlan;
import com.tengzhi.business.personnel.personnelTraining.trainingPlan.service.TrainingPlanService;
import com.tengzhi.business.system.core.service.SysGenNoteService;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

import javax.transaction.Transactional;
import java.util.Date;
import java.util.Map;

@Service
@Transactional
public class TrainingPlanServiceImpl implements TrainingPlanService {

    @Autowired
    private TrainingPlanDao trainingPlanDao;
    @Autowired
    private SysGenNoteService sysGenNoteService;

    @Override
    public BasePage<Map<String, Object>> getList(BaseDto baseDto) {

        Map<String, String> map = baseDto.getParamsMap();

        String sqlshere = " where data_corp in ('"+ SessionUser.SessionUser().getSysUser().getOrgIds().replaceAll(",", "','")+"') ";

        if (StringUtils.isNotBlank(map.get("srchRq1"))) {
            sqlshere += " and jh_time >='" + map.get("srchRq1") + "' ";
        }
        if (ObjectUtil.isNotEmpty(map.get("srchRq2"))) {
            sqlshere += " and jh_time <='" + map.get("srchRq2") + "' ";
        }
        if (StringUtils.isNotEmpty(map.get("jhFrom"))) {
            sqlshere += " and jh_from = '" + map.get("jhFrom") + "'";
        }
        if (StringUtils.isNotEmpty(map.get("jhType"))) {
            sqlshere += " and jh_type = '" + map.get("jhType") + "'";
        }
        if (StringUtils.isNotEmpty(map.get("jhNote"))) {
            sqlshere += " and jh_note = '" + map.get("jhNote") + "'";
        }
        String sql = "select jh_ny,jh_note,jh_title,f_get_param_name('培训类型',jh_type,data_corp) jh_type,f_get_param_name('培训方式',jh_from,data_corp) jh_from,jh_object,jh_time,f_getname('GETDEPTNAME',jh_dept,'',data_corp)jh_dept,jh_training_content,jh_estimated_cost,f_get_param_name('培训级别',jh_training_level,data_corp) jh_training_level," +
                "jh_course_length,jh_training_address,jh_training_order," +
                "jh_flag,f_getname('GETUSERNAME',data_man,'',data_corp)data_man,f_getname('GETCORPNAME',data_corp,'',data_corp)data_corp,data_date  from e_hr_training_plan "+sqlshere;
        return trainingPlanDao.QueryMapPageList(baseDto, sql, true);
    }

    @Override
    public EHrTrainingPlan saveData(EHrTrainingPlan eHrTrainingPlan) {
        SessionUser securityUser=SessionUser.SessionUser();
        eHrTrainingPlan.setDataDate(new Date());
        eHrTrainingPlan.setDataCorp(securityUser.getCorpId());
        eHrTrainingPlan.setDataMan(securityUser.getUsername());
        eHrTrainingPlan.setJhFlag("登记");
        eHrTrainingPlan.setJhNote(sysGenNoteService.getNote(EHrTrainingPlan.class,"JT","yyyy-mm-dd",3));
    return trainingPlanDao.save(eHrTrainingPlan);
    }


    /**
     * 获取对象数据
     * @param jhNote
     * */
    @Override
    public Map<String,Object> getByNote(String jhNote) {
        String sql = " select * from e_hr_training_plan where jh_note='"+jhNote+"' ";
        return trainingPlanDao.QueryToFirstMap(sql);
    }
    /**
     * 修改数据
     * @param eHrTrainingPlan
     * */
    @Override
    public Result updateData(EHrTrainingPlan eHrTrainingPlan) {
        trainingPlanDao.save(eHrTrainingPlan);
        return Result.resultOk();
    }
    /**
    * 删除数据
    * @param jhNote
    * */
    @Override
    public void deleteByNote(String jhNote) {

        trainingPlanDao.deleteNote(jhNote);
    }
}
