<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" xmlns:tz="http://www.w3.org/1999/xhtml">
<head>
    <th:block th:replace="~{model/Head :: head(~{::title},_,_,${'miniui,common'})}">
        <title>规格产能新增</title>
    </th:block>
</head>
<body>
<div class="mini-fit">
    <form id="form1" >
        <input id="action" name="action" class="mini-hidden"/>
        <table style="padding:5px;border-bottom:0;align-content: center">
            <label class="hmq-label" text=""/>
            <tr>
                <td align="right" width="80px" >生产车间：</td>
                <td>
                    <input id="clCj" name="clCj" class="mini-combobox" textField="param_name" valueField="param_id"
                           emptyText="请选择" required="true" width="110" url="/sc/capacity/specification/findCj"/>
                </td>
                <td align="right" width="80px" >产能类型：</td>
                <td>
                    <input id="clType" name="clType" class="mini-combobox" textField="param_name" valueField="param_id"
                           emptyText="请选择" required="true" width="110" url="/sc/capacity/specification/findCl"/>
                </td>
            </tr>

        </table>
    </form>
    <div class="mini-fit">
        <div tz:datagrid="datagrid" id="button-grid" idField="code" style="width:100%;height:100%" url="/sc/capacity/specification/findAll"
             allowCellEdit="true" allowCellSelect="true" multiSelect="true" editNextOnEnterKey="true" editNextRowCell="true" allowMoveColumn="true"
             showPager="false" oncellvalidation="onCellValidation" OnCellCommitEdit="OnCellCommitEdit" allowCellValid="true" showColumnsMenu="true"
             showSummaryRow="true" sortMode="client">
            <div property="columns">
                <div tz:datagrid="checkcolumn" width="35"></div>
                <div tz:datagrid="column" field="clCode" align="center" width="120">
                    规格范围
                    <input property="editor" class="mini-textbox"/>
                </div>
                <div tz:datagrid="column" field="ggclSize" align="left" width="120">
                    代表规格
                    <input property="editor" class="mini-textbox"/>
                </div>
                <div tz:datagrid="column"  field="sizeMin" width="120"
                     align="left">
                    最小规格
                    <input property="editor" class="mini-textbox"/>
                </div>
                <div tz:datagrid="column" field="sizeMax" width="120" align="left">
                    最大规格
                    <input property="editor" class="mini-textbox"/>
                </div>
                <div tz:datagrid="column"  field="clBcl" width="80" align="left">
                    班产能
                    <input property="editor" class="mini-textbox"/>
                </div>
                <div tz:datagrid="column" field="clRbs" width="80" align="left">
                    日班数
                    <input property="editor" class="mini-textbox"/>
                </div>
                <div tz:datagrid="column"  field="clRcl" width="80" align="left">
                    日产能
                    <input property="editor" class="mini-textbox"/>
                </div>
                <div tz:datagrid="column" field="clYts" width="80" align="left">
                    月天数
                    <input property="editor" class="mini-textbox"/>
                </div>
                <div tz:datagrid="column"  field="clYcl" width="80" align="left">
                    月产能
                    <input property="editor" class="mini-textbox"/>
                </div>
                <div tz:datagrid="column"  field="clId" name="clId" width="80" align="left" visible="false">
                </div>
               <!-- <div tz:datagrid="column" field="" width="100%"></div>-->
            </div>
        </div>
    </div>
</div>
<div class="mini-toolbar hmq-toolbar">
    <a class="mini-button" onclick="addRow" iconCls="icon-add" id="addBtn">增行</a>
    <a class="mini-button" onclick="delRow" iconCls="icon-remove" id="delBtn">删行</a>
    <a class="mini-button" onclick="SaveData" iconCls="icon-save" id="saveBtn">保存</a>
    <a class="mini-button" onclick="CloseWindow" iconCls="icon-cancel">关闭</a>
</div>
</body>
<script type="text/javascript">
    mini.parse();
    var form = new mini.Form('form1');
    var button_grid = mini.get('button-grid');
    //隐藏件数重量列
    //button_grid.hideColumn("clId");

    /**
     新增行:判断form表单是否填写并设置不可编辑
     */
    function addRow() {
        var index = button_grid.getData().length;
        var newRow = {
            name: ""
        };
        button_grid.addRow(newRow, index + 1);
    }

    /**
     删除行
     */
    function delRow() {
        var rows = button_grid.getSelecteds();
        if (rows.length > 0) {
            button_grid.removeRows(rows, true);
        } else {
            hmq.tipDanger('请选择需要删除的行！');
        }
    }


    /**
    * Description:修改保存删除操作
    * @author: huangbiao
    * @date: 2020/8/7 0007 17:37
    * @param:
    * @return:
    */
    function SaveData() {
        // console.log(button_grid.getChanges());
        if (form.validate() && form.isValid()) {
            button_grid.validate();
            if (button_grid.isValid() == false) {
                var error = button_grid.getCellErrors()[0];
                button_grid.beginEditCell(error.record, error.column);
                return;
            }
            var buttons = button_grid.getChanges();
            if (buttons == "") {
                buttons = button_grid.getData();
            }
            $(buttons).each(function (index) {
                buttons[index].rightOrd = index;
                buttons[index]._state = buttons[index]._state || 'modified';
            });
            var method = 'add' == $('[name=action]').val() ? 'post' : 'put';
            $[method]("saveUpdateDelete", JSON.stringify({
                headdata: form.getData(true),
                entitydata: buttons

            }), function (res) {
                if (200 === res.code) {
                    hmq.tipSuccess(res.msg || '保存成功', {
                        exec: function () {
                            CloseWindow('refresh');
                        }
                    });
                } else {
                    hmq.tipDanger(res.msg || '保存失败');
                }
            }, null, {
                contentType: 'application/json'
            });
        }
    }



    function SetData(options) {
            //普通口径
        mini.get("clType").setEnabled(false);
            if ('add' == options.action) {
                mini.get("clType").setValue(options.data.cntype);
                $('[name=action]').val(options.action);
            }  else if ('edit' == options.action) {
                //发送请求：参数为sid，获取选中行的数据并通过setData放进表单
                $.get("/sc/capacity/specification/findByClId/{0}".format(options.data.row.clId), function (res) {
                    if (200 === res.code) {
                        form.setData(res.data);//将数据放进form表单内，包含note
                        button_grid.load({
                            params: JSON.stringify({clId: res.data.clId})//将表单note参数放进请求
                        });
                    }
                });
            }
    }

    /**
     验证数量、金额不小于0
     */
    function onCellValidation(e) {

        if (e.field == "clCode") {
            if (isNull(e.value)) {
                e.isValid = false;
                e.errorText = "规格范围不能为空！";
                button_grid.beginEditCell(e.record, e.field);
                return hmq.tipDanger(e.errorText);
            }
        }else if (e.field == "ggclSize" ) {
            if (isNaN(e.value)) {
                e.isValid = false;
                e.errorText = "代表规格必须为数字";
                button_grid.beginEditCell(e.record, e.field);
                return hmq.tipDanger(e.errorText);
            }
            if (isNull(e.value) || e.value <= 0) {
                e.isValid = false;
                e.errorText = "代表规格规格不能小于或者等于0";
                button_grid.beginEditCell(e.record, e.field);
                return hmq.tipDanger(e.errorText);
            }
        } else if (e.field == "sizeMin" ) {
            if (isNaN(e.value)) {
                e.isValid = false;
                e.errorText = "最小规格必须为数字";
                button_grid.beginEditCell(e.record, e.field);
                return hmq.tipDanger(e.errorText);
            }
            if (isNull(e.value) || e.value <= 0) {
                e.isValid = false;
                e.errorText = "最小规格不能小于或者等于0";
                button_grid.beginEditCell(e.record, e.field);
                return hmq.tipDanger(e.errorText);
            }
        } else if (e.field == "sizeMax") {
            if (isNaN(e.value)) {
                e.isValid = false;
                e.errorText = "最大规格必须为数字";
                button_grid.beginEditCell(e.record, e.field);
                return hmq.tipDanger(e.errorText);
            }

            if (isNull(e.value) || e.value <= 0) {
                e.isValid = false;
                e.errorText = "最大规格不能小于或者等于0";
                button_grid.beginEditCell(e.record, e.field);
                return hmq.tipDanger(e.errorText);
            }
        } else if (e.field == "clBcl") {
            if (isNaN(e.value)) {
                e.isValid = false;
                e.errorText = "班产能必须为数字";
                button_grid.beginEditCell(e.record, e.field);
                return hmq.tipDanger(e.errorText);
            }

            if (isNull(e.value) || e.value <= 0) {
                e.isValid = false;
                e.errorText = "班产能不能小于或者等于0";
                button_grid.beginEditCell(e.record, e.field);
                return hmq.tipDanger(e.errorText);
            }
        } else if (e.field == "clRbs") {
            if (isNaN(e.value)) {
                e.isValid = false;
                e.errorText = "日班数必须为数字";
                button_grid.beginEditCell(e.record, e.field);
                return hmq.tipDanger(e.errorText);
            }

            if (isNull(e.value) || e.value <= 0) {
                e.isValid = false;
                e.errorText = "日班数不能小于或者等于0";
                button_grid.beginEditCell(e.record, e.field);
                return hmq.tipDanger(e.errorText);
            }
        } else if (e.field =="clRcl") {
            if (isNaN(e.value)) {
                e.isValid = false;
                e.errorText = "日产能必须为数字";
                button_grid.beginEditCell(e.record, e.field);
                return hmq.tipDanger(e.errorText);
            }

            if (isNull(e.value) || e.value <= 0) {
                e.isValid = false;
                e.errorText = "日产能不能小于或者等于0";
                button_grid.beginEditCell(e.record, e.field);
                return hmq.tipDanger(e.errorText);
            }
        } else if (e.field == "clYts") {
            if (isNaN(e.value)) {
                e.isValid = false;
                e.errorText = "月天数必须为数字";
                button_grid.beginEditCell(e.record, e.field);
                return hmq.tipDanger(e.errorText);
            }

            if (isNull(e.value) || e.value <= 0) {
                e.isValid = false;
                e.errorText = "月天数不能小于或者等于0";
                button_grid.beginEditCell(e.record, e.field);
                return hmq.tipDanger(e.errorText);
            }
        } else if (e.field == "clYcl") {
            if (isNaN(e.value)) {
                e.isValid = false;
                e.errorText = "月产能必须为数字";
                button_grid.beginEditCell(e.record, e.field);
                return hmq.tipDanger(e.errorText);
            }

            if (isNull(e.value) || e.value <= 0) {
                e.isValid = false;
                e.errorText = "月产能不能小于或者等于0";
                button_grid.beginEditCell(e.record, e.field);
                return hmq.tipDanger(e.errorText);
            }
        }

    }

    /**
     * 单元格完成编辑时验证
     **/
    function OnCellCommitEdit(e) {
        var editor = e.editor;
        editor.validate();
        if (editor.isValid() == false) {
            hmq.tipDanger(editor.getErrorText());
            e.cancel = true;
        }

    }
</script>
</html>