package com.tengzhi.business.system.modification.service.Impl;

import com.alibaba.fastjson.JSON;
import com.tengzhi.base.jpa.dto.BaseDto;
import com.tengzhi.base.jpa.extension.SqlJoint;
import com.tengzhi.base.jpa.page.BasePage;
import com.tengzhi.base.jpa.result.Result;
import com.tengzhi.base.jpa.service.impl.BaseServiceImpl;
import com.tengzhi.base.security.common.model.SessionUser;
import com.tengzhi.business.cg.yw.purchaseContract.dao.ECgContractDao;
import com.tengzhi.business.cg.yw.purchaseContract.dao.ECgContractDetailedDao;
import com.tengzhi.business.cg.yw.purchaseContract.model.ECgContractDetailed;
import com.tengzhi.business.cg.yw.purchaseReceipt.dao.ECkInDao;
import com.tengzhi.business.cg.yw.purchaseReceipt.model.ECkIn;
import com.tengzhi.business.ck.yw.ckck.dao.ECkOutDao;
import com.tengzhi.business.ck.yw.ckck.model.ECkOut;
import com.tengzhi.business.sale.saleProduct.saleContract.dao.EXsContractDao;
import com.tengzhi.business.sale.saleProduct.saleContract.dao.EXsContractDetailedDao;
import com.tengzhi.business.sale.saleProduct.saleContract.model.EXsContractDetailed;
import com.tengzhi.business.system.core.service.SysGenNoteService;
import com.tengzhi.business.system.modification.dao.SysDataModificationDao;
import com.tengzhi.business.system.modification.enums.SysDataModificationTableEnum;
import com.tengzhi.business.system.modification.model.SysDataModification;
import com.tengzhi.business.system.modification.service.SysDataModificationService;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.transaction.Transactional;
import java.math.BigDecimal;
import java.util.Date;
import java.util.List;
import java.util.Map;

/**
 * @author gaodu
 */
@Service
@Transactional
public class SysDataModificationServiceImpl extends BaseServiceImpl implements SysDataModificationService {
    @Autowired
    private SysDataModificationDao sysDataModificationDao;
    @Autowired
    private SysGenNoteService sysGenNoteService;

    @Override
    public BasePage<Map<String, Object>> getList(BaseDto baseDto) {
        Map<String, String> map = baseDto.getParamsMap();
        String where = SqlJoint.whereSuffixAnd((c -> {
            c.eq("data_corp", SessionUser.SessionUser().getCorpId(), true);
            c.ge("cast(gen_time as date)", map.get("srchRq1"));
            c.le("cast(gen_time as date)", map.get("srchRq2"));
            c.contains("modify_note", map.get("modifyNote"));
            c.eq("modify_type", map.get("modifyType"));
            c.eq("target_type", map.get("targetType"));
            c.contains("target_note", map.get("targetNote"));
            c.eq("gen_user_id", map.get("genUserId"));
            c.eq("modify_flag", map.get("modifyFlag"));
        }));
        String sql = " select *,f_get_param_name('行业分类', target_type, null, null) target_type_name, "
                + " f_getname('GETUSERNAME', gen_user_id, null, data_corp) gen_user_id_name "
                + " from sys_data_modification "
                + " where 1=1 " + where;
        return sysDataModificationDao.QueryMapPageList(baseDto, sql, true);
    }

    //封装查询数据结果集方法
    private List<Map<String, Object>> SelectData(BaseDto baseDto) {
        Map<String, String> map = baseDto.getParamsMap();
        String sql = "";
        if (map.get("modifyType").equals("采购合同")) {
            sql += "SELECT\n" +
                    "\tb.*,\n" +
                    "\tf_getparamname ( 'GETBCPCODENAME', C.cpcode_name, '', '技术', C.cpcode_type, '' ) cpcode_name,\n" +
                    "\tC.cpcode_size,\n" +
                    "\tC.cpcode_size_en,\n" +
                    "\t(select param_name from sys_param where param_mod = '技术' and param_id =C.cpcode_bz) AS cpcode_bz \n" +
                    "FROM \n" +
                    "\te_cg_contract A,\n" +
                    "\te_cg_contract_detailed b,\n" +
                    "\te_js_cpcode C \n" +
                    "WHERE\n" +
                    "\tA.ht_no = b.ht_no \n" +
                    "\tAND b.ht_code = C.cpcode_id\n" +
                    "\t" + SqlJoint.whereSuffixAnd(c -> {
                c.eq("a.cg_stype", map.get("targetType"));
                c.eq("a.ht_no", map.get("targetNote"));
            });
        } else if (map.get("modifyType").equals("销售合同")) {
            sql += "SELECT\n" +
                    "\tb.*,\n" +
                    "\tf_getparamname ( 'GETBCPCODENAME', C.cpcode_name, '', '技术', C.cpcode_type, '' ) cpcode_name,\n" +
                    "\tC.cpcode_size,\n" +
                    "\tC.cpcode_size_en,\n" +
                    "\t( SELECT param_name FROM sys_param WHERE param_mod = '技术' AND param_id = C.cpcode_bz ) AS cpcode_bz \n" +
                    "FROM\n" +
                    "\te_xs_contract A,\n" +
                    "\te_xs_contract_detailed b,\n" +
                    "\te_js_cpcode C \n" +
                    "WHERE\n" +
                    "\tA.ht_no = b.ht_no\n" +
                    "\tAND b.ht_code = C.cpcode_id\n" +
                    "\t" + SqlJoint.whereSuffixAnd(c -> {
                c.eq("a.ht_stype", map.get("targetType"));
                c.eq("a.ht_no", map.get("targetNote"));
            });
        } else if (map.get("modifyType").equals("出库")) {
            sql += "SELECT \n" +
                    "\tA.*,\n" +
                    "\tf_getparamname ( 'GETBCPCODENAME', C.cpcode_name, '', '技术', C.cpcode_type, '' ) cpcode_name,\n" +
                    "\tC.cpcode_size,\n" +
                    "\tC.cpcode_size_en,\n" +
                    "\t( SELECT param_name FROM sys_param WHERE param_mod = '技术' AND param_id = C.cpcode_bz ) AS cpcode_bz \n" +
                    "FROM\n" +
                    "\te_ck_out A,\n" +
                    "\te_js_cpcode C \n" +
                    "WHERE\n" +

                    "\tA.out_code = C.cpcode_id" + SqlJoint.whereSuffixWhere(c -> {
                c.eq("out_type", map.get("targetType"));
                c.eq("out_note", map.get("targetNote"));
            });
        } else if (map.get("modifyType").equals("入库")) {
            sql += "SELECT \n" +
                    "\tA.*,\n" +
                    "\tf_getparamname ( 'GETBCPCODENAME', C.cpcode_name, '', '技术', C.cpcode_type, '' ) cpcode_name,\n" +
                    "\tC.cpcode_size,\n" +
                    "\tC.cpcode_size_en,\n" +
                    "\t( SELECT param_name FROM sys_param WHERE param_mod = '技术' AND param_id = C.cpcode_bz ) AS cpcode_bz \n" +
                    "FROM\n" +
                    "\te_ck_in A,\n" +
                    "\te_js_cpcode C \n" +
                    "WHERE\n" +
                    "\tA.in_code = C.cpcode_id" + SqlJoint.whereSuffixWhere(c -> {
                c.eq("in_type", map.get("targetType"));
                c.eq("in_note", map.get("targetNote"));
            });
        }
        return sysDataModificationDao.QueryhumpMap(sql);
    }

    @Override
    public Result modifySearch(BaseDto baseDto) {
        return Result.formPage(SelectData(baseDto), SelectData(baseDto).size());
    }

    @Autowired
    private ECkOutDao eCkOutDao;
    @Autowired
    private ECkInDao eCkInDao;
    @Autowired
    private EXsContractDetailedDao eXsContractDetailedDao;
    @Autowired
    private ECgContractDetailedDao eCgContractDetailedDao;

    @Override
    public Result save(Map<String, Object> map) {
        Map<String, String> head = (Map<String, String>) map.get("Head");
        List<Map<String, Object>> body = (List<Map<String, Object>>) map.get("Body");
        String targetBeforeData = String.valueOf(map.get("OldData"));

        SessionUser sessionUser = SessionUser.SessionUser();
        //初始化SysDataModification
        SysDataModification sysDataModification = new SysDataModification();
        sysDataModification.setModifyNote(sysGenNoteService.getyyMMNote4(SysDataModification.class, "MODIFY"));
        sysDataModification.setTargetAfterData(JSON.toJSONString(body));
        sysDataModification.setModifyType(head.get("modifyType"));
        sysDataModification.setTargetType(head.get("targetType"));
        sysDataModification.setTargetNote(head.get("targetNote"));
        sysDataModification.setTargetBeforeData(targetBeforeData);
        sysDataModification.setGenTime(new Date());
        sysDataModification.setGenUserId(sessionUser.getUserId());
        sysDataModification.setDataCorp(sessionUser.getCorpId());
        sysDataModification.setModifyFlag("核准");
        /*
        String sql = "SELECT param_name FROM sys_param WHERE param_mod = '技术' AND param_id = '" + head.get("targetType") + "'";
        List<Map<String, Object>> list = eXsContractDao.QueryhumpMap(sql);
        sysDataModification.setTargetType(list.get(0).get("paramName").toString());*/
        SysDataModificationTableEnum modifyType = SysDataModificationTableEnum.valueOfName(sysDataModification.getModifyType());
        sysDataModification.setTargetTableName(modifyType.getTableName());

        //修改业务表单数据
        if (SysDataModificationTableEnum.CONTRACT_PURCHASE.equals(modifyType)) {
            body.forEach(item -> {
                ECgContractDetailed detailed = new ECgContractDetailed();
                detailed.setHtSl(new BigDecimal(item.get("htSl").toString()));
                detailed.setHtPrice(new BigDecimal(item.get("htPrice").toString()));
                detailed.setHtJe(new BigDecimal(item.get("htJe").toString()));
                eCgContractDetailedDao.dynamicSave(detailed, eCgContractDetailedDao.findById(new ECgContractDetailed.ECgContractDetailed_PK(sysDataModification.getTargetNote(), Integer.valueOf(item.get("htId").toString()))).orElse(null));
            });
        } else if (SysDataModificationTableEnum.CONTRACT_SALE.equals(modifyType)) {
            body.forEach(item -> {
                EXsContractDetailed detailed = new EXsContractDetailed();
                detailed.setHtSl(new BigDecimal(item.get("htSl").toString()));
                detailed.setHtPrice(new BigDecimal(item.get("htPrice").toString()));
                detailed.setHtJe(new BigDecimal(item.get("htJe").toString()));
                eXsContractDetailedDao.dynamicSave(detailed, eXsContractDetailedDao.findById(item.get("htMo").toString()).orElse(null));
            });
        } else if (SysDataModificationTableEnum.WAREHOUSE_OUT.equals(modifyType)) {
            body.forEach(item -> {
                ECkOut eCkOut = new ECkOut();
                eCkOut.setOutZl(new BigDecimal(item.get("outZl").toString()));
                eCkOut.setOutSl(new BigDecimal(item.get("outSl").toString()));
                eCkOutDao.dynamicSave(eCkOut, eCkOutDao.findById(new ECkOut.ECkOut_PK(sysDataModification.getTargetNote(), item.get("outPack").toString())).orElse(null));
                sysDataModification.setModifyFlag(item.get("outFlag").toString());
            });
        } else if (SysDataModificationTableEnum.WAREHOUSE_IN.equals(modifyType)) {
            body.forEach(item -> {
                ECkIn eCkIn = new ECkIn();
                eCkIn.setInZl(new BigDecimal(item.get("inZl").toString()));
                eCkIn.setInSl(new BigDecimal(item.get("inSl").toString()));
                eCkInDao.dynamicSave(eCkIn, eCkInDao.findById(new ECkIn.ECkIn_PK(head.get("targetNote"), item.get("inPack").toString())).orElse(null));
                sysDataModification.setModifyFlag(item.get("inFlag").toString());
            });
        }

        sysDataModificationDao.save(sysDataModification);
        return Result.resultOk();
    }


    @Override
    public Result update(SysDataModification sysDataModification) {
        SessionUser sessionUser = SessionUser.SessionUser();
        if (StringUtils.isEmpty(sysDataModification.getModifyNote())) {
            return Result.error("单号不得为空");
        }
        sysDataModification.setGenUserId(sessionUser.getUserId());
        sysDataModification.setDataCorp(sessionUser.getCorpId());
        sysDataModification.setGenTime(new Date());
        sysDataModificationDao.update(sysDataModification);
        return Result.resultOk();
    }

    @Override
    public Result deleteById(String modifyNote) {
        SysDataModification sysDataModification = sysDataModificationDao.findById(modifyNote).orElse(null);
        if (null == sysDataModification) {
            return Result.error("数据不存在");
        } else if (!"登记".equals(sysDataModification.getModifyFlag())) {
            return Result.error("当前状态不允许删除");
        } else {
            sysDataModificationDao.delete(sysDataModification);
            return Result.resultOk();
        }
    }
}
