package com.tengzhi.business.sc.capacity.product.service;

import com.tengzhi.base.jpa.dto.BaseDto;
import com.tengzhi.base.jpa.extension.SqlJoint;
import com.tengzhi.base.jpa.page.BasePage;
import com.tengzhi.base.jpa.result.Result;
import com.tengzhi.base.security.common.model.SessionUser;
import com.tengzhi.business.sc.capacity.product.dao.ProductDao;
import com.tengzhi.business.sc.capacity.specification.model.MScGgcl;
import com.tengzhi.business.sc.capacity.specification.model.MScGgclVo;
import com.tengzhi.business.system.core.service.SysGenNoteService;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Date;
import java.util.List;
import java.util.Map;

/**
 * @Auther: 黄彪
 * @Date: 2020/8/13 0013 19:35
 * @Description:
 */
@Service
@Transactional(rollbackFor = Exception.class)//发生异常事务回滚
public class ProductionServiceImpl implements ProductService {

    private ProductDao productDao;

    private SysGenNoteService sysGenNoteService;

    public ProductionServiceImpl(ProductDao productDao, SysGenNoteService sysGenNoteService) {
        this.productDao = productDao;
        this.sysGenNoteService = sysGenNoteService;
    }

    /**
     *@role:
     *@Author:      huangbiao
     *@Date:        2020/8/12 0012 14:53
     *@Param:       [baseDto]
     *@return:      com.tengzhi.base.jpa.result.Result
     *@Description: 查询所有规格产品
     **/  @Override
    public BasePage<Map<String, Object>> findAll(BaseDto baseDto,String clType) {
        Map<String, String> map = baseDto.getParamsMap();
        String whereJudge = SqlJoint.whereSuffixWhere((c) ->{
            c.eq("data_corp", SessionUser.getCurrentCorpId());
            c.eq("cl_id",map.get("clId"));
            c.contains("cl_cj",map.get("clCj"));
            c.contains("ggcl_size",map.get("ggclSize"));
            c.contains("cl_type",clType);
        });
        String sqlString = "select cl_id,f_getparamname('GETTYPEBYRAMNAME',cl_cj,'生产车间','','','"+SessionUser.getCurrentCorpId()+"') clCjName,cl_code,ggcl_size,size_min,size_max,cl_bcl,cl_rbs,cl_rcl,cl_yts,cl_ycl," +
                "data_date,data_man" +
                " from m_sc_ggcl"+whereJudge;
        return productDao.QueryMapPageList(baseDto, sqlString, true);
    }

    /**
     *@role:
     *@Author:      huangbiao
     *@Date:        2020/8/12 0012 14:54
     *@Param:       []
     *@return:      com.tengzhi.base.jpa.result.Result
     *@Description: 查询所有车间类型
     **/
    @Override
    public List<Map<Object,String>> findCjType() {
        List<Map<Object, String>> cjTypeList = productDao.findCjType();
        return cjTypeList;
    }

    /**
     *@role:
     *@Author:      huangbiao
     *@Date:        2020/8/13 0013 15:11
     *@Param:       []
     *@return:      java.util.List<java.util.Map<java.lang.Object,java.lang.String>>
     *@Description: 查找所有产能类型
     **/
    @Override
    public List<Map<Object, String>> findClType() {
        List<Map<Object, String>> clTypeList = productDao.findClType();
        return clTypeList;
    }

    /**
     *@role:
     *@Author:      huangbiao
     *@Date:        2020/8/13 0013 15:11
     *@Param:       [clId]
     *@return:      com.tengzhi.base.jpa.result.Result
     *@Description: 查找指定产能数据
     **/
    @Override
    public Result findByClId(String clId) {
        MScGgcl mScGgcl = productDao.findById(clId).orElse(null);
        return Result.resultOk(mScGgcl);
    }


    /**
     *@role:
     *@Author:      huangbiao
     *@Date:        2020/8/13 0013 14:47
     *@Param:       [vo]
     *@return:      com.tengzhi.base.jpa.result.Result
     *@Description: 对MscGgcl的增删改
     **/
    @Override
    public Result OptionMscGgcl(MScGgclVo vo){
        int len = vo.getEntitydata().size();
        try{
            for (int i = 0; i < len; i++) {
                String state = vo.getEntitydata().get(i).get_state();
                if("added".equals(state)){
                    addOne(i,vo);
                }else if("modified".equals(state)){
                    updateOne(i,vo);
                }else if("removed".equals(state)){
                    deleteByClId(vo.getEntitydata().get(i).getClId());
                }
            }
        }catch (Exception e){
            return Result.resultOkMsg("保存失败");
        }
        return Result.resultOkMsg("保存成功");
    }

    /**
     *@role:
     *@Author:      huangbiao
     *@Date:        2020/8/13 0013 13:50
     *@Param:       [i, vo]
     *@return:      com.tengzhi.base.jpa.result.Result
     *@Description: 添加一行数据
     **/
    public void addOne(int i,MScGgclVo vo) {
        MScGgcl mScGgcl = setAttribute(vo,i,"add");
        productDao.save(mScGgcl);
    }

    /**
     *@role:
     *@Author:      huangbiao
     *@Date:        2020/8/13 0013 13:51
     *@Param:       [i, vo]
     *@return:      com.tengzhi.base.jpa.result.Result
     *@Description: 修改一行数据:保存异常回滚数据
     **/
    public void updateOne(int i,MScGgclVo vo) {
        String clId = vo.getEntitydata().get(i).getClId();
        MScGgcl newMsc = setAttribute(vo,i,"update");
        MScGgcl oldMsc = productDao.findById(vo.getEntitydata().get(i).getClId()).orElse(null);
        newMsc.setClId(oldMsc.getClId());
        productDao.deleteById(clId);
        productDao.save(newMsc);
    }

    @Override
    public Result deleteByClId(String clId){
        productDao.deleteById(clId);
        Result result = new Result();
        return result.resultOkMsg("删除成功");
    }

    /**
     *@role:
     *@Author:      huangbiao
     *@Date:        2020/8/13 0013 14:59
     *@Param:       [vo, i, judge]
     *@return:      com.tengzhi.business.sc.capacity.specification.model.MScGgcl
     *@Description: 新增修改操作的vo属性设置
     **/
    public MScGgcl setAttribute(MScGgclVo vo, int i,String judge){
        SessionUser user = SessionUser.SessionUser();
        MScGgcl mScGgcl = new MScGgcl();

        if ("add".equals(judge)){
            String clId = sysGenNoteService.getNote(MScGgcl.class, "JD", "yyyyMMdd", 6);
            mScGgcl.setClId(clId);
        }
        mScGgcl.setClCj(vo.getHeaddata().getClCj());
        mScGgcl.setClCode(vo.getEntitydata().get(i).getClCode());
        mScGgcl.setGgclSize(vo.getEntitydata().get(i).getGgclSize());
        mScGgcl.setSizeMax(vo.getEntitydata().get(i).getSizeMax());
        mScGgcl.setSizeMin(vo.getEntitydata().get(i).getSizeMin());
        mScGgcl.setClBcl(vo.getEntitydata().get(i).getClBcl());
        mScGgcl.setClRbs(vo.getEntitydata().get(i).getClRbs());
        mScGgcl.setClRcl(vo.getEntitydata().get(i).getClRcl());
        mScGgcl.setClYts(vo.getEntitydata().get(i).getClYts());
        mScGgcl.setClYcl(vo.getEntitydata().get(i).getClYcl());
        mScGgcl.setClType(vo.getHeaddata().getClType());
        mScGgcl.setDataDate(new Date());
        mScGgcl.setDataMan(user.getUsername());
        mScGgcl.setDataCorp(user.getCorpId());
        return mScGgcl;
    }
}
