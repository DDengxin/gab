package com.tengzhi.business.sc.da.rydg.service.impl;

import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;

import javax.transaction.Transactional;

import com.tengzhi.base.security.common.model.SessionUser;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;

import com.tengzhi.base.jpa.dto.BaseDto;
import com.tengzhi.base.jpa.page.BasePage;
import com.tengzhi.base.jpa.result.Result;
import com.tengzhi.base.security.common.model.SecurityUser;
import com.tengzhi.business.sc.da.rydg.dao.RydgDao;
import com.tengzhi.business.sc.da.rydg.model.MRyYgdg;
import com.tengzhi.business.sc.da.rydg.model.MRyYgdg.MRyYgdg_PK;
import com.tengzhi.business.sc.da.rydg.service.RydgService;
import com.tengzhi.business.sc.da.rydg.vo.MRyYgdgVo;

import cn.hutool.core.util.ObjectUtil;

@Service
@Transactional
public class YgdgServiceImpl implements RydgService{
	@Autowired
	private RydgDao rydgDao;
	

	@Override
	public BasePage<MRyYgdg> getSrchList(BaseDto baseDto) throws IOException {
		Map<String, String> map = baseDto.getParamsMap();
		String sqlwhere=" where 1=1 ";
		if(ObjectUtil.isNotEmpty(map.get("srchRq1"))) {
			sqlwhere+=" and work_rq >='"+map.get("srchRq1")+"'";
		}
		if(ObjectUtil.isNotEmpty(map.get("srchRq2"))) {
			sqlwhere+=" and work_rq <='"+map.get("srchRq2")+"'";
		}
		if(ObjectUtil.isNotEmpty(map.get("srchDept"))) {
			sqlwhere+=" and work_dept ='"+map.get("srchDept")+"'";
		}
		if(ObjectUtil.isNotEmpty(map.get("srchId"))) {
			sqlwhere+=" and work_id like '%"+map.get("srchId")+"%'";
		}
		if(ObjectUtil.isNotEmpty(map.get("srchName"))) {
			sqlwhere+=" and work_name like '%"+map.get("srchName")+"%'";
		}
		/*if(ObjectUtil.isNotEmpty(map.get("srchGx"))) {
			sqlwhere+=" and work_gx like '%"+map.get("srchGx")+"%'";
		}*/ //定岗中没有加工序的地方
		if(ObjectUtil.isNotEmpty(map.get("srchCt"))) {
			sqlwhere+=" and work_ct like '%"+map.get("srchCt")+"%'";
		}
		
		//修改页面
		if(ObjectUtil.isNotEmpty(map.get("workRq"))) {
			sqlwhere+=" and work_rq ='"+map.get("workRq")+"'";
		}
		if(ObjectUtil.isNotEmpty(map.get("workDept"))) {
			sqlwhere+=" and work_dept ='"+map.get("workDept")+"'";
		}
		//end
		String sql="select *,f_getname('GETDEPTNAME',work_dept,'',data_corp) deptname,f_get_param_name('生产班次',work_bb) bbname,f_get_param_name('生产车间',work_cj) cjname,f_getname('GETGXNAMES', work_gx, '', '') gxname ,f_getname('GETJTNAMES', work_ct, '', '') ctname,f_get_param_name('工资方式',work_gz) gzname  from m_ry_ygdg a "+sqlwhere;
		return rydgDao.QueryPageLists( baseDto,sql+" order by work_rq desc ");
	
	}
	
	@Override
	public MRyYgdg save(MRyYgdgVo mRyYgdgVo)throws Exception {
		SessionUser securityUser=SessionUser.SessionUser();
		if(!mRyYgdgVo.getModifyedList().isEmpty()){
			mRyYgdgVo.getModifyedList().forEach( item ->{
				item.setWorkRq(mRyYgdgVo.getmRyYgdg().getWorkRq());
				item.setWorkDept(mRyYgdgVo.getmRyYgdg().getWorkDept());
				item.setDataCorp(securityUser.getCorpId());
				item.setDataMan(securityUser.getUserId());
				item.setDataDate(new Date());
				rydgDao.save(item);
			});
		}
		return  mRyYgdgVo.getmRyYgdg();
	}

	@Override
	public Result update(MRyYgdgVo mRyYgdgVo) {
		SessionUser securityUser=SessionUser.SessionUser();
		
		rydgDao.deleteAll(mRyYgdgVo.getmRyYgdg().getWorkRq(),mRyYgdgVo.getmRyYgdg().getWorkDept());
		
		if(!mRyYgdgVo.getModifyedList().isEmpty()){
			mRyYgdgVo.getModifyedList().forEach( item ->{
				item.setWorkRq(mRyYgdgVo.getmRyYgdg().getWorkRq());
				item.setWorkDept(mRyYgdgVo.getmRyYgdg().getWorkDept());
				item.setDataCorp(securityUser.getCorpId() );
				item.setDataMan(securityUser.getUserId());
				item.setDataDate(new Date());
				rydgDao.save(item);
			});
		}
	   return Result.resultOkMsg("修改成功");
	}
	
	
	@Override
	public MRyYgdg findByPkId(BaseDto baseDto) throws IOException {
		Map<String, String> map = baseDto.getParamsMap();
		String rq= map.get("rq");
		String workId= map.get("workId");
		String getWorkDept= map.get("getWorkDept");
		MRyYgdg mRyYgdg=null;
		try {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            Date date = sdf.parse(rq);
            MRyYgdg_PK pk=new MRyYgdg_PK(date,workId,getWorkDept);
    		 mRyYgdg=rydgDao.findById(pk).orElse(null);
        } catch (ParseException e) {
            e.printStackTrace();
        }
		return mRyYgdg;
	}
	
	@Override
	public void deleteAll(String id) throws IOException {
		String[] str=id.split(",");
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Date date;
		try {
			date = sdf.parse(str[0]);
			rydgDao.deleteAll(date,str[1]);
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}

	@Override
	public BasePage<MRyYgdg> getDeptGridList(String deptId) {
		String sql="select worker_id work_id,worker_name work_name,work_cj,work_gx,work_bb,work_ct,work_sm,work_gz  from e_hr_worker left join m_ry_ygdg  on worker_id=work_id where  worker_flag='启用' and worker_dept='"+deptId+"' ";
		return rydgDao.QueryNoPageLists(sql);
	}
	

}
