<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" xmlns:tz="http://www.w3.org/1999/xhtml">
<head>
    <th:block th:replace="~{model/Head :: head(~{::title},_,_,${'miniui,common'})}">
        <title>生产入库【新增】</title>
    </th:block>
    <script type="text/javascript" src="/static/javascript/LodopPrint.js"></script>
    <object id="LODOP_OB" classid="clsid:2105C259-1E0C-4534-8141-A753534CB4CA" width="0" height="0">
        <embed id="LODOP_EM" type="application/x-print-lodop" width="0" height="0"/>
    </object>
</head>
<body>
<div class="mini-fit">
    <form id="form1">
        <input id="action" name="action" class="mini-hidden"/>
        <input class="mini-hidden" name="orient" id="orient"/>
        <input class="mini-hidden" name="inType" id="inType" width="100"/>
        <input class="mini-hidden" name="paramMod" id="paramMod" width="100"/>
        <table class="hmq-modify-table">
            <tr>
                <td title>单号：</td>
                <td content>
                    <input id="inNote" name="inNote" class="mini-textbox" emptyText="自动生成" allowInput="false"/>
                </td>
                <td title>日期：</td>
                <td content>
                    <input class="mini-datepicker" name="inRq" dateFormat="yyyy-MM-dd" value="new Date()"/>
                </td>
                <td title>客户：</td>
                <td content>
                    <input required id="inCustomer" name="inCustomer" emptyText="请选择..."
                           allowInput="false" class="mini-buttonedit" onbuttonclick="onSupplierClick"/>
                </td>
                <td title>库房：</td>
                <td content>
                    <input class="mini-combobox" required name="inLib" id="inLib"/>
                </td>
                <!--占位列-->
                <td colspan="2"></td>
                <!--End 占位列-->
            </tr>
        </table>
    </form>
    <div tz:datagrid="datagrid" id="datagrid" idField="inContract" sortField="inContract" sortOrder="asc" style="width:100%;height:450px;"
         url="/production/productionSite/productInWarehouse/getSrchBottomList"
         allowCellEdit="true" allowCellSelect="true" multiSelect="true" editNextOnEnterKey="true" editNextRowCell="true" allowMoveColumn="true"
         showPager="false" OnCellCommitEdit="OnCellCommitEdit" allowCellValid="true" showColumnsMenu="true"
         showSummaryRow="true" OnCellBeginEdit="OnCellBeginEdit" ondrawsummarycell="onDrawSummaryCell" oncellvalidation="onCellValidation">
        <div property="columns">
            <div tz:datagrid="checkcolumn" width="35"></div>
            <div tz:datagrid="indexcolumn" width="35"></div>
            <div tz:datagrid="column" field="inContract" align="center" width="150">订单
                <input id="inContract" property="editor" class="mini-buttonedit" onbuttonclick="onButtonEdit" allowInput="false"/>
            </div>
            <div tz:datagrid="column" field="inCode" align="center" width="100">编码</div>
            <div tz:datagrid="column" name="cpcodeName" field="cpcodeName" displayField="cpcodeNameName" align="left" width="120">名称</div>
            <div tz:datagrid="column" name="cpcodeSize" field="cpcodeSize" displayField="cpcodeSizeName" align="left" width="120">规格</div>
            <div tz:datagrid="column" name="cpcodeSizeEn" field="cpcodeSizeEn" displayField="cpcodeSizeEnName" align="left" width="60">品牌</div>
            <div tz:datagrid="column" name="cpcodeFl" field="cpcodeFl" displayField="cpcodeFlName" align="left" width="120">大类</div>
            <div tz:datagrid="column" field="ddsl" align="right" width="80" numberFormat="#,0.0000" summaryType="sum">订单数量</div>
            <div tz:datagrid="column" field="inJs" align="right" width="80" numberFormat="#,0.00" summaryType="sum">件数</div>
            <div tz:datagrid="column" field="inSl" width="80" align="right" numberFormat="#,0.0000" summaryType="sum">数量
                <input property="editor" class="mini-textbox"/>
            </div>
            <div tz:datagrid="column" field="inZl" width="80" align="right" numberFormat="#,0.0000" summaryType="sum" visible="false">重量
                <input property="editor" class="mini-textbox"/>
            </div>
            <div tz:datagrid="column" field="inPack" width="150" align="left">包装号</div>
            <div tz:datagrid="column" field="inBpack" width="150" align="left">大包装号</div>
            <div tz:datagrid="column" field="inPh" width="150" align="left">批号
                <input property="editor" class="mini-textbox"/>
            </div>
            <div tz:datagrid="column" field="inXh" width="150" align="left">序号
                <input property="editor" class="mini-textbox"/>
            </div>
            <div tz:datagrid="column" field="inRemarks" width="150" align="left">备注
                <input property="editor" class="mini-textbox"/>
            </div>
            <div tz:datagrid="column" field="inPrice" align="right" width="80" numberFormat="#,0.0000" visible="false">单价</div>
            <div tz:datagrid="column" field="inje" width="80" align="right" numberFormat="#,0.00" summaryType="sum" visible="false">金额</div>
            <div tz:datagrid="column" field="inPrice" width="150" align="left" visible="false"></div>
            <div tz:datagrid="column" field="inHs" width="150" align="left" visible="false"></div>
            <div tz:datagrid="column" field="inBz" width="150" align="left" visible="false"></div>
            <div tz:datagrid="column" field="inTax" width="150" align="left" visible="false"></div>
            <div tz:datagrid="column" field="inType" width="150" align="left" visible="false"></div>
            <div tz:datagrid="column" field="" width="100%"></div>
        </div>
    </div>
</div>
<div class="mini-toolbar hmq-toolbar">
    <a class="mini-button" onclick="addRow" iconCls="icon-add" id="addBtn">增行</a>
    <a class="mini-button" onclick="copyRow" iconCls="icon-new" id="copyBtn">复制行</a>
    <a class="mini-button" onclick="delRow" iconCls="icon-remove" id="delBtn">删行</a>
    <a class="mini-button" onclick="delAll" iconCls="icon-remove" id="delAllBtn">删单</a>
    <a class="mini-button" onclick="SaveData" iconCls="icon-save" id="saveBtn">保存</a>
    <a class="mini-button" onclick="printRow" iconCls="icon-print" id="printBtn">打印</a>
    <a class="mini-button" onclick="CloseWindow" iconCls="icon-cancel">关闭</a>
</div>
<th:block th:replace="~{model/Approval :: Approval() }"></th:block>
</body>
<script type="text/javascript">
    mini.parse();
    var form = new mini.Form('form1');
    var grid = mini.get('datagrid');

    //销售客户列表
    function onSupplierClick(e) {
        var btnEdit = e.sender;
        return miniopen({
            targetWindow: window.top,
            url: "/sale/saleArchives/customerArchives/treeCustomer.html",
            title: "【销售客户】选择页面",
            width: 750,
            data: "C",
            height: 620,
            ondestroy: function (action) {
                if (action == "ok") {
                    var iframe = this.getIFrameEl();
                    var data = iframe.contentWindow.GetData();
                    btnEdit.setValue(data.customerId);
                    btnEdit.setText(data.customerExp);
                }
            }
        });
    }

    /**
     新增行
     */
    function addRow() {
        var index = grid.getData().length;
        var inCustomer = mini.get("inCustomer").getValue();
        var inLib = mini.get("inLib").getValue();
        if (isNull(inCustomer)) {
            hmq.tipDanger("请先选择客户！");
            return false;
        } else if (isNull(inLib)) {
            hmq.tipDanger("请先选择库房！");
            return false;
        }
        var newRow = {};
        grid.addRow(newRow, index + 1);
        mini.get("inCustomer").disable();
        mini.get("inLib").disable();
    }

    function copyRow() {
        var rows = grid.getSelecteds();
        if (rows.length > 0) {
            clearBlankRow();
            for (var i = 0; i < rows.length; i++) {
                var r = rows[i];
                var newRow = {
                    inContract: r.inContract,
                    inCode: r.inCode,
                    cpcodeName: r.cpcodeName,
                    cpcodeNameName: r.cpcodeNameName,
                    cpcodeFl: r.cpcodeFl,
                    cpcodeFlName: r.cpcodeFlName,
                    cpcodeBz: r.cpcodeBz,
                    cpcodeBzName: r.cpcodeBzName,
                    cpcodeSizeEn: r.cpcodeSizeEn,
                    cpcodeSizeName: r.cpcodeSizeName,
                    cpcodeSizeEnName: r.cpcodeSizeEnName,
                    inPrice: r.inPrice,
                    inBz: r.inBz,
                    inTax: r.inTax,
                    inHs: r.inHs,
                    inJs: 1,
                    inType: r.inType,
                    ddsl: r.ddsl
                };
                grid.addRow(newRow);
            }
        } else {
            hmq.tipDanger("请先选择一条记录！");
        }
    }

    /**
     删除行
     */
    function delRow() {
        var rows = grid.getSelecteds();
        if (rows.length > 0) {
            grid.removeRows(rows, true);
            var rowstr = grid.getData();
            if(rowstr.length==0){
                mini.get("inCustomer").enable();
                mini.get("inLib").enable();
            }
        } else {
            hmq.tipDanger('请选择需要删除的行！');
        }
    }

    /**
     删除整单
     */
    function delAll() {
        var note = mini.get("inNote").getValue();
        var rows = grid.getData();
        if (note.length > 0) {
            mini.confirm("确定删除整单吗？", "提示信息", function (returndata) {
                if (returndata == "ok") {
                    if (rows.length > 0) {
                        grid.removeRows(rows, true);
                    }
                    mini.get("delAllBtn").disable();
                    $['delete']("delete/{0}".format(note), function (res) {
                        if (200 === res.code) {
                            hmq.tipSuccess(res.msg || '删除成功', {
                                exec: function () {
                                    CloseWindow('refresh');
                                }
                            });
                        } else {
                            hmq.tipDanger(res.msg || '删除失败');
                        }
                    });
                }
            });
        } else {
            if (rows.length > 0) {
                grid.removeRows(rows, true);
                var rowstr = grid.getData();
                if(rowstr.length==0){
                    mini.get("inCustomer").enable();
                    mini.get("inLib").enable();
                }
            }
        }
    }

    /**
     保存
     */
    function SaveData() {
        if (form.validate() && form.isValid()) {
            grid.validate();
            if (grid.isValid() == false) {
                var error = grid.getCellErrors()[0];
                grid.beginEditCell(error.record, error.column);
                return;
            }
            var entrydata = grid.getData();
            var deletedList = grid.getChanges('removed', false);
            $(entrydata).each(function (index) {
                entrydata[index].rightOrd = index;
                entrydata[index]._state = entrydata[index]._state || 'modified';
            });
            var method = 'add' == $('[name=action]').val() ? 'post' : 'put';
            $[method]("add.html", JSON.stringify({
                eCkIn: form.getData(true),
                eCkInMx: entrydata
            }), function (res) {
                if (200 === res.code) {
                    hmq.tipSuccess(res.msg || '保存成功', {
                        exec: function () {
                            CloseWindow('refresh');
                        }
                    });
                } else {
                    hmq.tipDanger(res.msg || '保存失败');
                }
            }, null, {
                contentType: 'application/json'
            });
        }
    }


    /**
     回调函数
     */
    function SetData(options) {
        if (true !== options.isApproval) {
            //普通口径
            var formData = options.data.formData;
            var row = options.data.row;

            //动态列转换
            hmq.business.dynamicProductParams(formData.inType, {
                miniDataGrid: [grid],
                miniForm: form,
                success: function (map, res) {
                },
                error: function (res) {
                    hmq.tipDanger(res.msg || '动态数据列加载失败,请检查配置!');
                }
            });

            mini.get("inLib").load("/system/parameter/getParamsSelectListByParentId/仓库/库房档案/{0}".format(formData.inType));
            if ('add' == options.action) {
                if ("true" == formData.orient) {
                    mini.get("inType").setValue(formData.inType);
                }
                grid.clearData();
                $('[name=action]').val(options.action);
            } else if ('edit' == options.action || 'view' == options.action) {
                $.get("getById/{0}".format(row.inNote), function (res) {
                    if (200 === res.code) {
                        form.setData(res.data, true);
                        if ("true" == formData.orient) {
                            mini.get("inType").setValue(formData.inType);
                        }
                        var data = mini.decode(res.data);
                        mini.get("inCustomer").setText(data.incustomername);
                        grid.load({
                            params: JSON.stringify({inNote: form.getField('inNote').getValue()})
                        });
                        setIdDisable("inCustomer,inLib");
                    }
                });
            }
        } else {
            //审批口径
            $.get("getById/{0}".format(options.data.businessId), function (res) {
                if (200 === res.code) {
                    form.setData(res.data, true);
                    if ("true" == form.getField('orient').getValue()) {
                        mini.get("inType").setValue(form.getField('inType').getValue());
                    }
                    var data = mini.decode(res.data);
                    mini.get("inCustomer").setText(data.incustomername);
                    grid.load({
                        params: JSON.stringify({inNote: form.getField('inNote').getValue()})
                    });
                    setIdDisable("inCustomer,inLib");
                }
            }, null, null, {
                complete: function () {
                    //表单只读
                    setFormReadOnly(form);
                    //隐藏按钮区域
                    $('.mini-toolbar.hmq-toolbar').hide();
                    //禁用grid编辑
                    grid.setAllowCellEdit(false);
                    //动态列转换

                }
            });
        }


    }

    function onButtonEdit(e) {
        var btnEdit = this;
        var index = grid.getData().length;
        console.log(mini.get("inType").getValue());
        if (e.source.id == "inContract") {
            return miniopen({
                targetWindow: window.top,
                url: "/sale/saleProduct/saleReturn/contractDetailSelectList.html",
                title: "订单选择列表",
                width: 1300,
                height: 620,
                onload: function () {
                    var iframe = this.getIFrameEl();
                    var data = {
                        action: "search",
                        customer: mini.get("inCustomer").getValue(),
                        customerName: mini.get("inCustomer").getText(),
                        outType: mini.get("inType").getValue()
                    };
                    iframe.contentWindow.SetData(data);
                },
                ondestroy: function (action) {
                    if (action == "ok") {
                        var iframe = this.getIFrameEl();
                        var rows = mini.clone(iframe.contentWindow.GetMutiData());
                        //对比现有数据后，获取需要追加的行
                        var needAppendRows = appendRow(rows);
                        for (var i = 0; i < needAppendRows.length; i += 1) {
                            var rowData = {
                                inContract: needAppendRows[i].htNo,
                                inCode: needAppendRows[i].htCode,
                                cpcodeName: needAppendRows[i].cpcodeName,
                                cpcodeNameName: needAppendRows[i].cpcodeNameName,
                                inJs: 1,
                                inTax: needAppendRows[i].htTax,
                                inPrice: needAppendRows[i].htPrice,
                                inBz: needAppendRows[i].htCurrency,
                                cpcodeFl: needAppendRows[i].cpcodeFl,
                                cpcodeFlName: needAppendRows[i].cpcodeFlName,
                                cpcodeBz: needAppendRows[i].cpcodeBz,
                                cpcodeBzName: needAppendRows[i].cpcodeBzName,
                                cpcodeSizeEn: needAppendRows[i].cpcodeSizeEn,
                                cpcodeSizeName: needAppendRows[i].cpcodeSizeName,
                                cpcodeSizeEnName: needAppendRows[i].cpcodeSizeEnName,
                                inHs: needAppendRows[i].cpcode02,
                                inType: needAppendRows[i].htStype,
                                ddsl: needAppendRows[i].ddsl
                            };
                            if (i === 0 && grid.getSelected()) {
                                grid.updateRow(grid.getSelected(), rowData);
                                grid.cancelEdit();
                            } else {
                                grid.addRow(rowData, 0);
                            }
                        }
                    }
                }
            });
        }
    }

    /**
     汇总方法
     */
    function onDrawSummaryCell(e) {
        if (e.field == "inContract") {
            e.cellHtml = "<span style='color:Brown;'> 合计:</span>";
        } else if (e.field == "inSl") {
            e.cellHtml = "<span style='color:Brown;float:right;'>" + parseFloat(e.value).toFixed(4) + "</span>";
        } else if (e.field == "inJs") {
            e.cellHtml = "<span style='color:Brown;float:right;'>" + parseFloat(e.value).toFixed(2) + "</span>";
        }
    }

    function OnCellBeginEdit(e) {
        var record = e.record;
        var field = e.field;
    }

    /**
     验证数量、金额不小于0
     */
    function onCellValidation(e) {

        if (e.field == "inSL") {
            if (isNaN(e.value)) {
                e.isValid = false;
                e.errorText = "数量必须为数字";
                grid.beginEditCell(e.record, e.field);
                return hmq.tipDanger(e.errorText);
            }

            if (isNull(e.value) || e.value <= 0) {
                e.isValid = false;
                e.errorText = "数量不能小于0";
                grid.beginEditCell(e.record, e.field);
                return hmq.tipDanger(e.errorText);
            }
        }
        if (e.field == "inPh") {
            if (isNull(e.value)) {
                e.isValid = false;
                e.errorText = "批号不能为空";
                grid.beginEditCell(e.record, e.field);
                return hmq.tipDanger(e.errorText);
            }
        }

    }

    /**

     */
    function OnCellCommitEdit(e) {
        var editor = e.editor;
        editor.validate();
        if (editor.isValid() == false) {
            hmq.tipDanger(editor.getErrorText());
            e.cancel = true;
        }
        var grid = e.sender;
        var record = e.record;
        var field = e.field, value = e.value;
    }

    function getMiniValue(key, defaultValue) {
        if (key == null || key == undefined || key == "") {
            return defaultValue;
        }
        return key;
    }

    function getMiniDate(key) {
        return mini.formatDate(new Date(key), "yyyy-MM-dd");
    }

    // 判读是否为空
    function isNull(key) {
        if (key == null || key == undefined || key === "") {
            return true;
        }
        return false;
    }

    //清空
    function clearBlankRow() {
        var rows = grid.getData();
        for (var i = 0; i < rows.length; i++) {
            var r = rows[i];
            if (r.inContract == null || r.inContract == "") {
                grid.removeRow(r);
            }
        }
    }

    /**
     附加行
     */
    function appendRow(rows) {
        var retRows = [];
        for (var i = 0; i < rows.length; i++) {
            if (!isEixsts(rows[i])) {
                retRows.push(rows[i]);
            } else {
                hmq.tipDanger("数据已添加");
            }
        }
        return retRows;
    }

    /**
     判断是否存在
     */
    function isEixsts(data) {
        /*var row = grid.findRow(function(row) {
            if (row.id == data.id)
                return true;
        });
        if (row != null) {
            return true;
        } */
        return false;
    }

    function printRow() {
        var LODOP = getLodop(document.getElementById('LODOP_OB'), document.getElementById('LODOP_EM'));
        LODOP.PRINT_INITA("0mm", "0mm", "50.01mm", "40.01mm", "库存");
        var rows = grid.getSelecteds();

        if (rows.length > 0) {
            var ids = [];
            var sid = "";
            for (var a = 0; a < rows.length; a++) {
                var row = rows[a];
                sid = row.inPack;
                if (sid != undefined) {
                    ids.push(sid);
                }
            }
            var id = ids.join(',');
            printLabel(id, "PRINTA", "IN");
        } else {
            hmq.tipDanger("请选择一条记录");
        }
        /*
        */
    }

</script>
</html>