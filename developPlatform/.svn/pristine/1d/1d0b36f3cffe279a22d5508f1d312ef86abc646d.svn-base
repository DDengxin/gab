<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" xmlns:tz="http://www.w3.org/1999/xhtml">
<head>
    <th:block th:replace="~{model/Head :: head(~{::title},_,_,${'miniui,common'})}">
        <title>销售合同【新增】</title>
    </th:block>
</head>
<body>
<div class="mini-fit">
    <form id="form1">
        <input id="action" name="action" class="mini-hidden"/>
        <input class="mini-hidden" name="orient" id="orient"/>
        <input class="mini-hidden" name="outType" id="outType" width="100"/>
        <input class="mini-hidden" name="paramMod" id="paramMod" width="100"/>
        <table class="hmq-modify-table">
            <tr>
                <td title>单号：</td>
                <td content>
                    <input id="outNote" name="outNote" class="mini-textbox" emptyText="自动生成" allowInput="false"/>
                </td>
                <td title>日期：</td>
                <td content>
                    <input class="mini-datepicker" name="outRq" dateFormat="yyyy-MM-dd" value="new Date()"/>
                </td>
                <td title>单位：</td>
                <td content>
                    <input required id="outCustomer" name="outCustomer" emptyText="请选择..."
                           allowInput="false" class="mini-buttonedit" onbuttonclick="onSupplierClick"/>
                </td>
                <td title>库房：</td>
                <td content>
                    <input class="mini-combobox" required name="outLib" id="outLib" onvaluechanged="valuechanged(this)"/>
                </td>
                <td title>调整库房：</td>
                <td content>
                    <input class="mini-combobox" required name="outAllotLib" id="outAllotLib" onvaluechanged="valuechanged(this)"/>
                </td>
            </tr>
        </table>
    </form>
    <div tz:datagrid="datagrid" id="datagrid" idField="outContract" sortField="outContract" sortOrder="asc" style="width:1300px;height:450px;"
         url="/ck/yw/warehouseAllot/getOutDetailedList"
         allowCellEdit="true" allowCellSelect="true" multiSelect="true" editNextOnEnterKey="true" editNextRowCell="true" allowMoveColumn="true"
         showPager="false" OnCellCommitEdit="OnCellCommitEdit" allowCellValid="true" showColumnsMenu="true"
         showSummaryRow="true" OnCellBeginEdit="OnCellBeginEdit" ondrawsummarycell="onDrawSummaryCell"
         sortMode="client">
        <div property="columns">
            <div tz:datagrid="checkcolumn" width="35"></div>
            <div tz:datagrid="indexcolumn" width="35"></div>
            <div tz:datagrid="column" field="outContract" align="center" width="150" visible="false">订单</div>
            <div tz:datagrid="column" field="outCode" align="center" width="100">编码
                <input id="outCode" property="editor" class="mini-buttonedit" onbuttonclick="onButtonEdit" allowInput="false"/>
            </div>
            <div tz:datagrid="column" field="cpcodeName" name="cpcodeName" align="left" width="120">名称</div>
            <div tz:datagrid="column" field="cpcodeSize" name="cpcodeSize" align="left" width="120">规格</div>
            <div tz:datagrid="column" field="cpcodeXp" name="cpcodeXp" align="left" width="120">标重</div>
            <div tz:datagrid="column" field="cpcodeSizeEn" name="cpcodeSizeEn" align="left" width="60">品牌</div>
            <div tz:datagrid="column" field="cpcodeFl" name="cpcodeFl" align="left" width="120">大类</div>
            <div tz:datagrid="column" field="outJs" align="right" width="80" numberFormat="#,0.00" summaryType="sum">件数</div>
            <div tz:datagrid="column" field="outSl" width="80" align="right" numberFormat="#,0.0000" summaryType="sum">数量</div>
            <div tz:datagrid="column" field="outPack" width="150" align="left">包装号</div>
            <div tz:datagrid="column" field="outBpack" width="150" align="left">大包装号</div>
            <div tz:datagrid="column" field="outPrice" width="150" align="left" visible="false"></div>
            <div tz:datagrid="column" field="outHs" width="150" align="left" visible="false"></div>
            <div tz:datagrid="column" field="outBz" width="150" align="left" visible="false"></div>
            <div tz:datagrid="column" field="outTax" width="150" align="left" visible="false"></div>
            <div tz:datagrid="column" field="outType" width="150" align="left" visible="false"></div>
            <div tz:datagrid="column" field="outKw" displayField="kwname" width="80">原库位</div>
            <div tz:datagrid="column" field="outAllotKw" width="80">现库位
                <input id="outAllotKw" property="editor" class="mini-treeselect" multiSelect="false"
                       valueFromSelect="true" textField="combtext" valueField="combid"
                       parentField="pid" value="无" onbeforenodeselect="disableParentSelection"
                       popupWidth="240" popupHeight="180" allowInput="true"
                />
            </div>
            <div tz:datagrid="column" field="outPh" width="150">批号</div>
            <div tz:datagrid="column" field="outRemarks" width="200">备注
                <input id="outRemarks" property="editor" class="mini-textbox"/>
            </div>
            <div tz:datagrid="column" field="" width="100%"></div>
        </div>
    </div>
</div>
<div class="mini-toolbar hmq-toolbar">
    <a class="mini-button" onclick="addRow" iconCls="icon-add" id="addBtn">增行</a>
    <a class="mini-button" onclick="delRow" iconCls="icon-remove" id="delBtn">删行</a>
    <a class="mini-button" onclick="delAll" iconCls="icon-remove" id="delAllBtn">删单</a>
    <a class="mini-button" onclick="SaveData" iconCls="icon-save" id="saveBtn">保存</a>
    <a class="mini-button" onclick="CloseWindow" iconCls="icon-cancel">关闭</a>
</div>
</body>
<script type="text/javascript">
    mini.parse();
    var form = new mini.Form('form1');
    var grid = mini.get('datagrid');
    /* grid.setEmptyText('数据为空，<a class="text-link" href="javascript:addRow()">增加一条</a>'); */
    //销售客户列表
    function onSupplierClick(e) {
        var outType = mini.get("outType").getValue();
        var customerType = "C";
        if (outType == "YL") {
            customerType = "S";
        }
        var btnEdit = e.sender;
        return miniopen({
            targetWindow: window.top,
            url: "/sale/saleArchives/customerArchives/treeCustomer.html",
            title: "【单位】选择页面",
            width: 750,
            data: customerType,
            height: 620,
            ondestroy: function (action) {
                if (action == "ok") {
                    var iframe = this.getIFrameEl();
                    var data = iframe.contentWindow.GetData();
                    btnEdit.setValue(data.customerId);
                    btnEdit.setText(data.customerExp);
                }
            }
        });
    }

    function valuechanged(e) {
        var outLib, outAllotLib;
        if (e.id == "outLib") {
            outLib = e.value;
            outAllotLib = mini.get("outAllotLib").getValue();

        } else if (e.id == "outAllotLib") {
            outLib = mini.get("outLib").getValue();
            outAllotLib = e.value;
        }
        if (outAllotLib != "" && outLib != "") {
            if (outLib == outAllotLib) {
                hmq.tipDanger("原库房不能与调拨库房相同！");
                e.cancel = true;
                return false;
            }
        }

    }



    /**
     新增行
     */
    function addRow() {
        var index = grid.getData().length;
        var outCustomer = mini.get("outCustomer").getValue();
        var outLib = mini.get("outLib").getValue();
        if (isNull(outCustomer)) {
            hmq.tipDanger("请先选择单位！");
            return false;
        } else if (isNull(outLib)) {
            hmq.tipDanger("请先选择库房！");
            return false;
        }
        var newRow = {};
        grid.addRow(newRow, index + 1);
        mini.get("outCustomer").disable();
        mini.get("outLib").disable();
    }

    /**
     删除行
     */
    function delRow() {
        var rows = grid.getSelecteds();
        if (rows.length > 0) {
            grid.removeRows(rows, true);
        } else {
            hmq.tipDanger('请选择需要删除的行！');
        }
    }

    /**
     删除整单
     */
    function delAll() {
        var note = mini.get("outNote").getValue();
        var rows = grid.getData();
        if (note.length > 0) {
            mini.confirm("确定删除整单吗？", "提示信息", function (returndata) {
                if (returndata == "ok") {
                    if (rows.length > 0) {
                        grid.removeRows(rows, true);
                    }
                    mini.get("delAllBtn").disable();
                    $['delete']("delete/{0}".format(note), function (res) {
                        if (200 === res.code) {
                            hmq.tipSuccess(res.msg || '删除成功', {
                                exec: function () {
                                    CloseWindow('refresh');
                                }
                            });
                        } else {
                            hmq.tipDanger(res.msg || '删除失败');
                        }
                    });
                }
            });
        } else {
            if (rows.length > 0) {
                grid.removeRows(rows, true);
            }
        }
    }

    /**
     保存
     */
    function SaveData() {
        if (form.validate() && form.isValid()) {
            grid.validate();
            if (grid.isValid() == false) {
                var error = grid.getCellErrors()[0];
                grid.beginEditCell(error.record, error.column);
                return;
            }
            var entrydata = grid.getData();
            var deletedList = grid.getChanges('removed', false);
            $(entrydata).each(function (index) {
                entrydata[index].rightOrd = index;
                entrydata[index]._state = entrydata[index]._state || 'modified';
            });
            var method = 'add' == $('[name=action]').val() ? 'post' : 'put';
            $[method]("add.html", JSON.stringify({
                eCkAllot: form.getData(true),
                ckList: entrydata
            }), function (res) {
                if (200 === res.code) {
                    hmq.tipSuccess(res.msg || '保存成功', {
                        exec: function () {
                            CloseWindow('refresh');
                        }
                    });
                } else {
                    hmq.tipDanger(res.msg || '保存失败');
                }
            }, null, {
                contentType: 'application/json'
            });
        }
    }


    /**
     回调函数
     */
    function SetData(options) {
        var formData = options.data.formData;
        var row = options.data.row;
        if ("true" == formData.orient) {
            mini.get("outType").setValue(formData.outType);
            mini.get("paramMod").setValue(formData.paramMod);
        }

        //动态列转换
        hmq.business.dynamicProductParams(formData.outType, {
            miniDataGrid: grid,
            success: function (map, res) {
            },
            error: function (res) {
                hmq.tipDanger(res.msg || '动态数据列加载失败,请检查配置!');
            }
        });

        mini.get("outLib").load("/system/parameter/getParamsSelectListByParentId/仓库/库房档案/{0}".format(formData.outType));
        mini.get("outAllotLib").load("/system/parameter/getParamsSelectListByParentId/仓库/库房档案/{0}".format(formData.outType));
        if ('add' == options.action) {
            grid.clearData();
            $('[name=action]').val(options.action);
        } else if ('edit' == options.action || 'view' == options.action) {
            $.get("getByNote/{0}".format(row.outNote), function (res) {
                if (200 === res.code) {
                    form.setData(res.data, true);
                    var data = mini.decode(res.data);
                    console.log(data);
                    mini.get("outCustomer").setText(data.outcustomername);
                    grid.load({
                        params: JSON.stringify({
                            outNote: form.getField('outNote').getValue(),
                            outType: formData.outType
                        })
                    });
                    mini.get("outCustomer").disable();
                    mini.get("outLib").disable();
                    mini.get("outAllotLib").disable();
                    if (options.action == 'view') {
                        mini.get("addBtn").setVisible(false);
                        mini.get("delBtn").setVisible(false);
                        mini.get("delAllBtn").setVisible(false);
                        mini.get("saveBtn").setVisible(false);
                    }
                }
            });
        }
    }

    function onButtonEdit(e) {
        var btnEdit = this;
        var index = grid.getData().length;
        if (e.source.id == "outCode") {
            return miniopen({
                targetWindow: window.top,
                url: "/ck/yw/warehouseAllot/ckmxSelectList.html",
                title: "编码选择列表",
                width: 1300,
                height: 620,
                onload: function () {
                    var iframe = this.getIFrameEl();
                    var data = {
                        action: "search",
                        lib: mini.get("outLib").getValue(),
                        outType: mini.get("outType").getValue()

                    };
                    iframe.contentWindow.SetData(data);
                },
                ondestroy: function (action) {
                    if (action == "ok") {
                        var iframe = this.getIFrameEl();
                        var rows = iframe.contentWindow.GetMutiData();
                        rows = mini.clone(rows); //必须
                        var dataRows = appendRow(rows);
                        if (dataRows.length > 0) {
                            var row = grid.getSelected();
                            btnEdit.setValue(dataRows[0].code);
                            btnEdit.setText(dataRows[0].code);
                            grid.updateRow(row, {
                                outContract: dataRows[0].contract,
                                outCode: dataRows[0].code,
                                cpcodeName: dataRows[0].cpcode_name,
                                cpcodeSize: dataRows[0].cpcode_size,
                                outJs: dataRows[0].js,
                                outSl: dataRows[0].sl,
                                outPack: dataRows[0].pack,
                                outBpack: dataRows[0].bpack,
                                outTax: dataRows[0].out_tax,
                                outPrice: dataRows[0].out_price,
                                outHs: dataRows[0].out_hs,
                                outBz: dataRows[0].out_bz,
                                outType: dataRows[0].out_type,
                                cpcodeFl: dataRows[0].cpcode_fl,
                                outKw: dataRows[0].out_kw,
                                kwname: dataRows[0].kwname,
                                outPh: dataRows[0].out_ph,
                                cpcodeXp: dataRows[0].cpcode_xp
                            });
                            if (dataRows.length > 1) {
                                for (var i = 1; i < dataRows.length; i++) {
                                    var r = dataRows[i];
                                    var newRow = {
                                        outContract: r.contract,
                                        outCode: r.code,
                                        cpcodeName: r.cpcode_name,
                                        cpcodeSize: r.cpcode_size,
                                        outJs: r.js,
                                        outSl: r.sl,
                                        outPack: r.pack,
                                        outBpack: r.bpack,
                                        outTax: r.out_tax,
                                        outPrice: r.out_price,
                                        outHs: r.out_hs,
                                        outBz: r.out_bz,
                                        outType: r.out_type,
                                        cpcodeFl: r.cpcode_fl,
                                        outKw: r.out_kw,
                                        kwname: r.kwname,
                                        outPh: r.out_ph,
                                        cpcodeXp: r.cpcode_xp
                                    };
                                    grid.addRow(newRow, index);
                                }

                            }
                            grid.clearSelect();
                        }

                    }
                }
            });
        }
    }

    /**
     汇总方法
     */
    function onDrawSummaryCell(e) {
        if (e.field == "outContract") {
            e.cellHtml = "<span style='color:Brown;'> 合计:</span>";
        } else if (e.field == "outSl") {
            e.cellHtml = "<span style='color:Brown;float:right;'>" + parseFloat(e.value).toFixed(3) + "</span>";
        } else if (e.field == "outJs") {
            e.cellHtml = "<span style='color:Brown;float:right;'>" + parseFloat(e.value).toFixed(3) + "</span>";
        }
    }

    function OnCellBeginEdit(e) {
        var record = e.record;
        var field = e.field, value = e.value;
        var editor = e.editor;
        if (field == "outAllotKw") {
            var outType = mini.get("outType").getValue();
            var outAllotLib = mini.get("outAllotLib").getValue();
            editor.load("/system/parameter/getKwTreeList/{0}".format(outAllotLib));
        }
    }

    /**

     */
    function OnCellCommitEdit(e) {
        var editor = e.editor;
        editor.validate();
        if (editor.isValid() == false) {
            hmq.tipDanger(editor.getErrorText());
            e.cancel = true;
        }
        var grid = e.sender;
        var record = e.record;
        var field = e.field, value = e.value;
    }

    function getMiniValue(key, defaultValue) {
        if (key == null || key == undefined || key == "") {
            return defaultValue;
        }
        return key;
    }

    function getMiniDate(key) {
        return mini.formatDate(new Date(key), "yyyy-MM-dd");
    }

    // 判读是否为空
    function isNull(key) {
        if (key == null || key == undefined || key === "") {
            return true;
        }
        return false;
    }

    /**
     附加行
     */
    function appendRow(rows) {
        var retRows = [];
        for (var i = 0; i < rows.length; i++) {
            if (!isEixsts(rows[i])) {
                retRows.push(rows[i]);
            } else {
                hmq.tipDanger("数据已添加");
            }
        }
        return retRows;
    }

    /**
     判断是否存在
     */
    function isEixsts(data) {
        var row = grid.findRow(function (row) {
            if (row.outBpack == data.bpack)
                return true;
        });
        if (row != null) {
            return true;
        }
        return false;
    }


</script>
</html>