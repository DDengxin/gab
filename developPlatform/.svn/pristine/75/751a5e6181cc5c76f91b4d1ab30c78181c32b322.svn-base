package com.tengzhi.base.jpa.dao.impl;

import cn.hutool.core.bean.BeanUtil;
import cn.hutool.core.util.ArrayUtil;
import cn.hutool.core.util.ReUtil;
import cn.hutool.core.util.StrUtil;
import com.tengzhi.base.jpa.dao.BasedaoRepository;
import com.tengzhi.base.jpa.dto.BaseDto;
import com.tengzhi.base.jpa.page.BasePage;
import com.tengzhi.base.jpa.page.impl.BasePageImpl;
import com.tengzhi.base.tools.UUID.UUIDUtil;
import com.tengzhi.base.tools.beans.BeanUtils;
import com.tengzhi.base.tools.reflect.ReflectHelper;
import com.tengzhi.base.tools.reflect.SelfResultTransformer;
import org.apache.commons.lang3.StringUtils;
import org.hibernate.query.internal.NativeQueryImpl;
import org.hibernate.transform.Transformers;
import org.springframework.data.domain.*;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.jpa.repository.support.JpaEntityInformation;
import org.springframework.data.jpa.repository.support.JpaEntityInformationSupport;
import org.springframework.data.jpa.repository.support.SimpleJpaRepository;
import org.springframework.lang.Nullable;

import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import java.io.Serializable;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

/**
 * @author lqy
 */
public class BasedaoRepositoryImpl<T, ID extends Serializable> extends SimpleJpaRepository<T, ID>
		implements BasedaoRepository<T, ID> {
	/**
	 * 持久化上下文
	 */
	@PersistenceContext
	private EntityManager entityManager;
	private Class<T> entityClass;

	public EntityManager getEntityManager() {
		return entityManager;
	}

	public Class<T> getEntityClass() {
		return entityClass;
	}

	public BasedaoRepositoryImpl(JpaEntityInformation<T, ?> entityInformation, EntityManager entityManager) {
		super(entityInformation, entityManager);
		this.entityManager = entityManager;
		this.entityClass = entityInformation.getJavaType();
	}

	// 父类没有不带参数的构造方法，这里手动构造父类
	public BasedaoRepositoryImpl(Class<T> domainClass, EntityManager entityManager) {
		this(JpaEntityInformationSupport.getEntityInformation(domainClass, entityManager), entityManager);
		this.entityManager = entityManager;
	}

	@Override
	public void store(Object... item) {
		if (null != item) {
			for (Object entity : item) {
				innerSave(entity);
			}
		}
	}

	@Override
	public void update(Object... item) {
		if (null != item) {
			for (Object entity : item) {
				entityManager.merge(entity);
			}
		}
	}

	@Override
	public void updateAll(Iterable<T> obj) {
		if (null != obj) {
			obj.forEach(item -> {
				update(item);
			});
		}
	}

	@Override
	public int executeUpdate(String qlString, Object... values) {
		Query query = entityManager.createQuery(qlString);
		if (values != null) {
			for (int i = 0; i < values.length; i++) {
				query.setParameter(i + 1, values[i]);
			}
		}
		return query.executeUpdate();
	}

	@Override
	public int executeUpdateSql(String sql, Object... values) {
		Query query = entityManager.createNativeQuery(sql);
		if (values != null) {
			for (int i = 0; i < values.length; i++) {
				query.setParameter(i + 1, values[i]);
			}
		}
		return query.executeUpdate();
	}

	@Override
	public int executeUpdate(String qlString, Map<String, Object> params) {
		Query query = entityManager.createQuery(qlString);
		for (String name : params.keySet()) {
			query.setParameter(name, params.get(name));
		}
		return query.executeUpdate();
	}

	@Override
	public int executeUpdate(String qlString, List<Object> values) {
		Query query = entityManager.createQuery(qlString);
		for (int i = 0; i < values.size(); i++) {
			query.setParameter(i + 1, values.get(i));
		}
		return query.executeUpdate();
	}

	/**
	 * 保存对象
	 *
	 * @param item 保存对象
	 * @return
	 */
	private Serializable innerSave(Object item) {
		try {
			if (item == null) {
				return null;
			}
			Class<?> clazz = item.getClass();
			Field idField = ReflectHelper.getIdField(clazz);
			Method getMethod = null;
			if (idField != null) {
				Class<?> type = idField.getType();
				Object val = idField.get(item);
				if (type == String.class && (val == null || "".equals(val))) {
					idField.set(item, UUIDUtil.uuid());
				}
			} else {
				Method[] methods = clazz.getDeclaredMethods();
				for (Method method : methods) {
					Id id = method.getAnnotation(Id.class);
					if (id != null) {
						Object val = method.invoke(item);
						if (val == null || "".equals(val)) {
							String methodName = "s" + method.getName().substring(1);
							Method setMethod = clazz.getDeclaredMethod(methodName, method.getReturnType());
							if (setMethod != null) {
								setMethod.invoke(item, UUIDUtil.uuid());
							}
						}
						getMethod = method;
						break;
					}
				}
			}
			entityManager.persist(item);
			entityManager.flush();
			if (idField != null) {
				return (Serializable) idField.get(item);
			}
			if (getMethod != null) {
				return (Serializable) getMethod.invoke(item);
			}
			return null;
		} catch (Exception e) {
			e.printStackTrace();
			throw new RuntimeException(e);
		}
	}

	private Query createNativeQuery(String sql, Object... params) {
		Query q = entityManager.createNativeQuery(sql);
		if (params != null && params.length > 0) {
			for (int i = 0; i < params.length; i++) {
				q.setParameter(i + 1, params[i]);
			}
		}
		return q;
	}

	@Override
	public List<Map> QueryListMap(String sql, Object... params) {
		Query q = createNativeQuery(sql, params);
		q.unwrap(NativeQueryImpl.class).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP);
		return q.getResultList();
	}

	@Override
	public List<Map> QueryListMap(String sql) {
		return QueryListMap(sql, new Object[0]);
	}

	@Override
	public List<Map<String, Object>> QueryhumpMap(String sql, Object... params) {
		Query q = createNativeQuery(sql, params);
		q.unwrap(NativeQueryImpl.class)
				.setResultTransformer(com.tengzhi.base.jpa.extension.Transformers.ALIAS_TO_CAMEL_ENTITY_MAP);
		return q.getResultList();
	}

	@Override
	public List<Map<String, Object>> SelectListMap(String Sql, Object... params) {
		Query q = createNativeQuery(Sql, params);
		q.unwrap(NativeQueryImpl.class).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP);
		return q.getResultList();
	}

	@Override
	public List<T> QueryListModel(Class<T> resultClass, String Sql, Object... params) {
		Query q = createNativeQuery(Sql, params);
		q.unwrap(NativeQueryImpl.class).setResultTransformer(new SelfResultTransformer(resultClass));
		return q.getResultList();
	}

	@Override
	public List<?> QueryListVO(Class<?> resultClass, String Sql, Object... params) {
		Query q = createNativeQuery(Sql, params);
		q.unwrap(NativeQueryImpl.class).setResultTransformer(new SelfResultTransformer(resultClass));
		return q.getResultList();
	}

	@SuppressWarnings({ "unlikely-arg-type", "static-access" })
	@Override
	public BasePage<T> QueryPageList(@Nullable int pageNum, @Nullable int pageSize, @Nullable String sortby,
			@Nullable String sorting, @Nullable Specification<T> spec) {
		Sort sort = null;
		Pageable pageable = null;

		List<String> fieldList = Arrays.stream(StrUtil.nullToDefault(sortby, "").split(","))
				.filter(s -> StringUtils.isNotBlank(s)).collect(Collectors.toList());
		if (fieldList.size() > 0) {
			if (Direction.DESC.name().equals(String.valueOf(sorting).toUpperCase())) {
				sort = Sort.by(Direction.DESC, fieldList.toArray(new String[fieldList.size()]));
			} else {
				sort = Sort.by(Direction.ASC, fieldList.toArray(new String[fieldList.size()]));
			}
			pageable = PageRequest.of(pageNum, pageSize, sort);
		} else {
			pageable = PageRequest.of(pageNum, pageSize);
		}
		Page<T> page = this.findAll(spec, pageable);
		return new BasePageImpl(page.getContent(), page.getPageable(), page.getTotalElements());
	}

	@Override
	public BasePage<T> QueryPageList(BaseDto baseDto, @Nullable Specification<T> spec) {
		return QueryPageList(baseDto.getPageIndex(), baseDto.getPageSize(), baseDto.getSortField(),
				baseDto.getSortOrder(), spec);
	}

	@Override
	public BasePage<T> QueryNOPageList(BaseDto baseDto, @Nullable Specification<T> spec) {
		Sort sort = null;
		if (baseDto.getSortField() != null) {
			if (Direction.DESC.name().equals(String.valueOf(baseDto.getSortOrder()).toUpperCase())) {
				sort = Sort.by(Direction.DESC, baseDto.getSortField());
			} else {
				sort = Sort.by(Direction.ASC, baseDto.getSortField());
			}
		}
		return new BasePageImpl(this.findAll(spec, sort));
	}

	@Override
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public BasePage<Map<String, Object>> QueryPageList(String sql, String countSql, Pageable pageable) {
		// sql = joinOrderBy(pageable,sql);

		Query query = entityManager.createNativeQuery(sql);
		query.setFirstResult((int) pageable.getOffset());
		query.setMaxResults(pageable.getPageSize());
		query.unwrap(NativeQueryImpl.class).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP);// 转换为map对象
		List<Map<String, Object>> rankEntities = query.getResultList();
		Query countQuery = entityManager.createNativeQuery(countSql);
		BigInteger totalCount = (BigInteger) countQuery.getSingleResult();
		Page<Map<String, Object>> page = new PageImpl<>(rankEntities, pageable, totalCount.longValue());
		return new BasePageImpl(page.getContent(), page.getPageable(), page.getTotalElements());
	}

	@Override
	public BasePage<?> QueryPageList(Class<?> vo, BaseDto dto, String sql) {
		Sort sort = null;
		Pageable pageable = null;
		List<String> fieldList = Arrays.stream(StrUtil.nullToDefault(dto.getSortField(), "").split(","))
				.filter(s -> StringUtils.isNotBlank(s)).collect(Collectors.toList());
		if (fieldList.size() > 0) {
			if (Direction.DESC.name().equals(String.valueOf(dto.getSortOrder()).toUpperCase())) {
				sort = Sort.by(Direction.DESC, fieldList.toArray(new String[fieldList.size()]));
			} else {
				sort = Sort.by(Direction.ASC, fieldList.toArray(new String[fieldList.size()]));
			}
			pageable = PageRequest.of(dto.getPageIndex(), dto.getPageSize(), sort);
		} else {
			pageable = PageRequest.of(dto.getPageIndex(), dto.getPageSize());
		}
		return BaseQueryPageList(vo, pageable, sql, false);

	}

	@Override
	public BasePage<Map<String, Object>> QueryMapPageList(BaseDto dto, String sql, boolean humpConversion) {
		Sort sort = null;
		Pageable pageable = null;
		List<String> fieldList = Arrays.stream(StrUtil.nullToDefault(dto.getSortField(), "").split(","))
				.filter(s -> StringUtils.isNotBlank(s)).collect(Collectors.toList());
		if (fieldList.size() > 0) {
			if (Direction.DESC.name().equals(String.valueOf(dto.getSortOrder()).toUpperCase())) {
				sort = Sort.by(Direction.DESC, fieldList.toArray(new String[fieldList.size()]));
			} else {
				sort = Sort.by(Direction.ASC, fieldList.toArray(new String[fieldList.size()]));
			}
			pageable = PageRequest.of(dto.getPageIndex(), dto.getPageSize(), sort);
		} else {
			pageable = PageRequest.of(dto.getPageIndex(), dto.getPageSize());
		}
		return (BasePage<Map<String, Object>>) BaseQueryPageList(Map.class, pageable, sql, humpConversion);
	}

	/**
	 * 基础分页查询函数
	 * 
	 * @param vo             实体类或者Map对象
	 * @param pageable       分页对象
	 * @param sql            sql语句
	 * @param humpConversion 下划线转驼峰(对于vo对象该参数无效)
	 * @return
	 */
	private BasePage<?> BaseQueryPageList(Class<?> vo, Pageable pageable, String sql, boolean humpConversion) {
		sql = joinOrderBy(pageable, sql);

		Query query = entityManager.createNativeQuery(sql);
		if (vo.equals(Map.class)) {
			if (humpConversion) {
				// 转换为map对象(下划线转驼峰)
				query.unwrap(NativeQueryImpl.class)
						.setResultTransformer(com.tengzhi.base.jpa.extension.Transformers.ALIAS_TO_CAMEL_ENTITY_MAP);
			} else {
				// 转换为map对象
				query.unwrap(NativeQueryImpl.class).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP);

			}
		} else {
			query.unwrap(NativeQueryImpl.class).setResultTransformer(new SelfResultTransformer(vo));
		}
		query.setFirstResult((int) pageable.getOffset());
		query.setMaxResults(pageable.getPageSize());
		List<T> rankEntities = query.getResultList();
		Query countQuery = entityManager.createNativeQuery("select count(*) from(" + sql + ")x");
		BigInteger totalCount = (BigInteger) countQuery.getSingleResult();
		Page<T> page = new PageImpl<T>(rankEntities, pageable, totalCount.longValue());
		return new BasePageImpl(page.getContent(), page.getPageable(), page.getTotalElements());
	}

	@Override
	public String getSingleResult(String Sql, Object... params) {
		Query query = createNativeQuery(Sql, params);
		Object result = query.getSingleResult();
		if (null == result) {
			return "";
		} else {
			return String.valueOf(result);
		}
	}

	@Override
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public BasePage<T> QueryPageLists(String sql, String countSql, Pageable pageable) {
		Query query = entityManager.createNativeQuery(sql);
		query.unwrap(NativeQueryImpl.class).setResultTransformer(new SelfResultTransformer(entityClass));
		query.setFirstResult((int) pageable.getOffset());
		query.setMaxResults(pageable.getPageSize());
		List<T> rankEntities = query.getResultList();
		Query countQuery = entityManager.createNativeQuery(countSql);
		BigInteger totalCount = (BigInteger) countQuery.getSingleResult();
		Page<T> page = new PageImpl<>(rankEntities, pageable, totalCount.longValue());
		return new BasePageImpl(page.getContent(), page.getPageable(), page.getTotalElements());
	}

	@Override
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public BasePage<T> QueryPageLists(Pageable pageable, String sql) {
		sql = joinOrderBy(pageable, sql);

		Query query = entityManager.createNativeQuery(sql);
		query.unwrap(NativeQueryImpl.class).setResultTransformer(new SelfResultTransformer(entityClass));
		query.setFirstResult((int) pageable.getOffset());
		query.setMaxResults(pageable.getPageSize());
		List<T> rankEntities = query.getResultList();
		Query countQuery = entityManager.createNativeQuery("select count(*) from(" + sql + ")x");
		BigInteger totalCount = (BigInteger) countQuery.getSingleResult();
		Page<T> page = new PageImpl<T>(rankEntities, pageable, totalCount.longValue());
		return new BasePageImpl(page.getContent(), page.getPageable(), page.getTotalElements());
	}

	@Override
	public BasePage<T> QueryNoPageLists(String sql) {
		Query query = entityManager.createNativeQuery(sql);
		query.unwrap(NativeQueryImpl.class).setResultTransformer(new SelfResultTransformer(entityClass));
		List<T> rankEntities = query.getResultList();
		Page<T> page = new PageImpl<>(rankEntities);
		return new BasePageImpl(page.getContent(), page.getPageable(), page.getTotalElements());
	}

	@Override
	public T dynamicSave(T newEntity, T oldEntity) {
		T mergedEntity;
		if (oldEntity == null) {
			entityManager.persist(newEntity);
			mergedEntity = newEntity;
		} else {
			BeanUtil.copyProperties(newEntity, oldEntity, BeanUtils.getNullPropertyNames(newEntity));
			entityManager.merge(oldEntity);
			mergedEntity = oldEntity;
		}
		return mergedEntity;
	}

	@Override
	public BasePage<T> QueryPageLists(String sql, String countSql, BaseDto dto) {
		Sort sort = null;
		Pageable pageable = null;
		if (StringUtils.isNoneEmpty(dto.getSortField())) {
			if (Direction.DESC.name().equals(String.valueOf(dto.getSortOrder()).toUpperCase())) {
				sort = Sort.by(Direction.DESC, dto.getSortField());
			} else {
				sort = Sort.by(Direction.ASC, dto.getSortField());
			}
			pageable = PageRequest.of(dto.getPageIndex(), dto.getPageSize(), sort);
		} else {
			pageable = PageRequest.of(dto.getPageIndex(), dto.getPageSize());
		}
		return QueryPageLists(sql, countSql, pageable);
	}

	@Override
	public BasePage<T> QueryPageLists(BaseDto dto, String sql) {
		Sort sort = null;
		Pageable pageable = null;
		List<String> fieldList = Arrays.stream(dto.getSortField().split(",")).filter(s -> StringUtils.isNotBlank(s))
				.collect(Collectors.toList());
		if (fieldList.size() > 0) {
			if (Direction.DESC.name().equals(String.valueOf(dto.getSortOrder()).toUpperCase())) {
				sort = Sort.by(Direction.DESC, fieldList.toArray(new String[fieldList.size()]));
			} else {
				sort = Sort.by(Direction.ASC, fieldList.toArray(new String[fieldList.size()]));
			}
			pageable = PageRequest.of(dto.getPageIndex(), dto.getPageSize(), sort);
		} else {
			pageable = PageRequest.of(dto.getPageIndex(), dto.getPageSize());
		}
		return QueryPageLists(pageable, sql);
	}

	@Override
	public BasePage<Map<String, Object>> QueryPageList(String sql, String countSql, BaseDto dto) {
		Sort sort = null;
		if (dto.getSortField() != null) {
			if (Direction.DESC.name().equals(String.valueOf(dto.getSortOrder()).toUpperCase())) {
				sort = Sort.by(Direction.DESC, dto.getSortField());
			} else {
				sort = Sort.by(Direction.ASC, dto.getSortField());
			}
		}
		Pageable pageable = PageRequest.of(dto.getPageIndex(), dto.getPageSize(), sort);
		return QueryPageList(sql, countSql, pageable);
	}

	@Override
	public BasePage<Map<String, Object>> QueryNOPageList(String sql) {
		Query query = entityManager.createNativeQuery(sql);
		query.unwrap(NativeQueryImpl.class).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP); // 转换为map对象
		List<Map<String, Object>> rankEntities = query.getResultList();
		return new BasePageImpl(rankEntities);
	}

	/**
	 * 通过分页对象拼接Order by 片段
	 * 
	 * @param pageable
	 * @param sql
	 * @return
	 */
	private String joinOrderBy(Pageable pageable, String sql) {
		// 不存在分页语句就手动拼接,该处会将小写驼峰命名的字段转_小写，例如sqRq->sq_rq,如果排序报错请检查该处
		if (null != pageable && null != pageable.getSort()) {
			List<String> sorts = pageable.getSort()
					.map((order) -> ReUtil.replaceAll(order.getProperty(), "([A-Z])", "_$1").toLowerCase() + " "
							+ order.getDirection().name())
					.stream().collect(Collectors.toList());
			if (sorts.size() > 0) {
				int orderByIndex = ReUtil.replaceAll(sql.toLowerCase(), "\\s+", " ").lastIndexOf("order by");
				// 如果不存在order by关键词或者order by后没有“）”就会自动补充order by语句块
				if (orderByIndex < 0
						|| (orderByIndex >= 0 && sql.toLowerCase().lastIndexOf(")", orderByIndex) > orderByIndex)) {
					sql = sql += " order by " + ArrayUtil.join(sorts.toArray(), ",");
				} else {
					// 如果存在分页就追加
					sql += " , " + ArrayUtil.join(sorts.toArray(), ",");
				}
			}
		}
		return sql;
	}

	@Override
	public List<Map<String, Object>> QueryToMap(String sql) {
		Query q = createNativeQuery(sql);
		q.unwrap(NativeQueryImpl.class)
				.setResultTransformer(com.tengzhi.base.jpa.extension.Transformers.ALIAS_TO_CAMEL_ENTITY_MAP);
		return q.getResultList();
	}

	@Override
	public List<Map<String, Object>> QueryToMap(String sql, Object... params) {
		Query q = createNativeQuery(sql);
		if (params.length > 0) {
			for (int i = 0; i < params.length; i++) {
				q.setParameter((i + 1), params[i]);
			}
		}
		q.unwrap(NativeQueryImpl.class)
				.setResultTransformer(com.tengzhi.base.jpa.extension.Transformers.ALIAS_TO_CAMEL_ENTITY_MAP);
		return q.getResultList();
	}

	@Override
	public List<Map<String, Object>> QueryToMap(String sql, Map<String, Object> map) {
		Query q = createNativeQuery(sql);
		if (!map.isEmpty()) {
			for (String key : map.keySet()) {
				String value = map.get(key).toString();//
				q.setParameter(key, value);
			}
		}
		q.unwrap(NativeQueryImpl.class)
				.setResultTransformer(com.tengzhi.base.jpa.extension.Transformers.ALIAS_TO_CAMEL_ENTITY_MAP);
		return q.getResultList();
	}

	@Override
	public Map<String, Object> QueryToFirstMap(String sql) {
		Query q = createNativeQuery(sql);
		q.setMaxResults(1);
		q.unwrap(NativeQueryImpl.class)
				.setResultTransformer(com.tengzhi.base.jpa.extension.Transformers.ALIAS_TO_CAMEL_ENTITY_MAP);
		List<Map<String, Object>> list = q.getResultList();
		if (list != null && list.size() > 0) {
			return list.get(0);
		} else {
			return null;
		}
	}

	@Override
	public Map<String, Object> QueryToFirstMap(String sql, Object... params) {
		Query q = createNativeQuery(sql);
		q.setMaxResults(1);
		if (params.length > 0) {
			for (int i = 0; i < params.length; i++) {
				q.setParameter((i + 1), params[i]);
			}
		}
		q.unwrap(NativeQueryImpl.class)
				.setResultTransformer(com.tengzhi.base.jpa.extension.Transformers.ALIAS_TO_CAMEL_ENTITY_MAP);
		List<Map<String, Object>> list = q.getResultList();
		if (list != null && list.size() > 0) {
			return list.get(0);
		} else {
			return null;
		}
	}

	@Override
	public Map<String, Object> QueryToFirstMap(String sql, Map<String, Object> map) {
		Query q = createNativeQuery(sql);
		q.setMaxResults(1);
		if (!map.isEmpty()) {
			for (String key : map.keySet()) {
				String value = map.get(key).toString();//
				q.setParameter(key, value);
			}
		}
		q.unwrap(NativeQueryImpl.class)
				.setResultTransformer(com.tengzhi.base.jpa.extension.Transformers.ALIAS_TO_CAMEL_ENTITY_MAP);
		List<Map<String, Object>> list = q.getResultList();
		if (list != null && list.size() > 0) {
			return list.get(0);
		} else {
			return null;
		}
	}

	@Override
	public T QueryToFirstBean(String sql) {
		Query q = createNativeQuery(sql);
		q.setMaxResults(1);
		q.unwrap(NativeQueryImpl.class).setResultTransformer(new SelfResultTransformer(entityClass));
		List<T> list = q.getResultList();
		if (list != null && list.size() > 0) {
			return list.get(0);
		} else {
			return null;
		}
	}

	@Override
	public T QueryToFirstBean(String sql, Object... params) {
		Query q = createNativeQuery(sql);
		q.setMaxResults(1);
		if (params.length > 0) {
			for (int i = 0; i < params.length; i++) {
				q.setParameter((i + 1), params[i]);
			}
		}
		q.unwrap(NativeQueryImpl.class).setResultTransformer(new SelfResultTransformer(entityClass));
		List<T> list = q.getResultList();
		if (list != null && list.size() > 0) {
			return list.get(0);
		} else {
			return null;
		}
	}

	@Override
	public T QueryToFirstBean(String sql, Map<String, Object> map) {
		Query q = createNativeQuery(sql);
		q.setMaxResults(1);
		if (!map.isEmpty()) {
			for (String key : map.keySet()) {
				String value = map.get(key).toString();//
				q.setParameter(key, value);
			}
		}
		q.unwrap(NativeQueryImpl.class).setResultTransformer(new SelfResultTransformer(entityClass));
		List<T> list = q.getResultList();
		if (list != null && list.size() > 0) {
			return list.get(0);
		} else {
			return null;
		}
	}

	@Override
	public Class<?> QueryToFirstVo(String sql, Class<?> VO) {
		Query q = createNativeQuery(sql);
		q.setMaxResults(1);
		q.unwrap(NativeQueryImpl.class).setResultTransformer(new SelfResultTransformer(VO));
		List<T> list = q.getResultList();
		if (list != null && list.size() > 0) {
			return (Class<?>) list.get(0);
		} else {
			return null;
		}
	}

	@Override
	public Class<?> QueryToFirstVo(String sql, Class<?> VO, Object... params) {
		Query q = createNativeQuery(sql);
		q.setMaxResults(1);
		if (params.length > 0) {
			for (int i = 0; i < params.length; i++) {
				q.setParameter((i + 1), params[i]);
			}
		}
		q.unwrap(NativeQueryImpl.class).setResultTransformer(new SelfResultTransformer(VO));
		List<T> list = q.getResultList();
		if (list != null && list.size() > 0) {
			return (Class<?>) list.get(0);
		} else {
			return null;
		}
	}

	@Override
	public Class<?> QueryToFirstVo(String sql, Class<?> VO, Map<String, Object> map) {
		Query q = createNativeQuery(sql);
		q.setMaxResults(1);
		if (!map.isEmpty()) {
			for (String key : map.keySet()) {
				String value = map.get(key).toString();//
				q.setParameter(key, value);
			}
		}
		q.unwrap(NativeQueryImpl.class).setResultTransformer(new SelfResultTransformer(VO));
		List<T> list = q.getResultList();
		if (list != null && list.size() > 0) {
			return (Class<?>) list.get(0);
		} else {
			return null;
		}
	}

	@Override
	public String QueryFirstString(String sql) {
		Query q = createNativeQuery(sql);
		return (String) q.getSingleResult();
	}

	@Override
	public String QueryFirstString(String sql, Object... params) {
		Query q = createNativeQuery(sql);
		if (params.length > 0) {
			for (int i = 0; i < params.length; i++) {
				q.setParameter((i + 1), params[i]);
			}
		}
		return (String) q.getSingleResult();
	}

	@Override
	public String QueryFirstString(String sql, Map<String, Object> map) {
		Query q = createNativeQuery(sql);
		if (!map.isEmpty()) {
			for (String key : map.keySet()) {
				String value = map.get(key).toString();//
				q.setParameter(key, value);
			}
		}
		return (String) q.getSingleResult();
	}

	@Override
	public BasePage<Map<String, Object>> QueryToMapPage(BaseDto dto, String sql) {
		Sort sort = null;
		Pageable pageable = null;
		List<String> fieldList = Arrays.stream(StrUtil.nullToDefault(dto.getSortField(), "").split(","))
				.filter(s -> StringUtils.isNotBlank(s)).collect(Collectors.toList());
		if (fieldList.size() > 0) {
			if (Direction.DESC.name().equals(String.valueOf(dto.getSortOrder()).toUpperCase())) {
				sort = Sort.by(Direction.DESC, fieldList.toArray(new String[fieldList.size()]));
			} else {
				sort = Sort.by(Direction.ASC, fieldList.toArray(new String[fieldList.size()]));
			}
			pageable = PageRequest.of(dto.getPageIndex(), dto.getPageSize(), sort);
		} else {
			pageable = PageRequest.of(dto.getPageIndex(), dto.getPageSize());
		}
		sql = joinOrderBy(pageable, sql);
		Query query = entityManager.createNativeQuery(sql);
		query.unwrap(NativeQueryImpl.class)
				.setResultTransformer(com.tengzhi.base.jpa.extension.Transformers.ALIAS_TO_CAMEL_ENTITY_MAP);
		query.setFirstResult((int) pageable.getOffset());
		query.setMaxResults(pageable.getPageSize());
		List<T> rankEntities = query.getResultList();
		Query countQuery = entityManager.createNativeQuery("select count(*) from(" + sql + ")x");
		BigInteger totalCount = (BigInteger) countQuery.getSingleResult();
		Page<T> page = new PageImpl<T>(rankEntities, pageable, totalCount.longValue());
		return new BasePageImpl(page.getContent(), page.getPageable(), page.getTotalElements());
	}

	@Override
	public BasePage<Map<String, Object>> QueryToMapPage(BaseDto dto, String sql, Object... params) {
		Sort sort = null;
		Pageable pageable = null;
		List<String> fieldList = Arrays.stream(StrUtil.nullToDefault(dto.getSortField(), "").split(","))
				.filter(s -> StringUtils.isNotBlank(s)).collect(Collectors.toList());
		if (fieldList.size() > 0) {
			if (Direction.DESC.name().equals(String.valueOf(dto.getSortOrder()).toUpperCase())) {
				sort = Sort.by(Direction.DESC, fieldList.toArray(new String[fieldList.size()]));
			} else {
				sort = Sort.by(Direction.ASC, fieldList.toArray(new String[fieldList.size()]));
			}
			pageable = PageRequest.of(dto.getPageIndex(), dto.getPageSize(), sort);
		} else {
			pageable = PageRequest.of(dto.getPageIndex(), dto.getPageSize());
		}
		sql = joinOrderBy(pageable, sql);
		Query query = entityManager.createNativeQuery(sql);
		if (params.length > 0) {
			for (int i = 0; i < params.length; i++) {
				query.setParameter((i + 1), params[i]);
			}
		}
		query.unwrap(NativeQueryImpl.class)
				.setResultTransformer(com.tengzhi.base.jpa.extension.Transformers.ALIAS_TO_CAMEL_ENTITY_MAP);
		query.setFirstResult((int) pageable.getOffset());
		query.setMaxResults(pageable.getPageSize());
		List<T> rankEntities = query.getResultList();
		Query countQuery = entityManager.createNativeQuery("select count(*) from(" + sql + ")x");
		BigInteger totalCount = (BigInteger) countQuery.getSingleResult();
		Page<T> page = new PageImpl<T>(rankEntities, pageable, totalCount.longValue());
		return new BasePageImpl(page.getContent(), page.getPageable(), page.getTotalElements());
	}

	@Override
	public BasePage<Map<String, Object>> QueryToMapPage(BaseDto dto, String sql, Map<String, Object> map) {
		Sort sort = null;
		Pageable pageable = null;
		List<String> fieldList = Arrays.stream(StrUtil.nullToDefault(dto.getSortField(), "").split(","))
				.filter(s -> StringUtils.isNotBlank(s)).collect(Collectors.toList());
		if (fieldList.size() > 0) {
			if (Direction.DESC.name().equals(String.valueOf(dto.getSortOrder()).toUpperCase())) {
				sort = Sort.by(Direction.DESC, fieldList.toArray(new String[fieldList.size()]));
			} else {
				sort = Sort.by(Direction.ASC, fieldList.toArray(new String[fieldList.size()]));
			}
			pageable = PageRequest.of(dto.getPageIndex(), dto.getPageSize(), sort);
		} else {
			pageable = PageRequest.of(dto.getPageIndex(), dto.getPageSize());
		}
		sql = joinOrderBy(pageable, sql);
		Query query = entityManager.createNativeQuery(sql);
		if (!map.isEmpty()) {
			for (String key : map.keySet()) {
				String value = map.get(key).toString();//
				query.setParameter(key, value);
			}
		}
		query.unwrap(NativeQueryImpl.class)
				.setResultTransformer(com.tengzhi.base.jpa.extension.Transformers.ALIAS_TO_CAMEL_ENTITY_MAP);
		query.setFirstResult((int) pageable.getOffset());
		query.setMaxResults(pageable.getPageSize());
		List<T> rankEntities = query.getResultList();
		Query countQuery = entityManager.createNativeQuery("select count(*) from(" + sql + ")x");
		BigInteger totalCount = (BigInteger) countQuery.getSingleResult();
		Page<T> page = new PageImpl<T>(rankEntities, pageable, totalCount.longValue());
		return new BasePageImpl(page.getContent(), page.getPageable(), page.getTotalElements());
	}

	@Override
	public BasePage<?> QueryToVoPage(Class<?> vo, BaseDto dto, String sql) {
		Sort sort = null;
		Pageable pageable = null;
		List<String> fieldList = Arrays.stream(StrUtil.nullToDefault(dto.getSortField(), "").split(","))
				.filter(s -> StringUtils.isNotBlank(s)).collect(Collectors.toList());
		if (fieldList.size() > 0) {
			if (Direction.DESC.name().equals(String.valueOf(dto.getSortOrder()).toUpperCase())) {
				sort = Sort.by(Direction.DESC, fieldList.toArray(new String[fieldList.size()]));
			} else {
				sort = Sort.by(Direction.ASC, fieldList.toArray(new String[fieldList.size()]));
			}
			pageable = PageRequest.of(dto.getPageIndex(), dto.getPageSize(), sort);
		} else {
			pageable = PageRequest.of(dto.getPageIndex(), dto.getPageSize());
		}
		sql = joinOrderBy(pageable, sql);
		Query query = entityManager.createNativeQuery(sql);
		query.unwrap(NativeQueryImpl.class).setResultTransformer(new SelfResultTransformer(vo));
		query.setFirstResult((int) pageable.getOffset());
		query.setMaxResults(pageable.getPageSize());
		List<T> rankEntities = query.getResultList();
		Query countQuery = entityManager.createNativeQuery("select count(*) from(" + sql + ")x");
		BigInteger totalCount = (BigInteger) countQuery.getSingleResult();
		Page<T> page = new PageImpl<T>(rankEntities, pageable, totalCount.longValue());
		return new BasePageImpl(page.getContent(), page.getPageable(), page.getTotalElements());
	}

	@Override
	public BasePage<?> QueryToVoPage(Class<?> vo, BaseDto dto, String sql, Object... params) {
		Sort sort = null;
		Pageable pageable = null;
		List<String> fieldList = Arrays.stream(StrUtil.nullToDefault(dto.getSortField(), "").split(","))
				.filter(s -> StringUtils.isNotBlank(s)).collect(Collectors.toList());
		if (fieldList.size() > 0) {
			if (Direction.DESC.name().equals(String.valueOf(dto.getSortOrder()).toUpperCase())) {
				sort = Sort.by(Direction.DESC, fieldList.toArray(new String[fieldList.size()]));
			} else {
				sort = Sort.by(Direction.ASC, fieldList.toArray(new String[fieldList.size()]));
			}
			pageable = PageRequest.of(dto.getPageIndex(), dto.getPageSize(), sort);
		} else {
			pageable = PageRequest.of(dto.getPageIndex(), dto.getPageSize());
		}
		sql = joinOrderBy(pageable, sql);
		Query query = entityManager.createNativeQuery(sql);
		if (params.length > 0) {
			for (int i = 0; i < params.length; i++) {
				query.setParameter((i + 1), params[i]);
			}
		}
		query.unwrap(NativeQueryImpl.class).setResultTransformer(new SelfResultTransformer(vo));
		query.setFirstResult((int) pageable.getOffset());
		query.setMaxResults(pageable.getPageSize());
		List<T> rankEntities = query.getResultList();
		Query countQuery = entityManager.createNativeQuery("select count(*) from(" + sql + ")x");
		BigInteger totalCount = (BigInteger) countQuery.getSingleResult();
		Page<T> page = new PageImpl<T>(rankEntities, pageable, totalCount.longValue());
		return new BasePageImpl(page.getContent(), page.getPageable(), page.getTotalElements());
	}

	@Override
	public BasePage<?> QueryToVoPage(Class<?> vo, BaseDto dto, String sql, Map<String, Object> map) {
		Sort sort = null;
		Pageable pageable = null;
		List<String> fieldList = Arrays.stream(StrUtil.nullToDefault(dto.getSortField(), "").split(","))
				.filter(s -> StringUtils.isNotBlank(s)).collect(Collectors.toList());
		if (fieldList.size() > 0) {
			if (Direction.DESC.name().equals(String.valueOf(dto.getSortOrder()).toUpperCase())) {
				sort = Sort.by(Direction.DESC, fieldList.toArray(new String[fieldList.size()]));
			} else {
				sort = Sort.by(Direction.ASC, fieldList.toArray(new String[fieldList.size()]));
			}
			pageable = PageRequest.of(dto.getPageIndex(), dto.getPageSize(), sort);
		} else {
			pageable = PageRequest.of(dto.getPageIndex(), dto.getPageSize());
		}
		sql = joinOrderBy(pageable, sql);
		Query query = entityManager.createNativeQuery(sql);
		if (!map.isEmpty()) {
			for (String key : map.keySet()) {
				String value = map.get(key).toString();//
				query.setParameter(key, value);
			}
		}
		query.unwrap(NativeQueryImpl.class).setResultTransformer(new SelfResultTransformer(vo));
		query.setFirstResult((int) pageable.getOffset());
		query.setMaxResults(pageable.getPageSize());
		List<T> rankEntities = query.getResultList();
		Query countQuery = entityManager.createNativeQuery("select count(*) from(" + sql + ")x");
		BigInteger totalCount = (BigInteger) countQuery.getSingleResult();
		Page<T> page = new PageImpl<T>(rankEntities, pageable, totalCount.longValue());
		return new BasePageImpl(page.getContent(), page.getPageable(), page.getTotalElements());
	}

	@Override
	public BasePage<T> QueryToBeanPage(BaseDto dto, String sql) {

		Sort sort = null;
		Pageable pageable = null;
		List<String> fieldList = Arrays.stream(StrUtil.nullToDefault(dto.getSortField(), "").split(","))
				.filter(s -> StringUtils.isNotBlank(s)).collect(Collectors.toList());
		if (fieldList.size() > 0) {
			if (Direction.DESC.name().equals(String.valueOf(dto.getSortOrder()).toUpperCase())) {
				sort = Sort.by(Direction.DESC, fieldList.toArray(new String[fieldList.size()]));
			} else {
				sort = Sort.by(Direction.ASC, fieldList.toArray(new String[fieldList.size()]));
			}
			pageable = PageRequest.of(dto.getPageIndex(), dto.getPageSize(), sort);
		} else {
			pageable = PageRequest.of(dto.getPageIndex(), dto.getPageSize());
		}
		sql = joinOrderBy(pageable, sql);
		Query query = entityManager.createNativeQuery(sql);
		query.unwrap(NativeQueryImpl.class).setResultTransformer(new SelfResultTransformer(entityClass));
		query.setFirstResult((int) pageable.getOffset());
		query.setMaxResults(pageable.getPageSize());
		List<T> rankEntities = query.getResultList();
		Query countQuery = entityManager.createNativeQuery("select count(*) from(" + sql + ")x");
		BigInteger totalCount = (BigInteger) countQuery.getSingleResult();
		Page<T> page = new PageImpl<T>(rankEntities, pageable, totalCount.longValue());
		return new BasePageImpl(page.getContent(), page.getPageable(), page.getTotalElements());
	}

	@Override
	public BasePage<T> QueryToBeanPage(BaseDto dto, String sql, Object... params) {
		Sort sort = null;
		Pageable pageable = null;
		List<String> fieldList = Arrays.stream(StrUtil.nullToDefault(dto.getSortField(), "").split(","))
				.filter(s -> StringUtils.isNotBlank(s)).collect(Collectors.toList());
		if (fieldList.size() > 0) {
			if (Direction.DESC.name().equals(String.valueOf(dto.getSortOrder()).toUpperCase())) {
				sort = Sort.by(Direction.DESC, fieldList.toArray(new String[fieldList.size()]));
			} else {
				sort = Sort.by(Direction.ASC, fieldList.toArray(new String[fieldList.size()]));
			}
			pageable = PageRequest.of(dto.getPageIndex(), dto.getPageSize(), sort);
		} else {
			pageable = PageRequest.of(dto.getPageIndex(), dto.getPageSize());
		}
		sql = joinOrderBy(pageable, sql);
		Query query = entityManager.createNativeQuery(sql);
		if (params.length > 0) {
			for (int i = 0; i < params.length; i++) {
				query.setParameter((i + 1), params[i]);
			}
		}
		query.unwrap(NativeQueryImpl.class).setResultTransformer(new SelfResultTransformer(entityClass));
		query.setFirstResult((int) pageable.getOffset());
		query.setMaxResults(pageable.getPageSize());
		List<T> rankEntities = query.getResultList();
		Query countQuery = entityManager.createNativeQuery("select count(*) from(" + sql + ")x");
		BigInteger totalCount = (BigInteger) countQuery.getSingleResult();
		Page<T> page = new PageImpl<T>(rankEntities, pageable, totalCount.longValue());
		return new BasePageImpl(page.getContent(), page.getPageable(), page.getTotalElements());
	}

	@Override
	public BasePage<T> QueryToBeanPage(BaseDto dto, String sql, Map<String, Object> map) {
		Sort sort = null;
		Pageable pageable = null;
		List<String> fieldList = Arrays.stream(StrUtil.nullToDefault(dto.getSortField(), "").split(","))
				.filter(s -> StringUtils.isNotBlank(s)).collect(Collectors.toList());
		if (fieldList.size() > 0) {
			if (Direction.DESC.name().equals(String.valueOf(dto.getSortOrder()).toUpperCase())) {
				sort = Sort.by(Direction.DESC, fieldList.toArray(new String[fieldList.size()]));
			} else {
				sort = Sort.by(Direction.ASC, fieldList.toArray(new String[fieldList.size()]));
			}
			pageable = PageRequest.of(dto.getPageIndex(), dto.getPageSize(), sort);
		} else {
			pageable = PageRequest.of(dto.getPageIndex(), dto.getPageSize());
		}
		sql = joinOrderBy(pageable, sql);
		Query query = entityManager.createNativeQuery(sql);
		if (!map.isEmpty()) {
			for (String key : map.keySet()) {
				String value = map.get(key).toString();//
				query.setParameter(key, value);
			}
		}
		query.unwrap(NativeQueryImpl.class).setResultTransformer(new SelfResultTransformer(entityClass));
		query.setFirstResult((int) pageable.getOffset());
		query.setMaxResults(pageable.getPageSize());
		List<T> rankEntities = query.getResultList();
		Query countQuery = entityManager.createNativeQuery("select count(*) from(" + sql + ")x");
		BigInteger totalCount = (BigInteger) countQuery.getSingleResult();
		Page<T> page = new PageImpl<T>(rankEntities, pageable, totalCount.longValue());
		return new BasePageImpl(page.getContent(), page.getPageable(), page.getTotalElements());
	}
}
