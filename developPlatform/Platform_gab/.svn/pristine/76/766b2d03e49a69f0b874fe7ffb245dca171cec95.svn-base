package com.tengzhi.business.platform.common.contorller;


import cn.hutool.core.util.ObjectUtil;
import com.tengzhi.base.jpa.result.Result;
import com.tengzhi.base.security.common.annotations.Anonymous;
import com.tengzhi.base.security.common.model.SessionUser;
import com.tengzhi.base.security.common.property.detail.SecurityProperty;
import com.tengzhi.business.platform.common.model.RegionVo;
import com.tengzhi.business.platform.common.service.OperatorService;
import com.tengzhi.business.platform.common.vo.ExpertVo;
import com.tengzhi.business.platform.enroll.constant.GabUserTypeEnum;
import com.tengzhi.business.platform.enroll.dao.GUserInfoDao;
import com.tengzhi.business.platform.enroll.model.GUserInfo;
import com.tengzhi.business.platform.enroll.service.ExpertService;
import com.tengzhi.business.platform.enroll.service.GUserInfoService;
import com.tengzhi.business.platform.enroll.service.PersonalService;
import com.tengzhi.business.platform.enroll.service.SupplyService;
import com.tengzhi.business.platform.manage.service.ServiceManageService;
import com.tengzhi.business.platform.manage.vo.serviceVo;
import com.tengzhi.business.platform.quotation.service.QuotationService;
import com.tengzhi.business.platform.quotation.vo.QuotationVo;
import com.tengzhi.business.platform.specialist.advisory.service.AdvisorysService;
import com.tengzhi.business.platform.specialist.chamberactivities.service.ChamberActivitiesService;
import com.tengzhi.business.platform.specialist.need.service.NeedService;
import com.tengzhi.business.platform.specialist.need.vo.needVo;
import com.tengzhi.business.platform.specialist.product.model.Jscpcode;
import com.tengzhi.business.platform.specialist.product.service.ProductService;
import com.tengzhi.business.resouces.vo.SelectVo;
import com.tengzhi.business.system.params.service.SysParamService;
import com.tengzhi.business.system.user.service.LoginService;
import org.apache.catalina.servlet4preview.http.HttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.annotation.Secured;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.view.RedirectView;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("gab")
public class OperatorController {

    @Autowired
    private OperatorService OperatorService;

    @Autowired
    private NeedService needService;

    @Autowired
    private ProductService productService;

    @Autowired
    private SupplyService supplyService;

    @Autowired
    private AdvisorysService advisorysService;

    @Autowired
    private ChamberActivitiesService chamberActivitiesService;

    @Autowired
    LoginService loginService;

    @Autowired
    private ServiceManageService serviceManageService;

    @Autowired
    private QuotationService quotationService;

    @Autowired
    SecurityProperty securityProperty;
    @Autowired
    private PersonalService personalService;
    @Autowired
    private ExpertService expertService;

    @Autowired
    private OperatorService operatorService;
    @Autowired
    private GUserInfoService  gUserInfoService;

    /**
     * gab目录下的模板文件可以直接访问
     *
     * @param mv
     * @return
     */
    @GetMapping(value = "/*.html", produces = "text/html")
    @Anonymous
    public ModelAndView pageForwartAnonymousAccess(ModelAndView mv) {
        return mv;
    }

    /**
     * 模板文件可以提供公开访问
     *
     * @param mv
     * @return
     */
    @GetMapping(value = {"/common/*.html", "/layout/*.html"}, produces = "text/html")
    @Anonymous
    public ModelAndView pageForwartLayoutAndCommon(ModelAndView mv) {
        return mv;
    }

    /**
     * gab目录下的子级目录中的文件
     * 该目录下需要拥有哥爱帮权限才能允许访问
     * @param mv
     * @return
     */
    @GetMapping(value = "/**/*.html", produces = "text/html")
    @Secured("ROLE_GAB_USER") //对应AuthorityRoleEnum中的角色
    public ModelAndView pageForwartPermissionRequired(ModelAndView mv) {
        return mv;
    }

    /**
     * 需求发布页面
     * 该目录下需要拥有ERP权限才能允许访问
     * @param mv
     * @return
     */
    @GetMapping(value = "/demand/*.html",produces = "text/html")
    @Secured("ROLE_PLATFORM_USER")
    public ModelAndView requirement(ModelAndView mv) {
        return mv;
    }

    /**
     * 该地址配置在security.yml中，发生403错误时候跳转至该页面
     * 通过不同的权限情况跳转至不同的登录页面
     *
     * @param request
     * @param rv 转发视图
     * @return
     */
    @GetMapping(value = "/403", produces = "text/html")
    @Anonymous
    public RedirectView pageForwart404(HttpServletRequest request, RedirectView rv) {
        if (null == SessionUser.SessionUser()) {
            //用户未登录
            System.err.println("用户未登录");
            rv.setUrl(securityProperty.getBrowser().getLoginPage());
        } else {
            SessionUser sessionUser = SessionUser.SessionUser();
            if (ObjectUtil.isNotNull(sessionUser.getSysUser()) && ObjectUtil.isNull(sessionUser.getgUserInfo())) {
                //用户为平台用户而非哥爱帮用户
                System.err.println("用户为平台用户而非哥爱帮用户");
                rv.setUrl(securityProperty.getBrowser().getLoginPage());
            } else if (ObjectUtil.isNotNull(sessionUser.getgUserInfo()) && ObjectUtil.isNull(sessionUser.getSysUser())) {
                //用户为哥爱帮用户而非平台用户
                System.err.println("用户为哥爱帮用户而非平台用户");
                rv.setUrl(securityProperty.getBrowser().getLoginPage());
            }
        }
        return rv;
    }

    @GetMapping("all.html")
    @Anonymous
    public ModelAndView pageAll(ModelAndView mv, @RequestParam("cur") String cur) {

        mv.addObject("cur", cur);
        return mv;
    }

    /**
     * 厂商分页查询
     */
    @GetMapping("allChange/{cur}/{pageSize}/{pageIndex}")
    @Anonymous
    public Map<String, Object> allChange(@PathVariable String cur, @PathVariable String pageSize, @PathVariable String pageIndex) {
        return supplyService.getAll(cur, pageSize, pageIndex, "all");
    }

    /**
     * 厂商名字搜索查询
     */
    @PostMapping("searchByName")
    @Anonymous
    public Map<String, Object> allChangeByName(@RequestParam String cur, @RequestParam String pageSize, @RequestParam String pageIndex, @RequestParam String searchs) {
        return supplyService.getAll(cur, pageSize, pageIndex, "searchName", searchs);
    }

    @PostMapping("searchByHotWords")
    @Anonymous
    public Map<String, Object> searchByHotWords(@RequestParam String cur, @RequestParam String pageSize, @RequestParam String pageIndex, @RequestParam String hotWords) {
        return supplyService.getAll(cur, pageSize, pageIndex, "SearchHotWords", hotWords);

    }


    /**
     * 产品需求发布
     */
    @PostMapping(value = "saveNeed")
    public Result saveNeed(@RequestBody needVo needVo) throws Exception {
        return needService.saveNeed(needVo);
    }

    /**
     * 服务需求发布
     */
    @PostMapping(value = "saveService")
    public Result saveService(@RequestBody serviceVo serviceVo) throws Exception {
        return serviceManageService.saveService(serviceVo);
    }

    /**
     * 需求市场查询
     */
    @PostMapping("getNeed")
    @Anonymous
    public List<Map<String, Object>> getNeed(@RequestParam String type, @RequestParam String value) throws IOException {
        return needService.getNeed(type, value, "CP");
    }

    /**
     * 需求市场分页查询
     *
     * @throws Exception
     */
    @PostMapping("getNeedPaging")
    @Anonymous
    public Map<String, Object> getNeedPaging(@RequestParam String params, @RequestParam String pageIndex, @RequestParam String pageSize) throws Exception {
        return needService.getNeedPaging(params, pageIndex, pageSize);
    }

    /**
     * 产品市场分页查询
     *
     * @throws Exception
     */
    @PostMapping("getProductPaging")
    @Anonymous
    public Map<String, Object> getProductPaging(@RequestParam String params, @RequestParam String pageIndex, @RequestParam String pageSize) throws Exception {
        return productService.getProductPaging(params, pageIndex, pageSize);
    }

    /**
     * 需求市场详情
     *
     * @throws IOException
     */
    @GetMapping("needs.html")
    @Anonymous
    public ModelAndView needs(ModelAndView mv, @RequestParam("") String needNote) throws IOException {
        Map<String, Object> need = needService.getNeed("needNote", needNote, "").get(0);
        mv.addObject("Need", need);
        if (need.get("cpcodeFl") != null) {
            List<Map<String, Object>> TypeNeed = needService.getTypeNeed(need.get("cpcodeFl").toString(), need.get("needNote").toString());
            mv.addObject("TypeRecommend", TypeNeed);
            mv.addObject("TypeRecommendSize", TypeNeed.size());
        }
//		if(need.get("needFirm")!=null) {
        if (need.get("needFirm") == null) {
//			List<Map<String,Object>> FirmNeed = needService.getFirmNeed(need.get("needFirm").toString());
            List<Map<String, Object>> FirmNeed = needService.getFirmNeed("夹具厂商");
            mv.addObject("FirmRecommend", FirmNeed);
            mv.addObject("FirmRecommendSize", FirmNeed.size());
        }
        if (need.get("dataMan") != null) {
            List<Map<String, Object>> manNeed = needService.getNeedByDataMan(need.get("dataMan").toString(), need.get("needNote").toString());
            mv.addObject("manNeed", manNeed);
            mv.addObject("manNeedSize", manNeed.size());
        }
        return mv;
    }

    @Autowired
    public SysParamService sysParamService;

    /**
     * 产品市场详情
     *
     * @throws IOException
     */
    @GetMapping("supplyProDetails.html")
    @Anonymous
    public ModelAndView supplyProDetails(ModelAndView mv, @RequestParam("productNote") String productNote) throws IOException {
        Map<String, Object> product = productService.getProduct(productNote);
        mv.addObject("Product", product);
        String dataMan = product.get("dataMan").toString();
        String guserInfoId = operatorService.getGuserInfoId(dataMan);
//        String sql = "select supply_id from sys_user where user_id='" + product.get("dataMan") + "'";
//        String supplyId = productService.supplyId(sql);
        if (guserInfoId != null) {
            Map<String, Object> supply = supplyService.getSupplyById(guserInfoId);
            if (supply != null) {
                mv.addObject("Supply", supply);
            }
        }
        Result result = sysParamService.getByAddName("CP");
        Map<String, Object> maps = (Map<String, Object>) result.get("data");
        mv.addObject("product", maps);
        if (product.get("dataCorp") != null) {
            List<Map<String, Object>> advisory = advisorysService.getAdvisoryClassify("技术案例", "9", product.get("dataCorp").toString());
            mv.addObject("Advisory", advisory);
        }
        return mv;
    }

    /**
     * 根据类型获取专家信息
     *
     * @param cur       专家的类型 默认值Team 查询所有专家数据
     * @param pageSize  每页数据条数
     * @param pageIndex 页码
     * @return
     */
    @GetMapping("getSrchExpertTeam/{cur}/{pageSize}/{pageIndex}")
    @Anonymous
    public Map<String, Object> getSrchExpertTeam(@PathVariable String cur, @PathVariable String pageSize, @PathVariable String pageIndex) {
        return supplyService.getSrchExpertTeam(cur, pageSize, pageIndex);
    }

    /**
     * 根据参数（工作年限、等级）获取专家信息
     */

    @PostMapping("getExperTeamByParam")
    @Anonymous
    public Map<String, Object> getExperTeamByParam(@RequestBody List<ExpertVo> expertsVo) {
        return supplyService.getExpertTeamByParam(expertsVo);

    }


    /**
     * 搜索框
     */
    @PostMapping("getExperTeamByWords")
    @Anonymous
    public Map<String, Object> getExperTeamByWords(@RequestParam String keyWords) {
        return supplyService.getExpertTeamBykeyWords(keyWords);

    }

    @GetMapping("getByidExpert{id}")
    @Anonymous
    public Map<String, Object> getByidExpert(@RequestParam String id) {
        return supplyService.getByidExpert(id);
    }

    @GetMapping("getRandomExpert")
    @Anonymous
    public Map<String, Object> getRandomExpert() {
        return supplyService.getRandomExpert();
    }

    /**
     * 供应商详情页获取对应的案例
     */
    @GetMapping("getAdvisory/{supplyUid}")
    @Anonymous
    public Map<String, Object> getAdvisory(@PathVariable String supplyUid) {
        return supplyService.getAdvisory(supplyUid);
    }

    /**
     * 首页获取商会活动数据
     */
    @PostMapping("getgChamberActivities")
    @Anonymous
    public List<Map<String, Object>> getgChamberActivities() {
        return chamberActivitiesService.getgChamberActivities();
    }

    /**
     * share.html分页数据
     */
    @PostMapping("getShare")
    @Anonymous
    public Map<String, Object> getShare(@RequestParam String classify, @RequestParam String pageIndex, @RequestParam String pageSize) {
        if (classify.equals("商会活动")) {
            return chamberActivitiesService.getChamberActivities(pageSize, pageIndex);
        }
        return advisorysService.getAdvisoryPage(classify, pageSize, pageIndex);
    }

    @PostMapping("getAdvisory")
    @Anonymous
    public Map<String, Object> getAdvisory() {
        return advisorysService.getAdvisory(8);
    }

    /**
     * academic.html数据获取
     */
    @PostMapping("getAcademic")
    @Anonymous
    public Map<String, Object> getAcademic(@RequestParam("reqId") String reqId, @RequestParam("type") String type) {
        Map<String, Object> rmap = OperatorService.getAcademic(reqId, type);
        return rmap;
    }

    /**
     * academic.html数据获取
     */
    @PostMapping("getSupply")
    @Anonymous
    public List<Map<String, Object>> getSupply(@RequestParam("supplyType") String supplyType) {
        return supplyService.getSupply(supplyType);
    }


    /**
     * info.html数据获取
     */
    @PostMapping("getInfo")
    @Anonymous
    public Map<String, Object> getInfo() {
        Map<String, Object> rmap = new HashMap<String, Object>();
        rmap.put("chamberActivities", chamberActivitiesService.getLimit("4"));
        rmap.put("industryDynamics", advisorysService.getAdvisory(4).get("industryDynamics"));
        return rmap;
    }

    /**
     * 供应商详情
     */
    @GetMapping("supply.html")
    @Anonymous
    public ModelAndView supply(ModelAndView mv, @RequestParam("supplyNote") String supplyNote) {
        Map<String, Object> supply = supplyService.getSupplyById(supplyNote);
        List<Map<String, Object>> supplyProduct = productService.getSupplyProduct(supplyNote);
        if (supplyProduct.size() > 0) {
            mv.addObject("Product", supplyProduct);
        }
        mv.addObject("Supply", supply);
        return mv;

    }

    //此接口未调用，待确认后删除

    @GetMapping("order.html")
    public ModelAndView order(ModelAndView mv, @RequestParam("productId") String productId) {

        //获取单个产品信息
        Map<String, Object> product = productService.getProduct(productId);
        mv.addObject("product", product);

        //获取供应商信息
        String sql = "select supply_id from sys_user where user_id='" + product.get("dataMan") + "'";
        String supplyId = productService.supplyId(sql);
        if (supplyId != null) {
            Map<String, Object> supply = supplyService.getSupplyById(supplyId);
            mv.addObject("provider", supply);
        }

        //获取动态列名信息
        Result result = sysParamService.getByAddName("CP");
        Map<String, Object> maps = (Map<String, Object>) result.get("data");
        mv.addObject("dynamicProduct", maps);

        return mv;

    }


    @Anonymous
    @PostMapping(value = "expertCaseDetail")
    public Result expertalone(@RequestParam String id) {
        return Result.resultOk(advisorysService.expertCaseDetail(id));
    }

    /**
     * 立即报价
     */
    @PostMapping("saveOffer")
    public Result saveOffer(@RequestBody QuotationVo quotationVo) {
        return quotationService.saveOffer(quotationVo);
    }

    /**
     * 立即报价
     */
    @GetMapping("getRegion")
    @Anonymous
    public List<RegionVo> saveOffer() {
        return OperatorService.getRegion();
    }

/*	@GetMapping(value = "getAllLikeSearch/{SearchKeyword}")
public Result getAllLikeSearch(@PathVariable String SearchKeyword){
return OperatorService.getAllLikeSearch(SearchKeyword);
}

*/


    //以下请求页面需用户登录才能访问--------------


    /**
     * 查看订单详情页面
     */
    @GetMapping("manage/ownOrders.html")
    public ModelAndView ownOrders(ModelAndView mv) {
        List<Map<String, Object>> userOrders = OperatorService.getUserOrders();

        mv.addObject("myOrders", userOrders);
        return mv;
    }

    /**
     * 查看购物车详情页面
     */
    @GetMapping(value = "manage/shoppingCart.html")
    public ModelAndView shoppingCart(ModelAndView mv) {
        return mv;
    }

    /**
     * 购物车结算页面
     */
    @GetMapping(value = "manage/orderSure.html")
    public ModelAndView orderSure(ModelAndView mv) {
        return mv;
    }

    /**
     * 查看评价详情页面
     */
    @GetMapping("manage/comment.html")
    public ModelAndView getEvaluation(ModelAndView mv, @RequestParam("productId") String productId) {
        Jscpcode productById = OperatorService.getProductById(productId);
        mv.addObject("product", productById);
        return mv;
    }

    @GetMapping(value = "combobox/getProvince")
    public List<SelectVo> getProvince() {
        return operatorService.getProvince();
    }

    @GetMapping(value = "combobox/getCity/{city}")
    public List<SelectVo> getCity(@PathVariable String city) {
        return operatorService.getCity(city);
    }

    @GetMapping(value = "combobox/getArea/{city}/{area}")
    public List<SelectVo> getArea(@PathVariable String city, @PathVariable String area) {
        return operatorService.getArea(city, area);
    }



    @GetMapping("/manage/corporateCertification.html")
    @Anonymous
    public ModelAndView corporateCertification(ModelAndView mv) {
        SessionUser sessionUser=SessionUser.SessionUser();
   if(sessionUser != null){
       GUserInfo gUserInfo =  sessionUser.getgUserInfo();
       if(gUserInfo.getUserType().equals(GabUserTypeEnum.供应厂商.getName())){
           Map<String, Object> status = supplyService.getSupplyStatus(gUserInfo.getUserId());
           Map<String ,Object> flag  = gUserInfoService.getIsSubmitApprove();
           mv.addObject("isapprove",flag);
           mv.addObject("approve", status);
       }else if(gUserInfo.getUserType().equals(GabUserTypeEnum.需求用户.getName())){
           Map<String, Object> status = personalService.getPersonalStatus(gUserInfo.getUserId());
           Map<String ,Object> flag  = gUserInfoService.getIsSubmitApprove();
           mv.addObject("isapprove",flag);
           mv.addObject("approve", status);
       }else{

       }

   }else {
       mv.addObject("approve", null);
   }

        return mv;

    }



    @GetMapping("/manage/accountAuthentication.html")
    @Anonymous
    public ModelAndView accountAuthentication(ModelAndView mv) {
        SessionUser sessionUser=SessionUser.SessionUser();
        if(sessionUser != null){
            GUserInfo gUserInfo =  sessionUser.getgUserInfo();
            Map<String, Object> status =expertService.getExpetStatus(gUserInfo.getUserId());
            status.put("isapprove",gUserInfoService.getIsSubmitApprove()) ;
            mv.addObject("isapprove",gUserInfoService.getIsSubmitApprove());
            mv.addObject("approve", status);

        }else {
            mv.addObject("approve", null);
        }

        return mv;

    }



}
