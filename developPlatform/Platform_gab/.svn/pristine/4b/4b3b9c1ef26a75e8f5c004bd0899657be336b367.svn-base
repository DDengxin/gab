package com.tengzhi.business.platform.common.contorller;


import com.tengzhi.base.jpa.dto.BaseDto;
import com.tengzhi.base.jpa.result.Result;
import com.tengzhi.base.security.common.annotations.Anonymous;
import com.tengzhi.base.security.common.model.SessionUser;
import com.tengzhi.business.platform.common.dao.RegionSqlDao;
import com.tengzhi.business.platform.common.model.RegionVo;
import com.tengzhi.business.platform.common.service.OperatorService;
import com.tengzhi.business.platform.common.vo.ExpertVo;
import com.tengzhi.business.platform.enroll.service.SupplyService;
import com.tengzhi.business.platform.manage.service.ServiceManageService;
import com.tengzhi.business.platform.manage.vo.serviceVo;
import com.tengzhi.business.platform.quotation.service.QuotationService;
import com.tengzhi.business.platform.quotation.vo.QuotationVo;
import com.tengzhi.business.platform.specialist.advisory.service.AdvisorysService;
import com.tengzhi.business.platform.specialist.chamberactivities.service.chamberActivitiesService;
import com.tengzhi.business.platform.specialist.need.service.NeedService;
import com.tengzhi.business.platform.specialist.need.vo.needVo;
import com.tengzhi.business.platform.specialist.product.service.ProductService;
import com.tengzhi.business.system.params.service.SysParamService;
import com.tengzhi.business.system.user.service.LoginService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("gab")
public class Operator {
	@Autowired
	private RegionSqlDao regionSqlDao;
	
	@Autowired
	private OperatorService OperatorService;
	
	@Autowired
	private NeedService needService;
	
	@Autowired
	private ProductService productService;
	
	@Autowired
	private SupplyService supplyService;
	
	@Autowired
	private AdvisorysService advisorysService;
	
	@Autowired
	private chamberActivitiesService chamberActivitiesService;
	
	@Autowired
	LoginService loginService;
	
	@Autowired
	private ServiceManageService serviceManageService;
	
	@Autowired
	private QuotationService quotationService;

	@GetMapping("/**.html")
	@Anonymous
	public ModelAndView pageForwart(ModelAndView mv) {
		return mv;
	}


	@PostMapping(value = "/getAllExpert")
	@Anonymous
	public Result getAllExpert(BaseDto baseDto) throws Exception {
		return OperatorService.getAllExpert(baseDto).getResult();
	}
	
	@GetMapping("all.html")
	@Anonymous
	public ModelAndView pageAll(ModelAndView mv,@RequestParam("cur") String cur) {

		mv.addObject("cur", cur);
		return mv;
	}
	
	/**
	 *	厂商分页查询
	 */
	@GetMapping("allChange/{cur}/{pageSize}/{pageIndex}")
	@Anonymous
	public Map<String,Object> allChange(@PathVariable String cur,@PathVariable String pageSize,@PathVariable String pageIndex) {
		return supplyService.getAll(cur,pageSize,pageIndex,"all");
	}
	/**
	 *	厂商名字搜索查询
	 */
	@PostMapping("searchByName")
	@Anonymous
	public Map<String,Object> allChangeByName(@RequestParam String cur,@RequestParam String pageSize,@RequestParam String pageIndex,@RequestParam String searchs) {
		return supplyService.getAll(cur, pageSize, pageIndex, "searchName", searchs);
	}

	@PostMapping("searchByHotWords")
	@Anonymous
	public Map<String, Object> searchByHotWords(@RequestParam String cur, @RequestParam String pageSize, @RequestParam String pageIndex, @RequestParam String hotWords) {
		return supplyService.getAll(cur, pageSize, pageIndex, "SearchHotWords", hotWords);

	}

	@GetMapping("requirement.html")
	public ModelAndView requirement(ModelAndView mv) {
		if (SessionUser.SessionUser() == null) {
			mv.setViewName("redirect:/gabLogin");
			return mv;
		} else {
			return mv;
		}
	}


	/**
	 * 产品需求发布
	 */
	@PostMapping(value = "saveNeed")
    public Result saveNeed(@RequestBody needVo needVo) throws Exception {
    	return needService.saveNeed(needVo);
    }
	
	/**
	 *	服务需求发布
	 */
	@PostMapping(value = "saveService")
    public Result saveService(@RequestBody serviceVo serviceVo) throws Exception {
    	return serviceManageService.saveService(serviceVo);
    }
	
	/**
	 *	需求市场查询
	 */
	@PostMapping("getNeed")
	@Anonymous
	public List<Map<String,Object>> getNeed(@RequestParam String type,@RequestParam String value) throws IOException {
		return needService.getNeed(type,value,"CP");
	}
	
	/**
	 *	需求市场分页查询
	 * @throws Exception 
	 */
	@PostMapping("getNeedPaging")
	@Anonymous
	public Map<String,Object> getNeedPaging(@RequestParam String params,@RequestParam String pageIndex,@RequestParam String pageSize) throws Exception {
		return needService.getNeedPaging(params,pageIndex,pageSize);
	}
	
	/**
	 *	产品市场分页查询
	 * @throws Exception 
	 */
	@PostMapping("getProductPaging")
	@Anonymous
	public Map<String,Object> getProductPaging(@RequestParam String params,@RequestParam String pageIndex,@RequestParam String pageSize) throws Exception {
		return productService.getProductPaging(params,pageIndex,pageSize);
	}
	
	/**
	 *	需求市场详情
	 * @throws IOException 
	 */
	@GetMapping("needs.html")
	@Anonymous
	public ModelAndView needs(ModelAndView mv,@RequestParam("") String needNote) throws IOException {
		Map<String,Object> need = needService.getNeed("needNote", needNote,"").get(0);
		mv.addObject("Need", need);
		if(need.get("cpcodeFl")!=null) {
			List<Map<String,Object>> TypeNeed = needService.getTypeNeed(need.get("cpcodeFl").toString(),need.get("needNote").toString());
			mv.addObject("TypeRecommend", TypeNeed);
			mv.addObject("TypeRecommendSize", TypeNeed.size());
		}
//		if(need.get("needFirm")!=null) {
		if(need.get("needFirm")==null) {
//			List<Map<String,Object>> FirmNeed = needService.getFirmNeed(need.get("needFirm").toString());
			List<Map<String,Object>> FirmNeed = needService.getFirmNeed("夹具厂商");
			mv.addObject("FirmRecommend", FirmNeed);
			mv.addObject("FirmRecommendSize", FirmNeed.size());
		}
		if(need.get("dataMan")!=null) {
			List<Map<String,Object>> manNeed = needService.getNeedByDataMan(need.get("dataMan").toString(),need.get("needNote").toString());
			mv.addObject("manNeed", manNeed);
			mv.addObject("manNeedSize", manNeed.size());
		}
		return mv;
	}
	@Autowired
	public SysParamService sysParamService;
	/**
	 *	产品市场详情
	 * @throws IOException 
	 */
	@GetMapping("supplyProDetails.html")
	@Anonymous
	public ModelAndView supplyProDetails(ModelAndView mv,@RequestParam("productNote") String productNote) throws IOException {
		Map<String,Object> product = productService.getProduct(productNote);
		mv.addObject("Product", product);
		String sql="select supply_id from sys_user where user_id='"+product.get("dataMan")+"'";
		String supplyId=productService.supplyId(sql);
		if(supplyId!=null) {
			Map<String,Object> supply = supplyService.getSupplyById(supplyId);
			if(supply!=null) {
				mv.addObject("Supply", supply);
			}
		}
		Result result=sysParamService.getByAddName("CP");
		Map<String,Object> maps= (Map<String, Object>) result.get("data");
		mv.addObject("product",maps);
		if(product.get("dataCorp")!=null) {
			List<Map<String,Object>> advisory = advisorysService.getAdvisoryClassify("技术案例","9",product.get("dataCorp").toString());
			mv.addObject("Advisory", advisory);
		}
		return mv;
	}
	
	/**
	 *根据类型获取专家信息
	 * @param cur  专家的类型 默认值Team 查询所有专家数据 
	 * @param pageSize 每页数据条数
	 * @param pageIndex 页码
	 * @return
	 */
	@GetMapping("getSrchExpertTeam/{cur}/{pageSize}/{pageIndex}")
	@Anonymous
	public Map<String,Object> getSrchExpertTeam(@PathVariable String cur , @PathVariable String pageSize,@PathVariable String pageIndex) {
		return supplyService.getSrchExpertTeam(cur,pageSize,pageIndex);
	}

	/**
	 *根据参数（工作年限、等级）获取专家信息
	 */

	@PostMapping("getExperTeamByParam")
	@Anonymous
	public Map<String,Object> getExperTeamByParam(@RequestBody List<ExpertVo> expertsVo) {
		return supplyService.getExpertTeamByParam(expertsVo);

	}


	/**
	 *搜索框
	 */
	@PostMapping("getExperTeamByWords")
	@Anonymous
	public Map<String,Object> getExperTeamByWords(@RequestParam String keyWords) {
		return supplyService.getExpertTeamBykeyWords(keyWords);

	}

	@GetMapping("getByidExpert{id}")
	@Anonymous
	public Map<String,Object>  getByidExpert(@RequestParam String id) {
		return supplyService.getByidExpert(id);
	}

	@GetMapping("getRandomExpert")
	@Anonymous
	public Map<String,Object>  getRandomExpert() {
		return supplyService.getRandomExpert();
	}

	/**
	 *	 供应商详情页获取对应的案例
	 */
	@GetMapping("getAdvisory/{supplyUid}")
	@Anonymous
	public Map<String,Object> getAdvisory(@PathVariable String supplyUid){
		return supplyService.getAdvisory(supplyUid);
	}
	
	/**
	 *	 首页获取商会活动数据
	 */
	@PostMapping("getgChamberActivities")
	@Anonymous
	public List<Map<String,Object>> getgChamberActivities(){
		return chamberActivitiesService.getgChamberActivities();
	}
	
	/**
	 *	 share.html分页数据
	 */
	@PostMapping("getShare")
	@Anonymous
	public Map<String,Object> getShare(@RequestParam String classify,@RequestParam String pageIndex,@RequestParam String pageSize) {
		if(classify.equals("商会活动")) {
			return chamberActivitiesService.getChamberActivities(pageSize,pageIndex);
		}
		return advisorysService.getAdvisoryPage(classify,pageSize,pageIndex);
	}

    @PostMapping("getAdvisory")
    @Anonymous
    public Map<String,Object> getAdvisory(){
        return advisorysService.getAdvisory("8");
    }

	/**
	 *	 academic.html数据获取
	 */
	@PostMapping("getAcademic")
	@Anonymous
	public Map<String,Object> getAcademic(@RequestParam("reqId") String reqId,@RequestParam("type") String type){
		Map<String,Object> rmap = OperatorService.getAcademic(reqId,type);
		return rmap;
	}
	
	/**
	 *	 academic.html数据获取
	 */
	@PostMapping("getSupply")
	@Anonymous
	public List<Map<String,Object>> getSupply(@RequestParam("supplyType") String supplyType){
		return supplyService.getSupply(supplyType);
	}

	
	/**
	 *	 info.html数据获取
	 */
	@PostMapping("getInfo")
	@Anonymous
	public Map<String,Object> getInfo(){
		Map<String,Object> rmap = new HashMap<String, Object>();
		rmap.put("chamberActivities", chamberActivitiesService.getLimit("4"));
		rmap.put("industryDynamics", advisorysService.getAdvisory("4").get("industryDynamics"));
		return rmap;
	}

	/**
	 *	 供应商详情
	 */
	@GetMapping("supply.html")
	@Anonymous
	public ModelAndView supply(ModelAndView mv,@RequestParam("supplyNote") String supplyNote ){
		Map<String, Object> supply = supplyService.getSupplyById(supplyNote);
		List<Map<String, Object>> supplyProduct = productService.getSupplyProduct(supplyNote);
		if (supplyProduct.size()>0){
			mv.addObject("Product", supplyProduct);
		}
		mv.addObject("Supply", supply);
		return mv;

	}


	@GetMapping("order.html")
	public ModelAndView order(ModelAndView mv,@RequestParam("productId") String productId){

		//获取单个产品信息
		Map<String,Object> product = productService.getProduct(productId);
		mv.addObject("product", product);

		//获取供应商信息
		String sql="select supply_id from sys_user where user_id='"+product.get("dataMan")+"'";
		String supplyId=productService.supplyId(sql);
		if(supplyId!=null) {
			Map<String,Object> supply = supplyService.getSupplyById(supplyId);
			mv.addObject("provider", supply);
		}

		//获取动态列名信息
		Result result=sysParamService.getByAddName("CP");
		Map<String,Object> maps= (Map<String, Object>) result.get("data");
		mv.addObject("dynamicProduct",maps);

		return mv;

	}


	@Anonymous
	@PostMapping(value = "expertCaseDetail")
	public Result expertalone(@RequestParam String id) {
		return Result.resultOk(advisorysService.expertCaseDetail(id));
	}
	
	/**
	 *	 立即报价
	 */
	@PostMapping("saveOffer")
	public Result saveOffer(@RequestBody QuotationVo quotationVo){
		return quotationService.saveOffer(quotationVo);
	}

	/**
	 *	 立即报价
	 */
	@GetMapping("getRegion")
	@Anonymous
	public List<RegionVo> saveOffer(){
		return OperatorService.getRegion();
	}
	
/*	@GetMapping(value = "getAllLikeSearch/{SearchKeyword}")
public Result getAllLikeSearch(@PathVariable String SearchKeyword){
return OperatorService.getAllLikeSearch(SearchKeyword);
}	
		
	*/
	
}
