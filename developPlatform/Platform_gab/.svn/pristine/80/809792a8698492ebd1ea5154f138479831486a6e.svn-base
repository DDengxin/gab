package com.tengzhi.business.platform.enroll.service.impl;

import com.tengzhi.base.jpa.dto.BaseDto;
import com.tengzhi.base.jpa.extension.Specifications;
import com.tengzhi.base.jpa.page.BasePage;
import com.tengzhi.base.jpa.result.Result;
import com.tengzhi.base.property.Property;
import com.tengzhi.base.security.common.model.SessionUser;
import com.tengzhi.base.security.common.tool.spring.SpringUtil;
import com.tengzhi.base.tools.MD5.MD5Util;
import com.tengzhi.business.platform.enroll.dao.ExpertDao;
import com.tengzhi.business.platform.enroll.dao.ExpertSqlDao;
import com.tengzhi.business.platform.enroll.dao.PersonalDao;
import com.tengzhi.business.platform.enroll.dao.SupplyDao;
import com.tengzhi.business.platform.enroll.model.G_Expert;
import com.tengzhi.business.platform.enroll.model.G_Supply;
import com.tengzhi.business.platform.enroll.model.G_personal;
import com.tengzhi.business.platform.enroll.service.ExpertService;
import com.tengzhi.business.platform.enroll.service.RegisterService;
import com.tengzhi.business.platform.enroll.vo.modelVo;
import com.tengzhi.business.system.core.service.SysGenNoteService;
import com.tengzhi.business.system.sms.constant.SmsType;
import com.tengzhi.business.system.sms.model.SysSmsLog;
import com.tengzhi.business.system.sms.service.SysSmsService;
import com.tengzhi.business.system.user.dao.SysUserDao;
import com.tengzhi.business.system.user.model.SysUser;
import com.tengzhi.business.system.user.service.SysUserService;
import com.tengzhi.business.system.workflow.service.ProcessService;
import com.tengzhi.business.system.workflow.vo.Examine;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import  com.tengzhi.business.personnel.eHrWorker.dao.eHrWorkerDao;
import com.tengzhi.business.personnel.eHrWorker.model.EHrWorker;

import javax.transaction.Transactional;
import java.sql.Timestamp;
import java.util.*;
@Service
@Transactional
public class ExpertServiceImpl implements ExpertService {

	@Autowired
	private SysGenNoteService sysGenNoteService;
	@Autowired
	private SupplyDao supplyDao;
	@Autowired
	private ExpertDao expertDao;
	@Autowired
	private PersonalDao personDao;
	@Autowired
	private SysUserDao sysUserDao;
	@Autowired
	private  SysUserService sysuserService;
	@Autowired
	private  ProcessService processService;
	@Autowired
	 private	 RegisterService registerService;
	@Autowired
    SysSmsService sysSmsService;
	@Autowired
	private  ExpertSqlDao expertSqlDao;
	@Autowired
	private  eHrWorkerDao eHrWorkerDao;


	@Override
	public void save(modelVo modelVo) throws Exception {
		String   note = sysGenNoteService.getNote(G_Supply.class, "GYS","yyyy-mm-dd",3);
		if (modelVo.getSysuser() != null) {
			SysUser user = modelVo.getSysuser();
			// 验证方法，保存的重要字段不重复
			if (judgeUnique(user)) {
				// 用户基础信息表
				user.setIsForbidden(false);
				user.setGenTime(new Timestamp(System.currentTimeMillis()));
				user.setJobNumber(user.getUserId());
				user.Validate();
				user.setPassword(MD5Util.encode(user.getPassword()));
				Property pro = SpringUtil.getBean(Property.class);
				user.setOrgId(pro.getBusiness().getDefaultCorp());
				if (modelVo.getSupply() != null) {
					// 供应商注册
					G_Supply supply = modelVo.getSupply();
					supply.setRegisterDate(new Date());
					supply.setSupply_note(note);
					supply.setKeyWord(supply.getKeyWord().substring(1,supply.getKeyWord().length()));
					supplyDao.save(supply);
					user.setSupplyId(supply.getSupply_note());
					//user.setOrgId(supply.getSupply_note());
					user.setType("厂商");
					user.setAssociatedId(supply.getSupply_note());
				} else if (modelVo.getPersonal() != null) {
					// 个人注册
					G_personal person = modelVo.getPersonal();
					person.setRegisterDate(new Date());
					person.setPersonNote(note);
					personDao.save(person);
					user.setSupplyId(person.getPersonNote());
					//user.setOrgId(person.getPersonNote());
					user.setType("客户");
				} else if (modelVo.getExpert() != null) {
					// 专家注册
					G_Expert expert = modelVo.getExpert();
					expert.setRegisterDate(new Date());
					expert.setExpertNote(note);
					expertDao.save(expert);
					user.setSupplyId(expert.getExpertNote());
					//user.setOrgId(expert.getExpertNote());
					user.setType("专家");
					user.setAssociatedId(expert.getExpertNote());
				} else {
					// do nothting
				}
				sysUserDao.save(user);
			} else {
				throw new Exception("用户ID，或姓名或机构名称或机构id已存在！");
			}
		}
	}

	@Override
    public boolean judgeUnique(SysUser sysUser) {
		  return sysUserDao.findAll(Specifications.where( false,(c) -> {
				c.eq("jobNumber", sysUser.getJobNumber());
				c.eq("userId", sysUser.getUserId());
				c.eq("nickName", sysUser.getNickName());
				c.eq("orgId", sysUser.getOrgId());
				c.eq("orgName", sysUser.getOrgName());
		  })).size() <= 0;
    }

	@Override
	public modelVo findById() throws Exception {//String id
		modelVo  entry = new modelVo();
	    SessionUser securityUser = (SessionUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		String  id  = securityUser.getUserId();
		SysUser user = sysUserDao.findById(id).orElse(null);
		entry.setSysuser(user);
		if(null == user.getType()) {
			return null;

		}else if ( user.getType().contains("厂商") ) {
			entry.setSupply(supplyDao.findById(user.getSupplyId()).orElse(null));
		}else if( user.getType().contains("专家")    ) {
			entry.setExpert(expertDao.findById(user.getSupplyId()).orElse(null));
		}else {
			throw new Exception("类型错误");
		}
		return  entry;
	}

	@Override
	public void update(modelVo vo) {
		// TODO Auto-generated method stub
		//修改用户基础信息
		SysUser user = 	sysUserDao.findById(vo.getSysuser().getUserId()).orElse(null);
		sysUserDao.dynamicSave(vo.getSysuser(), user);
		SysUser sysuser = vo.getSysuser();
		//修改专家基础信息
		if(vo.getExpert() != null) {
			expertDao.dynamicSave(vo.getExpert(),expertDao.findById(user.getSupplyId()).orElse(null));
		}
		//数据同步到e_hr_worker 表中
	       EHrWorker    ehr_woker = new  EHrWorker();
          // ehr_woker.setWorkerId(sysuser.getUserId());
           ehr_woker.setWorkerName(sysuser.getNickName());
           ehr_woker.setWorkerPhone(sysuser.getMobile());
           ehr_woker.setWorkerEmail(sysuser.getEmail());
           ehr_woker.setWorkerOperator(user.getUserId());		     
           eHrWorkerDao.dynamicSave(ehr_woker,eHrWorkerDao.findByWorkerId(user.getUserId()));
		
		
		
		
	}

	/**
	 * academic.html专家数据
	 */
	@Override
	public Map<String,Object> getAcademic(String founder){
		String sql = "select expert_note \"expertNote\",expert_name \"expertName\",main_job \"mainJob\",job_age \"jobAge\",level,strengths,introduce,('/system/setting/image?line_primary='||head_img) \"imageSrc\" from g_expert,sys_user where sys_user.associated_id = g_expert.expert_note and sys_user.user_id = '"+founder+"'";
		List<Map<String, Object>> map=expertDao.SelectListMap(sql);
		if(map!=null&&map.size()>0) {
			return map.get(0);
		}
		return null;
	}




	@Override
	public Result expertalone(String id) {

		Result  rs = new Result();
		String sql = "SELECT *,(select supply_name from g_supply where supply_note=g_expert.supply_name limit 1 ) supply_name_x from  g_expert    where expert_note = '"+id+"'";

		String sql1 = "SELECT  user_id, nick_name,mobile, email   from sys_user where supply_id = '"+id+"'";

		 rs.put("data",  expertDao.QueryhumpMap(sql).get(0));
		 rs.put("user",  expertDao.QueryhumpMap(sql1).get(0));
		return rs;
	
	}
	
	
	
	
	
	public Result agree(Examine examine) throws Exception {
		//审批流
		processService.agree(examine);
		//给对应的供应商进行授权
		String note =  examine.getBusinessId();
	 String  status = 	expertDao.getSingleResult("SELECT status  FROM  g_expert  where  expert_note = '"+note+"'");
		if("核准".equals(status)) {
			//获取用户id
			String userid = expertDao.getSingleResult("SELECT   user_id from   sys_user  where supply_id = '"+note+"'");						
			Map<String, Object> map = new HashMap<String, Object>();
			List<Map<String, Object>> list = new ArrayList<Map<String,Object>>();
			Map<String, Object> map2 = new  HashMap<String, Object>();
			map2.put("roleId", "ZJBM");			
			list.add(map2);					
			map.put("userId", userid);
			map.put("roleMap",list);
			sysuserService.saveUserAuth(map);
			// 用户状态改为启用
			sysUserDao.executeUpdate("UPDATE SysUser SET  delete_logo= false     WHERE  user_id = '" + userid + "'");
			SessionUser sessionUser = SessionUser.SessionUser();
			SysUser  user = 	sessionUser.getSysUser();
			//修改用户的机构id为审核人所在的机构id
		     sysUserDao.updateOrgId(userid,user.getOrgId());
              //专家审批数据同步到eh_hr_worker表中
				SysUser sysuser = sysUserDao.findById(userid).orElse(new SysUser());
	            G_Expert g_expert = expertDao.findById(note).orElse(null);
	            EHrWorker    ehr_woker = new  EHrWorker();
	            ehr_woker.setWorkerId(sysuser.getUserId());
	            ehr_woker.setWorkerName(sysuser.getNickName());
	            ehr_woker.setWorkerPhone(sysuser.getMobile());
	            ehr_woker.setWorkerEmail(sysuser.getEmail());
	            ehr_woker.setWorkerCorpid(user.getOrgId());
	            ehr_woker.setWorkerFlag("启用");
	            ehr_woker.setWorkerTime(sysuser.getGenTime());
	            ehr_woker.setWorkerOperator(user.getUserId());		     
	            eHrWorkerDao.save(ehr_woker);
		     
		     System.err.println("专家审批插入数据");
		     
			// 发送短信给对应供应商
			SysSmsLog sysSmsLog = sysSmsService.send(SysSmsLog.GenSms(sysuser, SmsType.GREANT, "已审核通过"));
			if (sysSmsLog.getSuccess()) {
			} else {
				throw new RuntimeException("审核通过，短信发送失败");
			}
			
			
		}
		
		
		return Result.resultOk();
	}

	
	

	
	
	public Map<String, Object> getExpertTech(String cur, String pageSize, String pageIndex ,String expert_id) {
		Map<String, Object> rmap = new HashMap<String, Object>();
		String  user_id = supplyDao.getSingleResult("select ");
		String sql = " SELECT *   from g_advisory  where   founder_id = '"+expert_id+"'   limit "
				+ pageSize + " offset (" + pageIndex + " -1 ) * " + pageSize;

		List<Map<String, Object>> list = supplyDao.SelectListMap(sql);
		rmap.put("data", list);
		rmap.put("total", list.size());
		return rmap;
	}

	@Override
	public BasePage<Map<String, Object>> getExpertTech(BaseDto baseDto) {
		Map<String, String> map = baseDto.getParamsMap();
	    String where = "";
        if (StringUtils.isNotBlank(map.get("expert_id"))) {
        	String  user_id = supplyDao.getSingleResult("select user_id from sys_user  where supply_id = '"+map.get("expert_id")+"'");
            where += " AND founder_id = '" + user_id + "'";
        } 
        if (StringUtils.isNotBlank(map.get("type"))) {
        	String advisort_type ="";
        	if("technology".equals(String.valueOf(map.get("type")))) {
        		advisort_type ="技术案例";
        	}else if("academic".equals(String.valueOf(map.get("type")))) {
        		advisort_type ="学术论文";
        	}else if("share".equals(String.valueOf(map.get("type"))) ) {
        		advisort_type ="经验分享";
        	}	
        	
        	
            where += " AND classify = '" + advisort_type + "'";
        } 
        
        String sql = " SELECT  *, (SELECT supply_id from sys_user where user_id =g_advisory.founder_id limit 1 )  supply_id   from g_advisory  where   1 = 1"+where;
        return supplyDao.QueryPageList(sql, "select count(1) from (" + sql + ") a", baseDto);

	}
	
	
	
	
	
	
	
	
}
